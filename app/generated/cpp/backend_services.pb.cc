// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_services.proto

#include "backend_services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr Vector::Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(){}
struct VectorDefaultTypeInternal {
  constexpr VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDefaultTypeInternal _Vector_default_instance_;
constexpr GetClosestNeighborRequest::GetClosestNeighborRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_(nullptr){}
struct GetClosestNeighborRequestDefaultTypeInternal {
  constexpr GetClosestNeighborRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetClosestNeighborRequestDefaultTypeInternal() {}
  union {
    GetClosestNeighborRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetClosestNeighborRequestDefaultTypeInternal _GetClosestNeighborRequest_default_instance_;
constexpr GetClosestNeighborResponse::GetClosestNeighborResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetClosestNeighborResponseDefaultTypeInternal {
  constexpr GetClosestNeighborResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetClosestNeighborResponseDefaultTypeInternal() {}
  union {
    GetClosestNeighborResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetClosestNeighborResponseDefaultTypeInternal _GetClosestNeighborResponse_default_instance_;
constexpr FindAverageVectorRequest::FindAverageVectorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FindAverageVectorRequestDefaultTypeInternal {
  constexpr FindAverageVectorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAverageVectorRequestDefaultTypeInternal() {}
  union {
    FindAverageVectorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAverageVectorRequestDefaultTypeInternal _FindAverageVectorRequest_default_instance_;
constexpr FindAverageVectorResponse::FindAverageVectorResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vector_(nullptr){}
struct FindAverageVectorResponseDefaultTypeInternal {
  constexpr FindAverageVectorResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAverageVectorResponseDefaultTypeInternal() {}
  union {
    FindAverageVectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAverageVectorResponseDefaultTypeInternal _FindAverageVectorResponse_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backend_5fservices_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_backend_5fservices_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backend_5fservices_2eproto = nullptr;

const uint32_t TableStruct_backend_5fservices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Vector, entry_),
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborRequest, vector_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GetClosestNeighborResponse, author_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FindAverageVectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FindAverageVectorResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::FindAverageVectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FindAverageVectorResponse, vector_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::Vector)},
  { 7, 14, -1, sizeof(::proto::GetClosestNeighborRequest)},
  { 15, 22, -1, sizeof(::proto::GetClosestNeighborResponse)},
  { 23, -1, -1, sizeof(::proto::FindAverageVectorRequest)},
  { 29, 36, -1, sizeof(::proto::FindAverageVectorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_GetClosestNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_GetClosestNeighborResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_FindAverageVectorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_FindAverageVectorResponse_default_instance_),
};

const char descriptor_table_protodef_backend_5fservices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026backend_services.proto\022\005proto\032\014common."
  "proto\"\027\n\006Vector\022\r\n\005entry\030\001 \003(\002\"J\n\031GetClo"
  "sestNeighborRequest\022\"\n\006vector\030\001 \001(\0132\r.pr"
  "oto.VectorH\000\210\001\001B\t\n\007_vector\"<\n\032GetClosest"
  "NeighborResponse\022\023\n\006author\030\001 \001(\tH\000\210\001\001B\t\n"
  "\007_author\"\032\n\030FindAverageVectorRequest\"J\n\031"
  "FindAverageVectorResponse\022\"\n\006vector\030\001 \001("
  "\0132\r.proto.VectorH\000\210\001\001B\t\n\007_vector2\206\002\n\027Sim"
  "ilarityEngineService\022Y\n\022GetClosestNeighb"
  "or\022 .proto.GetClosestNeighborRequest\032!.p"
  "roto.GetClosestNeighborResponse\022V\n\021FindA"
  "verageVector\022\037.proto.FindAverageVectorRe"
  "quest\032 .proto.FindAverageVectorResponse\022"
  "8\n\013CheckHealth\022\031.proto.HealthCheckReques"
  "t\032\016.proto.PayloadB\030Z\026app/generated/go/pr"
  "otob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_backend_5fservices_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backend_5fservices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fservices_2eproto = {
  false, false, 611, descriptor_table_protodef_backend_5fservices_2eproto, "backend_services.proto", 
  &descriptor_table_backend_5fservices_2eproto_once, descriptor_table_backend_5fservices_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_backend_5fservices_2eproto::offsets,
  file_level_metadata_backend_5fservices_2eproto, file_level_enum_descriptors_backend_5fservices_2eproto, file_level_service_descriptors_backend_5fservices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_backend_5fservices_2eproto_getter() {
  return &descriptor_table_backend_5fservices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_backend_5fservices_2eproto(&descriptor_table_backend_5fservices_2eproto);
namespace proto {

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Vector)
}

inline void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:proto.Vector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_entry(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_entry(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float entry = 1;
  if (this->_internal_entry_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_entry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_entry_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector::GetClassData() const { return &_class_data_; }

void Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector *>(to)->MergeFrom(
      static_cast<const Vector &>(from));
}


void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fservices_2eproto_getter, &descriptor_table_backend_5fservices_2eproto_once,
      file_level_metadata_backend_5fservices_2eproto[0]);
}

// ===================================================================

class GetClosestNeighborRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClosestNeighborRequest>()._has_bits_);
  static const ::proto::Vector& vector(const GetClosestNeighborRequest* msg);
  static void set_has_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Vector&
GetClosestNeighborRequest::_Internal::vector(const GetClosestNeighborRequest* msg) {
  return *msg->vector_;
}
GetClosestNeighborRequest::GetClosestNeighborRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.GetClosestNeighborRequest)
}
GetClosestNeighborRequest::GetClosestNeighborRequest(const GetClosestNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    vector_ = new ::proto::Vector(*from.vector_);
  } else {
    vector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetClosestNeighborRequest)
}

inline void GetClosestNeighborRequest::SharedCtor() {
vector_ = nullptr;
}

GetClosestNeighborRequest::~GetClosestNeighborRequest() {
  // @@protoc_insertion_point(destructor:proto.GetClosestNeighborRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetClosestNeighborRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vector_;
}

void GetClosestNeighborRequest::ArenaDtor(void* object) {
  GetClosestNeighborRequest* _this = reinterpret_cast< GetClosestNeighborRequest* >(object);
  (void)_this;
}
void GetClosestNeighborRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetClosestNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClosestNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetClosestNeighborRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vector_ != nullptr);
    vector_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClosestNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Vector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClosestNeighborRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetClosestNeighborRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Vector vector = 1;
  if (_internal_has_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetClosestNeighborRequest)
  return target;
}

size_t GetClosestNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetClosestNeighborRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Vector vector = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClosestNeighborRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClosestNeighborRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClosestNeighborRequest::GetClassData() const { return &_class_data_; }

void GetClosestNeighborRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClosestNeighborRequest *>(to)->MergeFrom(
      static_cast<const GetClosestNeighborRequest &>(from));
}


void GetClosestNeighborRequest::MergeFrom(const GetClosestNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetClosestNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _internal_mutable_vector()->::proto::Vector::MergeFrom(from._internal_vector());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosestNeighborRequest::CopyFrom(const GetClosestNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetClosestNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNeighborRequest::IsInitialized() const {
  return true;
}

void GetClosestNeighborRequest::InternalSwap(GetClosestNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vector_, other->vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClosestNeighborRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fservices_2eproto_getter, &descriptor_table_backend_5fservices_2eproto_once,
      file_level_metadata_backend_5fservices_2eproto[1]);
}

// ===================================================================

class GetClosestNeighborResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetClosestNeighborResponse>()._has_bits_);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetClosestNeighborResponse::GetClosestNeighborResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.GetClosestNeighborResponse)
}
GetClosestNeighborResponse::GetClosestNeighborResponse(const GetClosestNeighborResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetClosestNeighborResponse)
}

inline void GetClosestNeighborResponse::SharedCtor() {
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetClosestNeighborResponse::~GetClosestNeighborResponse() {
  // @@protoc_insertion_point(destructor:proto.GetClosestNeighborResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetClosestNeighborResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetClosestNeighborResponse::ArenaDtor(void* object) {
  GetClosestNeighborResponse* _this = reinterpret_cast< GetClosestNeighborResponse* >(object);
  (void)_this;
}
void GetClosestNeighborResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetClosestNeighborResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClosestNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetClosestNeighborResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    author_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClosestNeighborResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.GetClosestNeighborResponse.author"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClosestNeighborResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetClosestNeighborResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string author = 1;
  if (_internal_has_author()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GetClosestNeighborResponse.author");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetClosestNeighborResponse)
  return target;
}

size_t GetClosestNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetClosestNeighborResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string author = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClosestNeighborResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClosestNeighborResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClosestNeighborResponse::GetClassData() const { return &_class_data_; }

void GetClosestNeighborResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClosestNeighborResponse *>(to)->MergeFrom(
      static_cast<const GetClosestNeighborResponse &>(from));
}


void GetClosestNeighborResponse::MergeFrom(const GetClosestNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetClosestNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_author()) {
    _internal_set_author(from._internal_author());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClosestNeighborResponse::CopyFrom(const GetClosestNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetClosestNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClosestNeighborResponse::IsInitialized() const {
  return true;
}

void GetClosestNeighborResponse::InternalSwap(GetClosestNeighborResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClosestNeighborResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fservices_2eproto_getter, &descriptor_table_backend_5fservices_2eproto_once,
      file_level_metadata_backend_5fservices_2eproto[2]);
}

// ===================================================================

class FindAverageVectorRequest::_Internal {
 public:
};

FindAverageVectorRequest::FindAverageVectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.FindAverageVectorRequest)
}
FindAverageVectorRequest::FindAverageVectorRequest(const FindAverageVectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.FindAverageVectorRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAverageVectorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAverageVectorRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FindAverageVectorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fservices_2eproto_getter, &descriptor_table_backend_5fservices_2eproto_once,
      file_level_metadata_backend_5fservices_2eproto[3]);
}

// ===================================================================

class FindAverageVectorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FindAverageVectorResponse>()._has_bits_);
  static const ::proto::Vector& vector(const FindAverageVectorResponse* msg);
  static void set_has_vector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Vector&
FindAverageVectorResponse::_Internal::vector(const FindAverageVectorResponse* msg) {
  return *msg->vector_;
}
FindAverageVectorResponse::FindAverageVectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.FindAverageVectorResponse)
}
FindAverageVectorResponse::FindAverageVectorResponse(const FindAverageVectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    vector_ = new ::proto::Vector(*from.vector_);
  } else {
    vector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.FindAverageVectorResponse)
}

inline void FindAverageVectorResponse::SharedCtor() {
vector_ = nullptr;
}

FindAverageVectorResponse::~FindAverageVectorResponse() {
  // @@protoc_insertion_point(destructor:proto.FindAverageVectorResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAverageVectorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vector_;
}

void FindAverageVectorResponse::ArenaDtor(void* object) {
  FindAverageVectorResponse* _this = reinterpret_cast< FindAverageVectorResponse* >(object);
  (void)_this;
}
void FindAverageVectorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAverageVectorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAverageVectorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FindAverageVectorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(vector_ != nullptr);
    vector_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAverageVectorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Vector vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAverageVectorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FindAverageVectorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Vector vector = 1;
  if (_internal_has_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vector(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FindAverageVectorResponse)
  return target;
}

size_t FindAverageVectorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FindAverageVectorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Vector vector = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vector_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAverageVectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAverageVectorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAverageVectorResponse::GetClassData() const { return &_class_data_; }

void FindAverageVectorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAverageVectorResponse *>(to)->MergeFrom(
      static_cast<const FindAverageVectorResponse &>(from));
}


void FindAverageVectorResponse::MergeFrom(const FindAverageVectorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FindAverageVectorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _internal_mutable_vector()->::proto::Vector::MergeFrom(from._internal_vector());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAverageVectorResponse::CopyFrom(const FindAverageVectorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FindAverageVectorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAverageVectorResponse::IsInitialized() const {
  return true;
}

void FindAverageVectorResponse::InternalSwap(FindAverageVectorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vector_, other->vector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAverageVectorResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_backend_5fservices_2eproto_getter, &descriptor_table_backend_5fservices_2eproto_once,
      file_level_metadata_backend_5fservices_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Vector* Arena::CreateMaybeMessage< ::proto::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetClosestNeighborRequest* Arena::CreateMaybeMessage< ::proto::GetClosestNeighborRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetClosestNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GetClosestNeighborResponse* Arena::CreateMaybeMessage< ::proto::GetClosestNeighborResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GetClosestNeighborResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FindAverageVectorRequest* Arena::CreateMaybeMessage< ::proto::FindAverageVectorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FindAverageVectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FindAverageVectorResponse* Arena::CreateMaybeMessage< ::proto::FindAverageVectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FindAverageVectorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
