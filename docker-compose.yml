version: '3.8'
services:
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb/data:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
  minio:
    command: "server /data --console-address \":9001\""
    image: "minio/minio:latest"
    container_name: minio
    # environment:
    #   MINIO_ROOT_USER: minioadmin
    #   MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "./docker/minio/data:/data"
  frontendproxy:
    image: "nginx:latest"
    container_name: frontendproxy
    ports: 
      - "5000:5000"
    volumes:
      - "./config/nginx/frontendproxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - frontend
    links:
      - "frontend"
      - "backendproxy"
  backendproxy:
    image: "nginx:latest"
    container_name: backendproxy
    ports: 
      - "5001:5000"
    volumes:
      - "./config/nginx/backendproxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - recommendation
      - movies
      - similarity
    links:
      - "recommendation"
      - "movies"
      - "similarity"
  internalproxy:
    image: "nginx:latest"
    container_name: internalproxy
    ports: 
      - "5002:5000"
    volumes:
      - "./config/nginx/internalproxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    depends_on:
      - projection
      - ingestion
      - upload
    links:
      - "projection"
      - "ingestion"
      - "upload"
  frontend:
    build:
      context: .
      dockerfile: config/frontend/Dockerfile
    container_name: frontend
    depends_on:
      - backendproxy
    links:
      - "backendproxy"
  scraper:
    container_name: scraper
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    depends_on:
      - dynamodb-local
    links:
      - "dynamodb-local"
    build:
      context: .
      dockerfile: config/scraper/Dockerfile
  ingestion:
    container_name: ingestion
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    depends_on:
      - dynamodb-local
    links:
      - "dynamodb-local"
    build:
      context: .
      dockerfile: config/ingestion/Dockerfile
  projection:
    container_name: projection
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    depends_on:
      - dynamodb-local
      - minio
    links:
      - "dynamodb-local"
      - "minio"
    build:
      context: .
      dockerfile: config/projection/Dockerfile
  movies:
    container_name: movies
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    depends_on:
      - minio
    links:
      - "minio"
    build:
      context: .
      dockerfile: config/movies/Dockerfile
  recommendation:
    container_name: recommendation
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    depends_on:
      - dynamodb-local
      - movies
      - similarity
    links:
      - "dynamodb-local"
      - "movies"
      - "similarity"
    build:
      context: .
      dockerfile: config/recommendation/Dockerfile
  similarity:
    container_name: similarity
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    build:
      context: .
      dockerfile: config/similarity/Dockerfile
    depends_on:
      - minio
    links:
      - "minio"
  upload:
    container_name: upload
    environment:
      AWS_ACCESS_KEY_ID: fakeKeyId
      AWS_SECRET_ACCESS_KEY: fakeAccessKey
      AWS_DEFAULT_REGION: us-west-2
    build:
      context: .
      dockerfile: config/upload/Dockerfile
    depends_on:
      - minio
    links:
      - "minio"