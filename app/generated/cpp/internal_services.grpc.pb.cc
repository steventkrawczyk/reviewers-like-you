// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internal_services.proto

#include "internal_services.pb.h"
#include "internal_services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* ProjectionEngineService_method_names[] = {
  "/proto.ProjectionEngineService/CreateProjection",
  "/proto.ProjectionEngineService/CheckHealth",
};

std::unique_ptr< ProjectionEngineService::Stub> ProjectionEngineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectionEngineService::Stub> stub(new ProjectionEngineService::Stub(channel, options));
  return stub;
}

ProjectionEngineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProjection_(ProjectionEngineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(ProjectionEngineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectionEngineService::Stub::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProjection_, context, request, response);
}

void ProjectionEngineService::Stub::async::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProjection_, context, request, response, std::move(f));
}

void ProjectionEngineService::Stub::async::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::PrepareAsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::CreateProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::AsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionEngineService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void ProjectionEngineService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void ProjectionEngineService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectionEngineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionEngineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionEngineService::Service, ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->CreateProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionEngineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionEngineService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

ProjectionEngineService::Service::~Service() {
}

::grpc::Status ProjectionEngineService::Service::CreateProjection(::grpc::ServerContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionEngineService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Scraper_method_names[] = {
  "/proto.Scraper/Scrape",
  "/proto.Scraper/CheckHealth",
};

std::unique_ptr< Scraper::Stub> Scraper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scraper::Stub> stub(new Scraper::Stub(channel, options));
  return stub;
}

Scraper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Scrape_(Scraper_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(Scraper_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Scraper::Stub::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Scrape_, context, request, response);
}

void Scraper::Stub::async::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scrape_, context, request, response, std::move(f));
}

void Scraper::Stub::async::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scrape_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::PrepareAsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::ScrapeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Scrape_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::AsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScrapeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scraper::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void Scraper::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void Scraper::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

Scraper::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scraper_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scraper::Service, ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scraper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::ScrapeRequest* req,
             ::proto::Payload* resp) {
               return service->Scrape(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scraper_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scraper::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scraper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

Scraper::Service::~Service() {
}

::grpc::Status Scraper::Service::Scrape(::grpc::ServerContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scraper::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

