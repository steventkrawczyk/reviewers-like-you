// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `internal_services.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.CreateProjectionRequest)
pub struct CreateProjectionRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.CreateProjectionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateProjectionRequest {
    fn default() -> &'a CreateProjectionRequest {
        <CreateProjectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectionRequest {
    pub fn new() -> CreateProjectionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateProjectionRequest>(
            "CreateProjectionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateProjectionRequest {
    const NAME: &'static str = "CreateProjectionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateProjectionRequest {
        CreateProjectionRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateProjectionRequest {
        static instance: CreateProjectionRequest = CreateProjectionRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateProjectionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateProjectionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateProjectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ScrapeRequest)
pub struct ScrapeRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.ScrapeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ScrapeRequest {
    fn default() -> &'a ScrapeRequest {
        <ScrapeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ScrapeRequest {
    pub fn new() -> ScrapeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ScrapeRequest>(
            "ScrapeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ScrapeRequest {
    const NAME: &'static str = "ScrapeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ScrapeRequest {
        ScrapeRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ScrapeRequest {
        static instance: ScrapeRequest = ScrapeRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ScrapeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ScrapeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ScrapeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScrapeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17internal_services.proto\x12\x05proto\x1a\x0ccommon.proto\"\x19\n\
    \x17CreateProjectionRequest\"\x0f\n\rScrapeRequest2\x97\x01\n\x17Project\
    ionEngineService\x12B\n\x10CreateProjection\x12\x1e.proto.CreateProjecti\
    onRequest\x1a\x0e.proto.Payload\x128\n\x0bCheckHealth\x12\x19.proto.Heal\
    thCheckRequest\x1a\x0e.proto.Payload2s\n\x07Scraper\x12.\n\x06Scrape\x12\
    \x14.proto.ScrapeRequest\x1a\x0e.proto.Payload\x128\n\x0bCheckHealth\x12\
    \x19.proto.HealthCheckRequest\x1a\x0e.proto.PayloadB\x18Z\x16app/generat\
    ed/go/protoJ\xf6\x02\n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\t\n\x02\x03\0\x12\x03\x04\0\
    \x16\n\x08\n\x01\x08\x12\x03\x06\0-\n\t\n\x02\x08\x0b\x12\x03\x06\0-\n\t\
    \n\x02\x04\0\x12\x03\x08\0\"\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x1f\n\t\
    \n\x02\x04\x01\x12\x03\n\0\x18\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x15\n\
    \n\n\x02\x06\0\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\
    \x1f\n\x0b\n\x04\x06\0\x02\0\x12\x03\r\x02B\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\r\x06\x16\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\r\x17.\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\r9@\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x0e\
    \x028\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x0e\x06\x11\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03\x0e\x12$\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x0e/6\n\n\n\x02\x06\x01\x12\x04\x11\0\x14\x01\n\n\n\x03\x06\x01\x01\x12\
    \x03\x11\x08\x0f\n\x0b\n\x04\x06\x01\x02\0\x12\x03\x12\x02.\n\x0c\n\x05\
    \x06\x01\x02\0\x01\x12\x03\x12\x06\x0c\n\x0c\n\x05\x06\x01\x02\0\x02\x12\
    \x03\x12\r\x1a\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x03\x12%,\n\x0b\n\x04\
    \x06\x01\x02\x01\x12\x03\x13\x028\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\
    \x03\x13\x06\x11\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03\x13\x12$\n\x0c\
    \n\x05\x06\x01\x02\x01\x03\x12\x03\x13/6b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CreateProjectionRequest::generated_message_descriptor_data());
            messages.push(ScrapeRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
