// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `resource_services.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.UploadReviewRequest)
pub struct UploadReviewRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.UploadReviewRequest.review)
    pub review: ::protobuf::MessageField<super::data_model::Review>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.UploadReviewRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadReviewRequest {
    fn default() -> &'a UploadReviewRequest {
        <UploadReviewRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadReviewRequest {
    pub fn new() -> UploadReviewRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::Review>(
            "review",
            |m: &UploadReviewRequest| { &m.review },
            |m: &mut UploadReviewRequest| { &mut m.review },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadReviewRequest>(
            "UploadReviewRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadReviewRequest {
    const NAME: &'static str = "UploadReviewRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.review)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.review.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.review.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadReviewRequest {
        UploadReviewRequest::new()
    }

    fn clear(&mut self) {
        self.review.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadReviewRequest {
        static instance: UploadReviewRequest = UploadReviewRequest {
            review: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadReviewRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadReviewRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadReviewRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadReviewRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.BatchUploadReviewRequest)
pub struct BatchUploadReviewRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.BatchUploadReviewRequest.reviewList)
    pub reviewList: ::protobuf::MessageField<super::data_model::ReviewList>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.BatchUploadReviewRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchUploadReviewRequest {
    fn default() -> &'a BatchUploadReviewRequest {
        <BatchUploadReviewRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchUploadReviewRequest {
    pub fn new() -> BatchUploadReviewRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::ReviewList>(
            "reviewList",
            |m: &BatchUploadReviewRequest| { &m.reviewList },
            |m: &mut BatchUploadReviewRequest| { &mut m.reviewList },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchUploadReviewRequest>(
            "BatchUploadReviewRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchUploadReviewRequest {
    const NAME: &'static str = "BatchUploadReviewRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reviewList)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reviewList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reviewList.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchUploadReviewRequest {
        BatchUploadReviewRequest::new()
    }

    fn clear(&mut self) {
        self.reviewList.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchUploadReviewRequest {
        static instance: BatchUploadReviewRequest = BatchUploadReviewRequest {
            reviewList: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchUploadReviewRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchUploadReviewRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchUploadReviewRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchUploadReviewRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.GetReviewsByAuthorRequest)
pub struct GetReviewsByAuthorRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.GetReviewsByAuthorRequest.author)
    pub author: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.GetReviewsByAuthorRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetReviewsByAuthorRequest {
    fn default() -> &'a GetReviewsByAuthorRequest {
        <GetReviewsByAuthorRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetReviewsByAuthorRequest {
    pub fn new() -> GetReviewsByAuthorRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "author",
            |m: &GetReviewsByAuthorRequest| { &m.author },
            |m: &mut GetReviewsByAuthorRequest| { &mut m.author },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetReviewsByAuthorRequest>(
            "GetReviewsByAuthorRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetReviewsByAuthorRequest {
    const NAME: &'static str = "GetReviewsByAuthorRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.author = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.author.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.author.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetReviewsByAuthorRequest {
        GetReviewsByAuthorRequest::new()
    }

    fn clear(&mut self) {
        self.author = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetReviewsByAuthorRequest {
        static instance: GetReviewsByAuthorRequest = GetReviewsByAuthorRequest {
            author: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetReviewsByAuthorRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetReviewsByAuthorRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetReviewsByAuthorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReviewsByAuthorRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.GetAuthorsRequest)
pub struct GetAuthorsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.GetAuthorsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAuthorsRequest {
    fn default() -> &'a GetAuthorsRequest {
        <GetAuthorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAuthorsRequest {
    pub fn new() -> GetAuthorsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAuthorsRequest>(
            "GetAuthorsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAuthorsRequest {
    const NAME: &'static str = "GetAuthorsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAuthorsRequest {
        GetAuthorsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAuthorsRequest {
        static instance: GetAuthorsRequest = GetAuthorsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAuthorsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAuthorsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAuthorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAuthorsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.GetReviewsByAuthorResponse)
pub struct GetReviewsByAuthorResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.GetReviewsByAuthorResponse.reviewList)
    pub reviewList: ::protobuf::MessageField<super::data_model::ReviewList>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.GetReviewsByAuthorResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetReviewsByAuthorResponse {
    fn default() -> &'a GetReviewsByAuthorResponse {
        <GetReviewsByAuthorResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetReviewsByAuthorResponse {
    pub fn new() -> GetReviewsByAuthorResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::ReviewList>(
            "reviewList",
            |m: &GetReviewsByAuthorResponse| { &m.reviewList },
            |m: &mut GetReviewsByAuthorResponse| { &mut m.reviewList },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetReviewsByAuthorResponse>(
            "GetReviewsByAuthorResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetReviewsByAuthorResponse {
    const NAME: &'static str = "GetReviewsByAuthorResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.reviewList)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reviewList.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reviewList.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetReviewsByAuthorResponse {
        GetReviewsByAuthorResponse::new()
    }

    fn clear(&mut self) {
        self.reviewList.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetReviewsByAuthorResponse {
        static instance: GetReviewsByAuthorResponse = GetReviewsByAuthorResponse {
            reviewList: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetReviewsByAuthorResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetReviewsByAuthorResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetReviewsByAuthorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReviewsByAuthorResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.GetAuthorsResponse)
pub struct GetAuthorsResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.GetAuthorsResponse.author)
    pub author: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.GetAuthorsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAuthorsResponse {
    fn default() -> &'a GetAuthorsResponse {
        <GetAuthorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAuthorsResponse {
    pub fn new() -> GetAuthorsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "author",
            |m: &GetAuthorsResponse| { &m.author },
            |m: &mut GetAuthorsResponse| { &mut m.author },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAuthorsResponse>(
            "GetAuthorsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAuthorsResponse {
    const NAME: &'static str = "GetAuthorsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.author.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.author {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.author {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAuthorsResponse {
        GetAuthorsResponse::new()
    }

    fn clear(&mut self) {
        self.author.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAuthorsResponse {
        static instance: GetAuthorsResponse = GetAuthorsResponse {
            author: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAuthorsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAuthorsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAuthorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAuthorsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.UploadObjectRequest)
pub struct UploadObjectRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.UploadObjectRequest.bucketName)
    pub bucketName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.UploadObjectRequest.objectName)
    pub objectName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.UploadObjectRequest.serializedObject)
    pub serializedObject: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.UploadObjectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadObjectRequest {
    fn default() -> &'a UploadObjectRequest {
        <UploadObjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadObjectRequest {
    pub fn new() -> UploadObjectRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketName",
            |m: &UploadObjectRequest| { &m.bucketName },
            |m: &mut UploadObjectRequest| { &mut m.bucketName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "objectName",
            |m: &UploadObjectRequest| { &m.objectName },
            |m: &mut UploadObjectRequest| { &mut m.objectName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serializedObject",
            |m: &UploadObjectRequest| { &m.serializedObject },
            |m: &mut UploadObjectRequest| { &mut m.serializedObject },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadObjectRequest>(
            "UploadObjectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadObjectRequest {
    const NAME: &'static str = "UploadObjectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bucketName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.objectName = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.serializedObject = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bucketName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.objectName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.serializedObject.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bucketName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.objectName.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.serializedObject.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadObjectRequest {
        UploadObjectRequest::new()
    }

    fn clear(&mut self) {
        self.bucketName = ::std::option::Option::None;
        self.objectName = ::std::option::Option::None;
        self.serializedObject = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadObjectRequest {
        static instance: UploadObjectRequest = UploadObjectRequest {
            bucketName: ::std::option::Option::None,
            objectName: ::std::option::Option::None,
            serializedObject: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadObjectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadObjectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadObjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadObjectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadObjectRequest)
pub struct DownloadObjectRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.DownloadObjectRequest.bucketName)
    pub bucketName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.DownloadObjectRequest.objectName)
    pub objectName: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadObjectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadObjectRequest {
    fn default() -> &'a DownloadObjectRequest {
        <DownloadObjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl DownloadObjectRequest {
    pub fn new() -> DownloadObjectRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketName",
            |m: &DownloadObjectRequest| { &m.bucketName },
            |m: &mut DownloadObjectRequest| { &mut m.bucketName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "objectName",
            |m: &DownloadObjectRequest| { &m.objectName },
            |m: &mut DownloadObjectRequest| { &mut m.objectName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadObjectRequest>(
            "DownloadObjectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadObjectRequest {
    const NAME: &'static str = "DownloadObjectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bucketName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.objectName = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bucketName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.objectName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bucketName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.objectName.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadObjectRequest {
        DownloadObjectRequest::new()
    }

    fn clear(&mut self) {
        self.bucketName = ::std::option::Option::None;
        self.objectName = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadObjectRequest {
        static instance: DownloadObjectRequest = DownloadObjectRequest {
            bucketName: ::std::option::Option::None,
            objectName: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadObjectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadObjectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadObjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadObjectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadObjectResponse)
pub struct DownloadObjectResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.DownloadObjectResponse.found)
    pub found: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:proto.DownloadObjectResponse.data)
    pub data: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadObjectResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadObjectResponse {
    fn default() -> &'a DownloadObjectResponse {
        <DownloadObjectResponse as ::protobuf::Message>::default_instance()
    }
}

impl DownloadObjectResponse {
    pub fn new() -> DownloadObjectResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "found",
            |m: &DownloadObjectResponse| { &m.found },
            |m: &mut DownloadObjectResponse| { &mut m.found },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &DownloadObjectResponse| { &m.data },
            |m: &mut DownloadObjectResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadObjectResponse>(
            "DownloadObjectResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadObjectResponse {
    const NAME: &'static str = "DownloadObjectResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.found = ::std::option::Option::Some(is.read_bool()?);
                },
                18 => {
                    self.data = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.found {
            my_size += 1 + 1;
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.found {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadObjectResponse {
        DownloadObjectResponse::new()
    }

    fn clear(&mut self) {
        self.found = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadObjectResponse {
        static instance: DownloadObjectResponse = DownloadObjectResponse {
            found: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadObjectResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadObjectResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadObjectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadObjectResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.StatObjectRequest)
pub struct StatObjectRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.StatObjectRequest.bucketName)
    pub bucketName: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.StatObjectRequest.objectName)
    pub objectName: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.StatObjectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatObjectRequest {
    fn default() -> &'a StatObjectRequest {
        <StatObjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl StatObjectRequest {
    pub fn new() -> StatObjectRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucketName",
            |m: &StatObjectRequest| { &m.bucketName },
            |m: &mut StatObjectRequest| { &mut m.bucketName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "objectName",
            |m: &StatObjectRequest| { &m.objectName },
            |m: &mut StatObjectRequest| { &mut m.objectName },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatObjectRequest>(
            "StatObjectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatObjectRequest {
    const NAME: &'static str = "StatObjectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bucketName = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.objectName = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.bucketName.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.objectName.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.bucketName.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.objectName.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatObjectRequest {
        StatObjectRequest::new()
    }

    fn clear(&mut self) {
        self.bucketName = ::std::option::Option::None;
        self.objectName = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatObjectRequest {
        static instance: StatObjectRequest = StatObjectRequest {
            bucketName: ::std::option::Option::None,
            objectName: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatObjectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatObjectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatObjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatObjectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.StatObjectResponse)
pub struct StatObjectResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.StatObjectResponse.found)
    pub found: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.StatObjectResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StatObjectResponse {
    fn default() -> &'a StatObjectResponse {
        <StatObjectResponse as ::protobuf::Message>::default_instance()
    }
}

impl StatObjectResponse {
    pub fn new() -> StatObjectResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "found",
            |m: &StatObjectResponse| { &m.found },
            |m: &mut StatObjectResponse| { &mut m.found },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StatObjectResponse>(
            "StatObjectResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StatObjectResponse {
    const NAME: &'static str = "StatObjectResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.found = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.found {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.found {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StatObjectResponse {
        StatObjectResponse::new()
    }

    fn clear(&mut self) {
        self.found = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StatObjectResponse {
        static instance: StatObjectResponse = StatObjectResponse {
            found: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StatObjectResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StatObjectResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StatObjectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatObjectResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.UploadFileRequest)
pub struct UploadFileRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.UploadFileRequest.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.UploadFileRequest.body)
    pub body: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.UploadFileRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadFileRequest {
    fn default() -> &'a UploadFileRequest {
        <UploadFileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadFileRequest {
    pub fn new() -> UploadFileRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &UploadFileRequest| { &m.name },
            |m: &mut UploadFileRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body",
            |m: &UploadFileRequest| { &m.body },
            |m: &mut UploadFileRequest| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadFileRequest>(
            "UploadFileRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadFileRequest {
    const NAME: &'static str = "UploadFileRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.body = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.body.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadFileRequest {
        UploadFileRequest::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadFileRequest {
        static instance: UploadFileRequest = UploadFileRequest {
            name: ::std::option::Option::None,
            body: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadFileRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadFileRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadFileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadFileRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.IngestReviewRequest)
pub struct IngestReviewRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.IngestReviewRequest.review)
    pub review: ::protobuf::MessageField<super::data_model::Review>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.IngestReviewRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IngestReviewRequest {
    fn default() -> &'a IngestReviewRequest {
        <IngestReviewRequest as ::protobuf::Message>::default_instance()
    }
}

impl IngestReviewRequest {
    pub fn new() -> IngestReviewRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::Review>(
            "review",
            |m: &IngestReviewRequest| { &m.review },
            |m: &mut IngestReviewRequest| { &mut m.review },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IngestReviewRequest>(
            "IngestReviewRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IngestReviewRequest {
    const NAME: &'static str = "IngestReviewRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.review)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.review.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.review.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IngestReviewRequest {
        IngestReviewRequest::new()
    }

    fn clear(&mut self) {
        self.review.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IngestReviewRequest {
        static instance: IngestReviewRequest = IngestReviewRequest {
            review: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IngestReviewRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IngestReviewRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IngestReviewRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IngestReviewRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.IngestBatchRequest)
pub struct IngestBatchRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.IngestBatchRequest.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.IngestBatchRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IngestBatchRequest {
    fn default() -> &'a IngestBatchRequest {
        <IngestBatchRequest as ::protobuf::Message>::default_instance()
    }
}

impl IngestBatchRequest {
    pub fn new() -> IngestBatchRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &IngestBatchRequest| { &m.filename },
            |m: &mut IngestBatchRequest| { &mut m.filename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IngestBatchRequest>(
            "IngestBatchRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IngestBatchRequest {
    const NAME: &'static str = "IngestBatchRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filename.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IngestBatchRequest {
        IngestBatchRequest::new()
    }

    fn clear(&mut self) {
        self.filename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IngestBatchRequest {
        static instance: IngestBatchRequest = IngestBatchRequest {
            filename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IngestBatchRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IngestBatchRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IngestBatchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IngestBatchRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.UploadProjectionRequest)
pub struct UploadProjectionRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.UploadProjectionRequest.projection)
    pub projection: ::protobuf::MessageField<super::data_model::Projection>,
    // @@protoc_insertion_point(field:proto.UploadProjectionRequest.movieIndices)
    pub movieIndices: ::protobuf::MessageField<super::data_model::MovieIndices>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.UploadProjectionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadProjectionRequest {
    fn default() -> &'a UploadProjectionRequest {
        <UploadProjectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadProjectionRequest {
    pub fn new() -> UploadProjectionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::Projection>(
            "projection",
            |m: &UploadProjectionRequest| { &m.projection },
            |m: &mut UploadProjectionRequest| { &mut m.projection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::MovieIndices>(
            "movieIndices",
            |m: &UploadProjectionRequest| { &m.movieIndices },
            |m: &mut UploadProjectionRequest| { &mut m.movieIndices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadProjectionRequest>(
            "UploadProjectionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadProjectionRequest {
    const NAME: &'static str = "UploadProjectionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.projection)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.movieIndices)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.projection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.movieIndices.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.projection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.movieIndices.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadProjectionRequest {
        UploadProjectionRequest::new()
    }

    fn clear(&mut self) {
        self.projection.clear();
        self.movieIndices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadProjectionRequest {
        static instance: UploadProjectionRequest = UploadProjectionRequest {
            projection: ::protobuf::MessageField::none(),
            movieIndices: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadProjectionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadProjectionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadProjectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadProjectionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.AppendProjectionRequest)
pub struct AppendProjectionRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.AppendProjectionRequest.projection)
    pub projection: ::protobuf::MessageField<super::data_model::Projection>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.AppendProjectionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppendProjectionRequest {
    fn default() -> &'a AppendProjectionRequest {
        <AppendProjectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppendProjectionRequest {
    pub fn new() -> AppendProjectionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::Projection>(
            "projection",
            |m: &AppendProjectionRequest| { &m.projection },
            |m: &mut AppendProjectionRequest| { &mut m.projection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppendProjectionRequest>(
            "AppendProjectionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppendProjectionRequest {
    const NAME: &'static str = "AppendProjectionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.projection)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.projection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.projection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppendProjectionRequest {
        AppendProjectionRequest::new()
    }

    fn clear(&mut self) {
        self.projection.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppendProjectionRequest {
        static instance: AppendProjectionRequest = AppendProjectionRequest {
            projection: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppendProjectionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppendProjectionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppendProjectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendProjectionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadProjectionRequest)
pub struct DownloadProjectionRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.DownloadProjectionRequest.shardId)
    pub shardId: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadProjectionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadProjectionRequest {
    fn default() -> &'a DownloadProjectionRequest {
        <DownloadProjectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl DownloadProjectionRequest {
    pub fn new() -> DownloadProjectionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shardId",
            |m: &DownloadProjectionRequest| { &m.shardId },
            |m: &mut DownloadProjectionRequest| { &mut m.shardId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadProjectionRequest>(
            "DownloadProjectionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadProjectionRequest {
    const NAME: &'static str = "DownloadProjectionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.shardId = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.shardId {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.shardId {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadProjectionRequest {
        DownloadProjectionRequest::new()
    }

    fn clear(&mut self) {
        self.shardId = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadProjectionRequest {
        static instance: DownloadProjectionRequest = DownloadProjectionRequest {
            shardId: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadProjectionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadProjectionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadProjectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadProjectionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadMovieIndicesRequest)
pub struct DownloadMovieIndicesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadMovieIndicesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadMovieIndicesRequest {
    fn default() -> &'a DownloadMovieIndicesRequest {
        <DownloadMovieIndicesRequest as ::protobuf::Message>::default_instance()
    }
}

impl DownloadMovieIndicesRequest {
    pub fn new() -> DownloadMovieIndicesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadMovieIndicesRequest>(
            "DownloadMovieIndicesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadMovieIndicesRequest {
    const NAME: &'static str = "DownloadMovieIndicesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadMovieIndicesRequest {
        DownloadMovieIndicesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadMovieIndicesRequest {
        static instance: DownloadMovieIndicesRequest = DownloadMovieIndicesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadMovieIndicesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadMovieIndicesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadMovieIndicesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadMovieIndicesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadProjectionResponse)
pub struct DownloadProjectionResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.DownloadProjectionResponse.projection)
    pub projection: ::protobuf::MessageField<super::data_model::Projection>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadProjectionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadProjectionResponse {
    fn default() -> &'a DownloadProjectionResponse {
        <DownloadProjectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl DownloadProjectionResponse {
    pub fn new() -> DownloadProjectionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::Projection>(
            "projection",
            |m: &DownloadProjectionResponse| { &m.projection },
            |m: &mut DownloadProjectionResponse| { &mut m.projection },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadProjectionResponse>(
            "DownloadProjectionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadProjectionResponse {
    const NAME: &'static str = "DownloadProjectionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.projection)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.projection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.projection.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadProjectionResponse {
        DownloadProjectionResponse::new()
    }

    fn clear(&mut self) {
        self.projection.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadProjectionResponse {
        static instance: DownloadProjectionResponse = DownloadProjectionResponse {
            projection: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadProjectionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadProjectionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadProjectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadProjectionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.DownloadMovieIndicesResponse)
pub struct DownloadMovieIndicesResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.DownloadMovieIndicesResponse.movieIndices)
    pub movieIndices: ::protobuf::MessageField<super::data_model::MovieIndices>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.DownloadMovieIndicesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadMovieIndicesResponse {
    fn default() -> &'a DownloadMovieIndicesResponse {
        <DownloadMovieIndicesResponse as ::protobuf::Message>::default_instance()
    }
}

impl DownloadMovieIndicesResponse {
    pub fn new() -> DownloadMovieIndicesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::data_model::MovieIndices>(
            "movieIndices",
            |m: &DownloadMovieIndicesResponse| { &m.movieIndices },
            |m: &mut DownloadMovieIndicesResponse| { &mut m.movieIndices },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadMovieIndicesResponse>(
            "DownloadMovieIndicesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadMovieIndicesResponse {
    const NAME: &'static str = "DownloadMovieIndicesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.movieIndices)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.movieIndices.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.movieIndices.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadMovieIndicesResponse {
        DownloadMovieIndicesResponse::new()
    }

    fn clear(&mut self) {
        self.movieIndices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadMovieIndicesResponse {
        static instance: DownloadMovieIndicesResponse = DownloadMovieIndicesResponse {
            movieIndices: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadMovieIndicesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadMovieIndicesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadMovieIndicesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadMovieIndicesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ShardCountRequest)
pub struct ShardCountRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.ShardCountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShardCountRequest {
    fn default() -> &'a ShardCountRequest {
        <ShardCountRequest as ::protobuf::Message>::default_instance()
    }
}

impl ShardCountRequest {
    pub fn new() -> ShardCountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShardCountRequest>(
            "ShardCountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShardCountRequest {
    const NAME: &'static str = "ShardCountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShardCountRequest {
        ShardCountRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShardCountRequest {
        static instance: ShardCountRequest = ShardCountRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShardCountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShardCountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShardCountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardCountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ShardCountResponse)
pub struct ShardCountResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.ShardCountResponse.count)
    pub count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ShardCountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShardCountResponse {
    fn default() -> &'a ShardCountResponse {
        <ShardCountResponse as ::protobuf::Message>::default_instance()
    }
}

impl ShardCountResponse {
    pub fn new() -> ShardCountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &ShardCountResponse| { &m.count },
            |m: &mut ShardCountResponse| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShardCountResponse>(
            "ShardCountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShardCountResponse {
    const NAME: &'static str = "ShardCountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.count {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShardCountResponse {
        ShardCountResponse::new()
    }

    fn clear(&mut self) {
        self.count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShardCountResponse {
        static instance: ShardCountResponse = ShardCountResponse {
            count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShardCountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShardCountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShardCountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardCountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ManageResourceRequest)
pub struct ManageResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.ManageResourceRequest.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.ManageResourceRequest.action)
    pub action: ::std::option::Option<::protobuf::EnumOrUnknown<Action>>,
    // @@protoc_insertion_point(field:proto.ManageResourceRequest.resource)
    pub resource: ::std::option::Option<::protobuf::EnumOrUnknown<Resource>>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ManageResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ManageResourceRequest {
    fn default() -> &'a ManageResourceRequest {
        <ManageResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl ManageResourceRequest {
    pub fn new() -> ManageResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ManageResourceRequest| { &m.name },
            |m: &mut ManageResourceRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &ManageResourceRequest| { &m.action },
            |m: &mut ManageResourceRequest| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "resource",
            |m: &ManageResourceRequest| { &m.resource },
            |m: &mut ManageResourceRequest| { &mut m.resource },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ManageResourceRequest>(
            "ManageResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ManageResourceRequest {
    const NAME: &'static str = "ManageResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                24 => {
                    self.resource = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        if let Some(v) = self.resource {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.action {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.resource {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ManageResourceRequest {
        ManageResourceRequest::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.resource = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ManageResourceRequest {
        static instance: ManageResourceRequest = ManageResourceRequest {
            name: ::std::option::Option::None,
            action: ::std::option::Option::None,
            resource: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ManageResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ManageResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ManageResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ManageResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:proto.Action)
pub enum Action {
    // @@protoc_insertion_point(enum_value:proto.Action.CREATE)
    CREATE = 0,
    // @@protoc_insertion_point(enum_value:proto.Action.DELETE)
    DELETE = 1,
}

impl ::protobuf::Enum for Action {
    const NAME: &'static str = "Action";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Action> {
        match value {
            0 => ::std::option::Option::Some(Action::CREATE),
            1 => ::std::option::Option::Some(Action::DELETE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Action] = &[
        Action::CREATE,
        Action::DELETE,
    ];
}

impl ::protobuf::EnumFull for Action {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Action").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Action {
    fn default() -> Self {
        Action::CREATE
    }
}

impl Action {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Action>("Action")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:proto.Resource)
pub enum Resource {
    // @@protoc_insertion_point(enum_value:proto.Resource.TABLE)
    TABLE = 0,
    // @@protoc_insertion_point(enum_value:proto.Resource.BUCKET)
    BUCKET = 1,
}

impl ::protobuf::Enum for Resource {
    const NAME: &'static str = "Resource";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Resource> {
        match value {
            0 => ::std::option::Option::Some(Resource::TABLE),
            1 => ::std::option::Option::Some(Resource::BUCKET),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Resource] = &[
        Resource::TABLE,
        Resource::BUCKET,
    ];
}

impl ::protobuf::EnumFull for Resource {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Resource").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Resource {
    fn default() -> Self {
        Resource::TABLE
    }
}

impl Resource {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Resource>("Resource")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17resource_services.proto\x12\x05proto\x1a\x0ccommon.proto\x1a\x10da\
    ta_model.proto\"L\n\x13UploadReviewRequest\x12*\n\x06review\x18\x01\x20\
    \x01(\x0b2\r.proto.ReviewH\0R\x06review\x88\x01\x01B\t\n\x07_review\"a\n\
    \x18BatchUploadReviewRequest\x126\n\nreviewList\x18\x01\x20\x01(\x0b2\
    \x11.proto.ReviewListH\0R\nreviewList\x88\x01\x01B\r\n\x0b_reviewList\"C\
    \n\x19GetReviewsByAuthorRequest\x12\x1b\n\x06author\x18\x01\x20\x01(\tH\
    \0R\x06author\x88\x01\x01B\t\n\x07_author\"\x13\n\x11GetAuthorsRequest\"\
    c\n\x1aGetReviewsByAuthorResponse\x126\n\nreviewList\x18\x01\x20\x01(\
    \x0b2\x11.proto.ReviewListH\0R\nreviewList\x88\x01\x01B\r\n\x0b_reviewLi\
    st\",\n\x12GetAuthorsResponse\x12\x16\n\x06author\x18\x01\x20\x03(\tR\
    \x06author\"\xc3\x01\n\x13UploadObjectRequest\x12#\n\nbucketName\x18\x01\
    \x20\x01(\tH\0R\nbucketName\x88\x01\x01\x12#\n\nobjectName\x18\x02\x20\
    \x01(\tH\x01R\nobjectName\x88\x01\x01\x12/\n\x10serializedObject\x18\x03\
    \x20\x01(\tH\x02R\x10serializedObject\x88\x01\x01B\r\n\x0b_bucketNameB\r\
    \n\x0b_objectNameB\x13\n\x11_serializedObject\"\x7f\n\x15DownloadObjectR\
    equest\x12#\n\nbucketName\x18\x01\x20\x01(\tH\0R\nbucketName\x88\x01\x01\
    \x12#\n\nobjectName\x18\x02\x20\x01(\tH\x01R\nobjectName\x88\x01\x01B\r\
    \n\x0b_bucketNameB\r\n\x0b_objectName\"_\n\x16DownloadObjectResponse\x12\
    \x19\n\x05found\x18\x01\x20\x01(\x08H\0R\x05found\x88\x01\x01\x12\x17\n\
    \x04data\x18\x02\x20\x01(\tH\x01R\x04data\x88\x01\x01B\x08\n\x06_foundB\
    \x07\n\x05_data\"{\n\x11StatObjectRequest\x12#\n\nbucketName\x18\x01\x20\
    \x01(\tH\0R\nbucketName\x88\x01\x01\x12#\n\nobjectName\x18\x02\x20\x01(\
    \tH\x01R\nobjectName\x88\x01\x01B\r\n\x0b_bucketNameB\r\n\x0b_objectName\
    \"9\n\x12StatObjectResponse\x12\x19\n\x05found\x18\x01\x20\x01(\x08H\0R\
    \x05found\x88\x01\x01B\x08\n\x06_found\"W\n\x11UploadFileRequest\x12\x17\
    \n\x04name\x18\x01\x20\x01(\tH\0R\x04name\x88\x01\x01\x12\x17\n\x04body\
    \x18\x02\x20\x01(\x0cH\x01R\x04body\x88\x01\x01B\x07\n\x05_nameB\x07\n\
    \x05_body\"L\n\x13IngestReviewRequest\x12*\n\x06review\x18\x01\x20\x01(\
    \x0b2\r.proto.ReviewH\0R\x06review\x88\x01\x01B\t\n\x07_review\"B\n\x12I\
    ngestBatchRequest\x12\x1f\n\x08filename\x18\x01\x20\x01(\tH\0R\x08filena\
    me\x88\x01\x01B\x0b\n\t_filename\"\xaf\x01\n\x17UploadProjectionRequest\
    \x126\n\nprojection\x18\x01\x20\x01(\x0b2\x11.proto.ProjectionH\0R\nproj\
    ection\x88\x01\x01\x12<\n\x0cmovieIndices\x18\x02\x20\x01(\x0b2\x13.prot\
    o.MovieIndicesH\x01R\x0cmovieIndices\x88\x01\x01B\r\n\x0b_projectionB\
    \x0f\n\r_movieIndices\"`\n\x17AppendProjectionRequest\x126\n\nprojection\
    \x18\x01\x20\x01(\x0b2\x11.proto.ProjectionH\0R\nprojection\x88\x01\x01B\
    \r\n\x0b_projection\"F\n\x19DownloadProjectionRequest\x12\x1d\n\x07shard\
    Id\x18\x01\x20\x01(\x05H\0R\x07shardId\x88\x01\x01B\n\n\x08_shardId\"\
    \x1d\n\x1bDownloadMovieIndicesRequest\"c\n\x1aDownloadProjectionResponse\
    \x126\n\nprojection\x18\x01\x20\x01(\x0b2\x11.proto.ProjectionH\0R\nproj\
    ection\x88\x01\x01B\r\n\x0b_projection\"m\n\x1cDownloadMovieIndicesRespo\
    nse\x12<\n\x0cmovieIndices\x18\x01\x20\x01(\x0b2\x13.proto.MovieIndicesH\
    \0R\x0cmovieIndices\x88\x01\x01B\x0f\n\r_movieIndices\"\x13\n\x11ShardCo\
    untRequest\"9\n\x12ShardCountResponse\x12\x19\n\x05count\x18\x01\x20\x01\
    (\x05H\0R\x05count\x88\x01\x01B\x08\n\x06_count\"\xaf\x01\n\x15ManageRes\
    ourceRequest\x12\x17\n\x04name\x18\x01\x20\x01(\tH\0R\x04name\x88\x01\
    \x01\x12*\n\x06action\x18\x02\x20\x01(\x0e2\r.proto.ActionH\x01R\x06acti\
    on\x88\x01\x01\x120\n\x08resource\x18\x03\x20\x01(\x0e2\x0f.proto.Resour\
    ceH\x02R\x08resource\x88\x01\x01B\x07\n\x05_nameB\t\n\x07_actionB\x0b\n\
    \t_resource*\x20\n\x06Action\x12\n\n\x06CREATE\x10\0\x12\n\n\x06DELETE\
    \x10\x01*!\n\x08Resource\x12\t\n\x05TABLE\x10\0\x12\n\n\x06BUCKET\x10\
    \x012\xb6\x02\n\x14MainDatastoreService\x12:\n\x0cUploadReview\x12\x1a.p\
    roto.UploadReviewRequest\x1a\x0e.proto.Payload\x12D\n\x11BatchUploadRevi\
    ew\x12\x1f.proto.BatchUploadReviewRequest\x1a\x0e.proto.Payload\x12Y\n\
    \x12GetReviewsByAuthor\x12\x20.proto.GetReviewsByAuthorRequest\x1a!.prot\
    o.GetReviewsByAuthorResponse\x12A\n\nGetAuthors\x12\x18.proto.GetAuthors\
    Request\x1a\x19.proto.GetAuthorsResponse2\xe0\x01\n\x10FilestoreService\
    \x12:\n\x0cUploadObject\x12\x1a.proto.UploadObjectRequest\x1a\x0e.proto.\
    Payload\x12M\n\x0eDownloadObject\x12\x1c.proto.DownloadObjectRequest\x1a\
    \x1d.proto.DownloadObjectResponse\x12A\n\nStatObject\x12\x18.proto.StatO\
    bjectRequest\x1a\x19.proto.StatObjectResponse2\x91\x01\n\x15DatastoreAdm\
    inService\x12>\n\x0eManageResource\x12\x1c.proto.ManageResourceRequest\
    \x1a\x0e.proto.Payload\x128\n\x0bCheckHealth\x12\x19.proto.HealthCheckRe\
    quest\x1a\x0e.proto.Payload2\xc2\x01\n\x10IngestionService\x12:\n\x0cIng\
    estReview\x12\x1a.proto.IngestReviewRequest\x1a\x0e.proto.Payload\x128\n\
    \x0bIngestBatch\x12\x19.proto.IngestBatchRequest\x1a\x0e.proto.Payload\
    \x128\n\x0bCheckHealth\x12\x19.proto.HealthCheckRequest\x1a\x0e.proto.Pa\
    yload2\x81\x01\n\rUploadService\x126\n\nUploadFile\x12\x18.proto.UploadF\
    ileRequest\x1a\x0e.proto.Payload\x128\n\x0bCheckHealth\x12\x19.proto.Hea\
    lthCheckRequest\x1a\x0e.proto.Payload2\xdd\x03\n\x1aProjectionDatastoreS\
    ervice\x12B\n\x10UploadProjection\x12\x1e.proto.UploadProjectionRequest\
    \x1a\x0e.proto.Payload\x12B\n\x10AppendProjection\x12\x1e.proto.AppendPr\
    ojectionRequest\x1a\x0e.proto.Payload\x12Y\n\x12DownloadProjection\x12\
    \x20.proto.DownloadProjectionRequest\x1a!.proto.DownloadProjectionRespon\
    se\x12_\n\x14DownloadMovieIndices\x12\".proto.DownloadMovieIndicesReques\
    t\x1a#.proto.DownloadMovieIndicesResponse\x12A\n\nShardCount\x12\x18.pro\
    to.ShardCountRequest\x1a\x19.proto.ShardCountResponse\x128\n\x0bCheckHea\
    lth\x12\x19.proto.HealthCheckRequest\x1a\x0e.proto.PayloadB\x18Z\x16app/\
    generated/go/protoJ\xb1\x20\n\x07\x12\x05\0\0\x98\x01\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\t\n\x02\x03\0\
    \x12\x03\x04\0\x16\n\t\n\x02\x03\x01\x12\x03\x05\0\x1a\n\x08\n\x01\x08\
    \x12\x03\x07\0-\n\t\n\x02\x08\x0b\x12\x03\x07\0-\n\n\n\x02\x04\0\x12\x04\
    \t\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x1b\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\n\x02\x1d\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\n\x02\n\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\n\x12\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x1b\x1c\n\n\n\x02\
    \x04\x01\x12\x04\r\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x20\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x02%\n\x0c\n\x05\x04\x01\x02\0\x04\
    \x12\x03\x0e\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0e\x0b\x15\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\x16\x20\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\x0e#$\n\n\n\x02\x04\x02\x12\x04\x11\0\x13\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x11\x08!\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x02\
    \x1d\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x12\x02\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x12\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\
    \x12\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x12\x1b\x1c\n\t\n\x02\x04\
    \x03\x12\x03\x15\0\x1c\n\n\n\x03\x04\x03\x01\x12\x03\x15\x08\x19\n\n\n\
    \x02\x04\x04\x12\x04\x17\0\x19\x01\n\n\n\x03\x04\x04\x01\x12\x03\x17\x08\
    \"\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x18\x02%\n\x0c\n\x05\x04\x04\x02\0\
    \x04\x12\x03\x18\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x18\x0b\x15\
    \n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x18\x16\x20\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03\x18#$\n\n\n\x02\x04\x05\x12\x04\x1b\0\x1d\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03\x1b\x08\x1a\n\x0b\n\x04\x04\x05\x02\0\x12\x03\
    \x1c\x02\x1d\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\
    \x04\x05\x02\0\x05\x12\x03\x1c\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03\x1c\x12\x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x1c\x1b\x1c\n\n\n\
    \x02\x04\x06\x12\x04\x1f\0#\x01\n\n\n\x03\x04\x06\x01\x12\x03\x1f\x08\
    \x1b\n\x0b\n\x04\x04\x06\x02\0\x12\x03\x20\x02!\n\x0c\n\x05\x04\x06\x02\
    \0\x04\x12\x03\x20\x02\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03\x20\x0b\
    \x11\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03\x20\x12\x1c\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03\x20\x1f\x20\n\x0b\n\x04\x04\x06\x02\x01\x12\x03!\
    \x02!\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03!\x02\n\n\x0c\n\x05\x04\x06\
    \x02\x01\x05\x12\x03!\x0b\x11\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03!\
    \x12\x1c\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03!\x1f\x20\n\x0b\n\x04\
    \x04\x06\x02\x02\x12\x03\"\x02'\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03\
    \"\x02\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03\"\x0b\x11\n\x0c\n\x05\
    \x04\x06\x02\x02\x01\x12\x03\"\x12\"\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\
    \x03\"%&\n\n\n\x02\x04\x07\x12\x04%\0(\x01\n\n\n\x03\x04\x07\x01\x12\x03\
    %\x08\x1d\n\x0b\n\x04\x04\x07\x02\0\x12\x03&\x02!\n\x0c\n\x05\x04\x07\
    \x02\0\x04\x12\x03&\x02\n\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03&\x0b\x11\
    \n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03&\x12\x1c\n\x0c\n\x05\x04\x07\x02\
    \0\x03\x12\x03&\x1f\x20\n\x0b\n\x04\x04\x07\x02\x01\x12\x03'\x02!\n\x0c\
    \n\x05\x04\x07\x02\x01\x04\x12\x03'\x02\n\n\x0c\n\x05\x04\x07\x02\x01\
    \x05\x12\x03'\x0b\x11\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03'\x12\x1c\n\
    \x0c\n\x05\x04\x07\x02\x01\x03\x12\x03'\x1f\x20\n\n\n\x02\x04\x08\x12\
    \x04*\0-\x01\n\n\n\x03\x04\x08\x01\x12\x03*\x08\x1e\n\x0b\n\x04\x04\x08\
    \x02\0\x12\x03+\x02\x1a\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03+\x02\n\n\
    \x0c\n\x05\x04\x08\x02\0\x05\x12\x03+\x0b\x0f\n\x0c\n\x05\x04\x08\x02\0\
    \x01\x12\x03+\x10\x15\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03+\x18\x19\n\
    \x0b\n\x04\x04\x08\x02\x01\x12\x03,\x02\x1b\n\x0c\n\x05\x04\x08\x02\x01\
    \x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03,\x0b\x11\n\
    \x0c\n\x05\x04\x08\x02\x01\x01\x12\x03,\x12\x16\n\x0c\n\x05\x04\x08\x02\
    \x01\x03\x12\x03,\x19\x1a\n\n\n\x02\x04\t\x12\x04/\02\x01\n\n\n\x03\x04\
    \t\x01\x12\x03/\x08\x19\n\x0b\n\x04\x04\t\x02\0\x12\x030\x02!\n\x0c\n\
    \x05\x04\t\x02\0\x04\x12\x030\x02\n\n\x0c\n\x05\x04\t\x02\0\x05\x12\x030\
    \x0b\x11\n\x0c\n\x05\x04\t\x02\0\x01\x12\x030\x12\x1c\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x030\x1f\x20\n\x0b\n\x04\x04\t\x02\x01\x12\x031\x02!\n\
    \x0c\n\x05\x04\t\x02\x01\x04\x12\x031\x02\n\n\x0c\n\x05\x04\t\x02\x01\
    \x05\x12\x031\x0b\x11\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x031\x12\x1c\n\
    \x0c\n\x05\x04\t\x02\x01\x03\x12\x031\x1f\x20\n\n\n\x02\x04\n\x12\x044\0\
    6\x01\n\n\n\x03\x04\n\x01\x12\x034\x08\x1a\n\x0b\n\x04\x04\n\x02\0\x12\
    \x035\x02\x1a\n\x0c\n\x05\x04\n\x02\0\x04\x12\x035\x02\n\n\x0c\n\x05\x04\
    \n\x02\0\x05\x12\x035\x0b\x0f\n\x0c\n\x05\x04\n\x02\0\x01\x12\x035\x10\
    \x15\n\x0c\n\x05\x04\n\x02\0\x03\x12\x035\x18\x19\n\n\n\x02\x04\x0b\x12\
    \x048\0;\x01\n\n\n\x03\x04\x0b\x01\x12\x038\x08\x19\n\x0b\n\x04\x04\x0b\
    \x02\0\x12\x039\x02\x1b\n\x0c\n\x05\x04\x0b\x02\0\x04\x12\x039\x02\n\n\
    \x0c\n\x05\x04\x0b\x02\0\x05\x12\x039\x0b\x11\n\x0c\n\x05\x04\x0b\x02\0\
    \x01\x12\x039\x12\x16\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x039\x19\x1a\n\
    \x0b\n\x04\x04\x0b\x02\x01\x12\x03:\x02\x1a\n\x0c\n\x05\x04\x0b\x02\x01\
    \x04\x12\x03:\x02\n\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03:\x0b\x10\n\
    \x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03:\x11\x15\n\x0c\n\x05\x04\x0b\x02\
    \x01\x03\x12\x03:\x18\x19\n\n\n\x02\x04\x0c\x12\x04=\0?\x01\n\n\n\x03\
    \x04\x0c\x01\x12\x03=\x08\x1b\n\x0b\n\x04\x04\x0c\x02\0\x12\x03>\x02\x1d\
    \n\x0c\n\x05\x04\x0c\x02\0\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\x0c\x02\0\
    \x06\x12\x03>\x0b\x11\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03>\x12\x18\n\
    \x0c\n\x05\x04\x0c\x02\0\x03\x12\x03>\x1b\x1c\n\n\n\x02\x04\r\x12\x04A\0\
    C\x01\n\n\n\x03\x04\r\x01\x12\x03A\x08\x1a\n\x0b\n\x04\x04\r\x02\0\x12\
    \x03B\x02\x1f\n\x0c\n\x05\x04\r\x02\0\x04\x12\x03B\x02\n\n\x0c\n\x05\x04\
    \r\x02\0\x05\x12\x03B\x0b\x11\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03B\x12\
    \x1a\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03B\x1d\x1e\n\n\n\x02\x04\x0e\x12\
    \x04E\0H\x01\n\n\n\x03\x04\x0e\x01\x12\x03E\x08\x1f\n\x0b\n\x04\x04\x0e\
    \x02\0\x12\x03F\x02%\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03F\x02\n\n\x0c\
    \n\x05\x04\x0e\x02\0\x06\x12\x03F\x0b\x15\n\x0c\n\x05\x04\x0e\x02\0\x01\
    \x12\x03F\x16\x20\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03F#$\n\x0b\n\x04\
    \x04\x0e\x02\x01\x12\x03G\x02)\n\x0c\n\x05\x04\x0e\x02\x01\x04\x12\x03G\
    \x02\n\n\x0c\n\x05\x04\x0e\x02\x01\x06\x12\x03G\x0b\x17\n\x0c\n\x05\x04\
    \x0e\x02\x01\x01\x12\x03G\x18$\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\x03G'\
    (\n\n\n\x02\x04\x0f\x12\x04J\0L\x01\n\n\n\x03\x04\x0f\x01\x12\x03J\x08\
    \x1f\n\x0b\n\x04\x04\x0f\x02\0\x12\x03K\x02%\n\x0c\n\x05\x04\x0f\x02\0\
    \x04\x12\x03K\x02\n\n\x0c\n\x05\x04\x0f\x02\0\x06\x12\x03K\x0b\x15\n\x0c\
    \n\x05\x04\x0f\x02\0\x01\x12\x03K\x16\x20\n\x0c\n\x05\x04\x0f\x02\0\x03\
    \x12\x03K#$\n\n\n\x02\x04\x10\x12\x04N\0P\x01\n\n\n\x03\x04\x10\x01\x12\
    \x03N\x08!\n\x0b\n\x04\x04\x10\x02\0\x12\x03O\x02\x1d\n\x0c\n\x05\x04\
    \x10\x02\0\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x10\x02\0\x05\x12\x03O\x0b\
    \x10\n\x0c\n\x05\x04\x10\x02\0\x01\x12\x03O\x11\x18\n\x0c\n\x05\x04\x10\
    \x02\0\x03\x12\x03O\x1b\x1c\n\t\n\x02\x04\x11\x12\x03R\0&\n\n\n\x03\x04\
    \x11\x01\x12\x03R\x08#\n\n\n\x02\x04\x12\x12\x04T\0V\x01\n\n\n\x03\x04\
    \x12\x01\x12\x03T\x08\"\n\x0b\n\x04\x04\x12\x02\0\x12\x03U\x02%\n\x0c\n\
    \x05\x04\x12\x02\0\x04\x12\x03U\x02\n\n\x0c\n\x05\x04\x12\x02\0\x06\x12\
    \x03U\x0b\x15\n\x0c\n\x05\x04\x12\x02\0\x01\x12\x03U\x16\x20\n\x0c\n\x05\
    \x04\x12\x02\0\x03\x12\x03U#$\n\n\n\x02\x04\x13\x12\x04X\0Z\x01\n\n\n\
    \x03\x04\x13\x01\x12\x03X\x08$\n\x0b\n\x04\x04\x13\x02\0\x12\x03Y\x02)\n\
    \x0c\n\x05\x04\x13\x02\0\x04\x12\x03Y\x02\n\n\x0c\n\x05\x04\x13\x02\0\
    \x06\x12\x03Y\x0b\x17\n\x0c\n\x05\x04\x13\x02\0\x01\x12\x03Y\x18$\n\x0c\
    \n\x05\x04\x13\x02\0\x03\x12\x03Y'(\n\t\n\x02\x04\x14\x12\x03[\0\x1c\n\n\
    \n\x03\x04\x14\x01\x12\x03[\x08\x19\n\n\n\x02\x04\x15\x12\x04]\0_\x01\n\
    \n\n\x03\x04\x15\x01\x12\x03]\x08\x1a\n\x0b\n\x04\x04\x15\x02\0\x12\x03^\
    \x02\x1b\n\x0c\n\x05\x04\x15\x02\0\x04\x12\x03^\x02\n\n\x0c\n\x05\x04\
    \x15\x02\0\x05\x12\x03^\x0b\x10\n\x0c\n\x05\x04\x15\x02\0\x01\x12\x03^\
    \x11\x16\n\x0c\n\x05\x04\x15\x02\0\x03\x12\x03^\x19\x1a\n\n\n\x02\x04\
    \x16\x12\x04a\0e\x01\n\n\n\x03\x04\x16\x01\x12\x03a\x08\x1d\n\x0b\n\x04\
    \x04\x16\x02\0\x12\x03b\x02\x1b\n\x0c\n\x05\x04\x16\x02\0\x04\x12\x03b\
    \x02\n\n\x0c\n\x05\x04\x16\x02\0\x05\x12\x03b\x0b\x11\n\x0c\n\x05\x04\
    \x16\x02\0\x01\x12\x03b\x12\x16\n\x0c\n\x05\x04\x16\x02\0\x03\x12\x03b\
    \x19\x1a\n\x0b\n\x04\x04\x16\x02\x01\x12\x03c\x02\x1d\n\x0c\n\x05\x04\
    \x16\x02\x01\x04\x12\x03c\x02\n\n\x0c\n\x05\x04\x16\x02\x01\x06\x12\x03c\
    \x0b\x11\n\x0c\n\x05\x04\x16\x02\x01\x01\x12\x03c\x12\x18\n\x0c\n\x05\
    \x04\x16\x02\x01\x03\x12\x03c\x1b\x1c\n\x0b\n\x04\x04\x16\x02\x02\x12\
    \x03d\x02!\n\x0c\n\x05\x04\x16\x02\x02\x04\x12\x03d\x02\n\n\x0c\n\x05\
    \x04\x16\x02\x02\x06\x12\x03d\x0b\x13\n\x0c\n\x05\x04\x16\x02\x02\x01\
    \x12\x03d\x14\x1c\n\x0c\n\x05\x04\x16\x02\x02\x03\x12\x03d\x1f\x20\n\n\n\
    \x02\x05\0\x12\x04g\0j\x01\n\n\n\x03\x05\0\x01\x12\x03g\x05\x0b\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03h\x02\r\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03h\x02\
    \x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03h\x0b\x0c\n\x0b\n\x04\x05\0\x02\
    \x01\x12\x03i\x02\r\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03i\x02\x08\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03i\x0b\x0c\n\n\n\x02\x05\x01\x12\x04l\0o\
    \x01\n\n\n\x03\x05\x01\x01\x12\x03l\x05\r\n\x0b\n\x04\x05\x01\x02\0\x12\
    \x03m\x02\x0c\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03m\x02\x07\n\x0c\n\x05\
    \x05\x01\x02\0\x02\x12\x03m\n\x0b\n\x0b\n\x04\x05\x01\x02\x01\x12\x03n\
    \x02\r\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03n\x02\x08\n\x0c\n\x05\x05\
    \x01\x02\x01\x02\x12\x03n\x0b\x0c\n\n\n\x02\x06\0\x12\x04q\0w\x01\n\n\n\
    \x03\x06\0\x01\x12\x03q\x08\x1c\n\x0b\n\x04\x06\0\x02\0\x12\x03r\x02:\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03r\x06\x12\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03r\x13&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03r18\n\x0b\n\x04\x06\0\
    \x02\x01\x12\x03s\x02D\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03s\x06\x17\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03s\x180\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03s;B\n\x0c\n\x04\x06\0\x02\x02\x12\x04t\x02u+\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03t\x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03t\x19\
    2\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03u\x0f)\n\x0b\n\x04\x06\0\x02\x03\
    \x12\x03v\x02A\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03v\x06\x10\n\x0c\n\
    \x05\x06\0\x02\x03\x02\x12\x03v\x11\"\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03v-?\n\n\n\x02\x06\x01\x12\x04y\0}\x01\n\n\n\x03\x06\x01\x01\x12\x03y\
    \x08\x18\n\x0b\n\x04\x06\x01\x02\0\x12\x03z\x02:\n\x0c\n\x05\x06\x01\x02\
    \0\x01\x12\x03z\x06\x12\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03z\x13&\n\
    \x0c\n\x05\x06\x01\x02\0\x03\x12\x03z18\n\x0b\n\x04\x06\x01\x02\x01\x12\
    \x03{\x02M\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03{\x06\x14\n\x0c\n\x05\
    \x06\x01\x02\x01\x02\x12\x03{\x15*\n\x0c\n\x05\x06\x01\x02\x01\x03\x12\
    \x03{5K\n\x0b\n\x04\x06\x01\x02\x02\x12\x03|\x02A\n\x0c\n\x05\x06\x01\
    \x02\x02\x01\x12\x03|\x06\x10\n\x0c\n\x05\x06\x01\x02\x02\x02\x12\x03|\
    \x11\"\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\x03|-?\n\x0b\n\x02\x06\x02\
    \x12\x05\x7f\0\x82\x01\x01\n\n\n\x03\x06\x02\x01\x12\x03\x7f\x08\x1d\n\
    \x0c\n\x04\x06\x02\x02\0\x12\x04\x80\x01\x02>\n\r\n\x05\x06\x02\x02\0\
    \x01\x12\x04\x80\x01\x06\x14\n\r\n\x05\x06\x02\x02\0\x02\x12\x04\x80\x01\
    \x15*\n\r\n\x05\x06\x02\x02\0\x03\x12\x04\x80\x015<\n\x0c\n\x04\x06\x02\
    \x02\x01\x12\x04\x81\x01\x028\n\r\n\x05\x06\x02\x02\x01\x01\x12\x04\x81\
    \x01\x06\x11\n\r\n\x05\x06\x02\x02\x01\x02\x12\x04\x81\x01\x12$\n\r\n\
    \x05\x06\x02\x02\x01\x03\x12\x04\x81\x01/6\n\x0c\n\x02\x06\x03\x12\x06\
    \x84\x01\0\x88\x01\x01\n\x0b\n\x03\x06\x03\x01\x12\x04\x84\x01\x08\x18\n\
    \x0c\n\x04\x06\x03\x02\0\x12\x04\x85\x01\x02:\n\r\n\x05\x06\x03\x02\0\
    \x01\x12\x04\x85\x01\x06\x12\n\r\n\x05\x06\x03\x02\0\x02\x12\x04\x85\x01\
    \x13&\n\r\n\x05\x06\x03\x02\0\x03\x12\x04\x85\x0118\n\x0c\n\x04\x06\x03\
    \x02\x01\x12\x04\x86\x01\x028\n\r\n\x05\x06\x03\x02\x01\x01\x12\x04\x86\
    \x01\x06\x11\n\r\n\x05\x06\x03\x02\x01\x02\x12\x04\x86\x01\x12$\n\r\n\
    \x05\x06\x03\x02\x01\x03\x12\x04\x86\x01/6\n\x0c\n\x04\x06\x03\x02\x02\
    \x12\x04\x87\x01\x028\n\r\n\x05\x06\x03\x02\x02\x01\x12\x04\x87\x01\x06\
    \x11\n\r\n\x05\x06\x03\x02\x02\x02\x12\x04\x87\x01\x12$\n\r\n\x05\x06\
    \x03\x02\x02\x03\x12\x04\x87\x01/6\n\x0c\n\x02\x06\x04\x12\x06\x8a\x01\0\
    \x8d\x01\x01\n\x0b\n\x03\x06\x04\x01\x12\x04\x8a\x01\x08\x15\n\x0c\n\x04\
    \x06\x04\x02\0\x12\x04\x8b\x01\x026\n\r\n\x05\x06\x04\x02\0\x01\x12\x04\
    \x8b\x01\x06\x10\n\r\n\x05\x06\x04\x02\0\x02\x12\x04\x8b\x01\x11\"\n\r\n\
    \x05\x06\x04\x02\0\x03\x12\x04\x8b\x01-4\n\x0c\n\x04\x06\x04\x02\x01\x12\
    \x04\x8c\x01\x028\n\r\n\x05\x06\x04\x02\x01\x01\x12\x04\x8c\x01\x06\x11\
    \n\r\n\x05\x06\x04\x02\x01\x02\x12\x04\x8c\x01\x12$\n\r\n\x05\x06\x04\
    \x02\x01\x03\x12\x04\x8c\x01/6\n\x0c\n\x02\x06\x05\x12\x06\x8f\x01\0\x98\
    \x01\x01\n\x0b\n\x03\x06\x05\x01\x12\x04\x8f\x01\x08\"\n\x0c\n\x04\x06\
    \x05\x02\0\x12\x04\x90\x01\x02B\n\r\n\x05\x06\x05\x02\0\x01\x12\x04\x90\
    \x01\x06\x16\n\r\n\x05\x06\x05\x02\0\x02\x12\x04\x90\x01\x17.\n\r\n\x05\
    \x06\x05\x02\0\x03\x12\x04\x90\x019@\n\x0c\n\x04\x06\x05\x02\x01\x12\x04\
    \x91\x01\x02B\n\r\n\x05\x06\x05\x02\x01\x01\x12\x04\x91\x01\x06\x16\n\r\
    \n\x05\x06\x05\x02\x01\x02\x12\x04\x91\x01\x17.\n\r\n\x05\x06\x05\x02\
    \x01\x03\x12\x04\x91\x019@\n\x0e\n\x04\x06\x05\x02\x02\x12\x06\x92\x01\
    \x02\x93\x01+\n\r\n\x05\x06\x05\x02\x02\x01\x12\x04\x92\x01\x06\x18\n\r\
    \n\x05\x06\x05\x02\x02\x02\x12\x04\x92\x01\x192\n\r\n\x05\x06\x05\x02\
    \x02\x03\x12\x04\x93\x01\x0f)\n\x0e\n\x04\x06\x05\x02\x03\x12\x06\x94\
    \x01\x02\x95\x01-\n\r\n\x05\x06\x05\x02\x03\x01\x12\x04\x94\x01\x06\x1a\
    \n\r\n\x05\x06\x05\x02\x03\x02\x12\x04\x94\x01\x1b6\n\r\n\x05\x06\x05\
    \x02\x03\x03\x12\x04\x95\x01\x0f+\n\x0c\n\x04\x06\x05\x02\x04\x12\x04\
    \x96\x01\x02A\n\r\n\x05\x06\x05\x02\x04\x01\x12\x04\x96\x01\x06\x10\n\r\
    \n\x05\x06\x05\x02\x04\x02\x12\x04\x96\x01\x11\"\n\r\n\x05\x06\x05\x02\
    \x04\x03\x12\x04\x96\x01-?\n\x0c\n\x04\x06\x05\x02\x05\x12\x04\x97\x01\
    \x028\n\r\n\x05\x06\x05\x02\x05\x01\x12\x04\x97\x01\x06\x11\n\r\n\x05\
    \x06\x05\x02\x05\x02\x12\x04\x97\x01\x12$\n\r\n\x05\x06\x05\x02\x05\x03\
    \x12\x04\x97\x01/6b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::data_model::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(23);
            messages.push(UploadReviewRequest::generated_message_descriptor_data());
            messages.push(BatchUploadReviewRequest::generated_message_descriptor_data());
            messages.push(GetReviewsByAuthorRequest::generated_message_descriptor_data());
            messages.push(GetAuthorsRequest::generated_message_descriptor_data());
            messages.push(GetReviewsByAuthorResponse::generated_message_descriptor_data());
            messages.push(GetAuthorsResponse::generated_message_descriptor_data());
            messages.push(UploadObjectRequest::generated_message_descriptor_data());
            messages.push(DownloadObjectRequest::generated_message_descriptor_data());
            messages.push(DownloadObjectResponse::generated_message_descriptor_data());
            messages.push(StatObjectRequest::generated_message_descriptor_data());
            messages.push(StatObjectResponse::generated_message_descriptor_data());
            messages.push(UploadFileRequest::generated_message_descriptor_data());
            messages.push(IngestReviewRequest::generated_message_descriptor_data());
            messages.push(IngestBatchRequest::generated_message_descriptor_data());
            messages.push(UploadProjectionRequest::generated_message_descriptor_data());
            messages.push(AppendProjectionRequest::generated_message_descriptor_data());
            messages.push(DownloadProjectionRequest::generated_message_descriptor_data());
            messages.push(DownloadMovieIndicesRequest::generated_message_descriptor_data());
            messages.push(DownloadProjectionResponse::generated_message_descriptor_data());
            messages.push(DownloadMovieIndicesResponse::generated_message_descriptor_data());
            messages.push(ShardCountRequest::generated_message_descriptor_data());
            messages.push(ShardCountResponse::generated_message_descriptor_data());
            messages.push(ManageResourceRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(Action::generated_enum_descriptor_data());
            enums.push(Resource::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
