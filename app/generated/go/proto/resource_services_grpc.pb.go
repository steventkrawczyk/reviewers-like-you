// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: resource_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MainDatastoreServiceClient is the client API for MainDatastoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainDatastoreServiceClient interface {
	UploadReview(ctx context.Context, in *UploadReviewRequest, opts ...grpc.CallOption) (*Payload, error)
	BatchUploadReview(ctx context.Context, in *BatchUploadReviewRequest, opts ...grpc.CallOption) (*Payload, error)
	GetReviewsByAuthor(ctx context.Context, in *GetReviewsByAuthorRequest, opts ...grpc.CallOption) (*GetReviewsByAuthorResponse, error)
	GetAuthors(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*GetAuthorsResponse, error)
}

type mainDatastoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainDatastoreServiceClient(cc grpc.ClientConnInterface) MainDatastoreServiceClient {
	return &mainDatastoreServiceClient{cc}
}

func (c *mainDatastoreServiceClient) UploadReview(ctx context.Context, in *UploadReviewRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.MainDatastoreService/UploadReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainDatastoreServiceClient) BatchUploadReview(ctx context.Context, in *BatchUploadReviewRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.MainDatastoreService/BatchUploadReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainDatastoreServiceClient) GetReviewsByAuthor(ctx context.Context, in *GetReviewsByAuthorRequest, opts ...grpc.CallOption) (*GetReviewsByAuthorResponse, error) {
	out := new(GetReviewsByAuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.MainDatastoreService/GetReviewsByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainDatastoreServiceClient) GetAuthors(ctx context.Context, in *GetAuthorsRequest, opts ...grpc.CallOption) (*GetAuthorsResponse, error) {
	out := new(GetAuthorsResponse)
	err := c.cc.Invoke(ctx, "/proto.MainDatastoreService/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainDatastoreServiceServer is the server API for MainDatastoreService service.
// All implementations must embed UnimplementedMainDatastoreServiceServer
// for forward compatibility
type MainDatastoreServiceServer interface {
	UploadReview(context.Context, *UploadReviewRequest) (*Payload, error)
	BatchUploadReview(context.Context, *BatchUploadReviewRequest) (*Payload, error)
	GetReviewsByAuthor(context.Context, *GetReviewsByAuthorRequest) (*GetReviewsByAuthorResponse, error)
	GetAuthors(context.Context, *GetAuthorsRequest) (*GetAuthorsResponse, error)
	mustEmbedUnimplementedMainDatastoreServiceServer()
}

// UnimplementedMainDatastoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMainDatastoreServiceServer struct {
}

func (UnimplementedMainDatastoreServiceServer) UploadReview(context.Context, *UploadReviewRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReview not implemented")
}
func (UnimplementedMainDatastoreServiceServer) BatchUploadReview(context.Context, *BatchUploadReviewRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUploadReview not implemented")
}
func (UnimplementedMainDatastoreServiceServer) GetReviewsByAuthor(context.Context, *GetReviewsByAuthorRequest) (*GetReviewsByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByAuthor not implemented")
}
func (UnimplementedMainDatastoreServiceServer) GetAuthors(context.Context, *GetAuthorsRequest) (*GetAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedMainDatastoreServiceServer) mustEmbedUnimplementedMainDatastoreServiceServer() {}

// UnsafeMainDatastoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainDatastoreServiceServer will
// result in compilation errors.
type UnsafeMainDatastoreServiceServer interface {
	mustEmbedUnimplementedMainDatastoreServiceServer()
}

func RegisterMainDatastoreServiceServer(s grpc.ServiceRegistrar, srv MainDatastoreServiceServer) {
	s.RegisterService(&MainDatastoreService_ServiceDesc, srv)
}

func _MainDatastoreService_UploadReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainDatastoreServiceServer).UploadReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MainDatastoreService/UploadReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainDatastoreServiceServer).UploadReview(ctx, req.(*UploadReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainDatastoreService_BatchUploadReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUploadReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainDatastoreServiceServer).BatchUploadReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MainDatastoreService/BatchUploadReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainDatastoreServiceServer).BatchUploadReview(ctx, req.(*BatchUploadReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainDatastoreService_GetReviewsByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainDatastoreServiceServer).GetReviewsByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MainDatastoreService/GetReviewsByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainDatastoreServiceServer).GetReviewsByAuthor(ctx, req.(*GetReviewsByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainDatastoreService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainDatastoreServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MainDatastoreService/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainDatastoreServiceServer).GetAuthors(ctx, req.(*GetAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainDatastoreService_ServiceDesc is the grpc.ServiceDesc for MainDatastoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainDatastoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MainDatastoreService",
	HandlerType: (*MainDatastoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadReview",
			Handler:    _MainDatastoreService_UploadReview_Handler,
		},
		{
			MethodName: "BatchUploadReview",
			Handler:    _MainDatastoreService_BatchUploadReview_Handler,
		},
		{
			MethodName: "GetReviewsByAuthor",
			Handler:    _MainDatastoreService_GetReviewsByAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _MainDatastoreService_GetAuthors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}

// FilestoreServiceClient is the client API for FilestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilestoreServiceClient interface {
	UploadObject(ctx context.Context, in *UploadObjectRequest, opts ...grpc.CallOption) (*Payload, error)
	DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (*DownloadObjectResponse, error)
	StatObject(ctx context.Context, in *StatObjectRequest, opts ...grpc.CallOption) (*StatObjectResponse, error)
}

type filestoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilestoreServiceClient(cc grpc.ClientConnInterface) FilestoreServiceClient {
	return &filestoreServiceClient{cc}
}

func (c *filestoreServiceClient) UploadObject(ctx context.Context, in *UploadObjectRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.FilestoreService/UploadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreServiceClient) DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (*DownloadObjectResponse, error) {
	out := new(DownloadObjectResponse)
	err := c.cc.Invoke(ctx, "/proto.FilestoreService/DownloadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreServiceClient) StatObject(ctx context.Context, in *StatObjectRequest, opts ...grpc.CallOption) (*StatObjectResponse, error) {
	out := new(StatObjectResponse)
	err := c.cc.Invoke(ctx, "/proto.FilestoreService/StatObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilestoreServiceServer is the server API for FilestoreService service.
// All implementations must embed UnimplementedFilestoreServiceServer
// for forward compatibility
type FilestoreServiceServer interface {
	UploadObject(context.Context, *UploadObjectRequest) (*Payload, error)
	DownloadObject(context.Context, *DownloadObjectRequest) (*DownloadObjectResponse, error)
	StatObject(context.Context, *StatObjectRequest) (*StatObjectResponse, error)
	mustEmbedUnimplementedFilestoreServiceServer()
}

// UnimplementedFilestoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilestoreServiceServer struct {
}

func (UnimplementedFilestoreServiceServer) UploadObject(context.Context, *UploadObjectRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedFilestoreServiceServer) DownloadObject(context.Context, *DownloadObjectRequest) (*DownloadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedFilestoreServiceServer) StatObject(context.Context, *StatObjectRequest) (*StatObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatObject not implemented")
}
func (UnimplementedFilestoreServiceServer) mustEmbedUnimplementedFilestoreServiceServer() {}

// UnsafeFilestoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilestoreServiceServer will
// result in compilation errors.
type UnsafeFilestoreServiceServer interface {
	mustEmbedUnimplementedFilestoreServiceServer()
}

func RegisterFilestoreServiceServer(s grpc.ServiceRegistrar, srv FilestoreServiceServer) {
	s.RegisterService(&FilestoreService_ServiceDesc, srv)
}

func _FilestoreService_UploadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).UploadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilestoreService/UploadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).UploadObject(ctx, req.(*UploadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilestoreService_DownloadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).DownloadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilestoreService/DownloadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).DownloadObject(ctx, req.(*DownloadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilestoreService_StatObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).StatObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilestoreService/StatObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).StatObject(ctx, req.(*StatObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilestoreService_ServiceDesc is the grpc.ServiceDesc for FilestoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilestoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilestoreService",
	HandlerType: (*FilestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadObject",
			Handler:    _FilestoreService_UploadObject_Handler,
		},
		{
			MethodName: "DownloadObject",
			Handler:    _FilestoreService_DownloadObject_Handler,
		},
		{
			MethodName: "StatObject",
			Handler:    _FilestoreService_StatObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}

// DatastoreAdminServiceClient is the client API for DatastoreAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastoreAdminServiceClient interface {
	ManageResource(ctx context.Context, in *ManageResourceRequest, opts ...grpc.CallOption) (*Payload, error)
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error)
}

type datastoreAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastoreAdminServiceClient(cc grpc.ClientConnInterface) DatastoreAdminServiceClient {
	return &datastoreAdminServiceClient{cc}
}

func (c *datastoreAdminServiceClient) ManageResource(ctx context.Context, in *ManageResourceRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.DatastoreAdminService/ManageResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreAdminServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.DatastoreAdminService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastoreAdminServiceServer is the server API for DatastoreAdminService service.
// All implementations must embed UnimplementedDatastoreAdminServiceServer
// for forward compatibility
type DatastoreAdminServiceServer interface {
	ManageResource(context.Context, *ManageResourceRequest) (*Payload, error)
	CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error)
	mustEmbedUnimplementedDatastoreAdminServiceServer()
}

// UnimplementedDatastoreAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatastoreAdminServiceServer struct {
}

func (UnimplementedDatastoreAdminServiceServer) ManageResource(context.Context, *ManageResourceRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageResource not implemented")
}
func (UnimplementedDatastoreAdminServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedDatastoreAdminServiceServer) mustEmbedUnimplementedDatastoreAdminServiceServer() {}

// UnsafeDatastoreAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastoreAdminServiceServer will
// result in compilation errors.
type UnsafeDatastoreAdminServiceServer interface {
	mustEmbedUnimplementedDatastoreAdminServiceServer()
}

func RegisterDatastoreAdminServiceServer(s grpc.ServiceRegistrar, srv DatastoreAdminServiceServer) {
	s.RegisterService(&DatastoreAdminService_ServiceDesc, srv)
}

func _DatastoreAdminService_ManageResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreAdminServiceServer).ManageResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DatastoreAdminService/ManageResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreAdminServiceServer).ManageResource(ctx, req.(*ManageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatastoreAdminService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreAdminServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DatastoreAdminService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreAdminServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatastoreAdminService_ServiceDesc is the grpc.ServiceDesc for DatastoreAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatastoreAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DatastoreAdminService",
	HandlerType: (*DatastoreAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManageResource",
			Handler:    _DatastoreAdminService_ManageResource_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _DatastoreAdminService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestionServiceClient interface {
	IngestReview(ctx context.Context, in *IngestReviewRequest, opts ...grpc.CallOption) (*Payload, error)
	IngestBatch(ctx context.Context, in *IngestBatchRequest, opts ...grpc.CallOption) (*Payload, error)
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) IngestReview(ctx context.Context, in *IngestReviewRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.IngestionService/IngestReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) IngestBatch(ctx context.Context, in *IngestBatchRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.IngestionService/IngestBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.IngestionService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility
type IngestionServiceServer interface {
	IngestReview(context.Context, *IngestReviewRequest) (*Payload, error)
	IngestBatch(context.Context, *IngestBatchRequest) (*Payload, error)
	CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestionServiceServer struct {
}

func (UnimplementedIngestionServiceServer) IngestReview(context.Context, *IngestReviewRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestReview not implemented")
}
func (UnimplementedIngestionServiceServer) IngestBatch(context.Context, *IngestBatchRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestBatch not implemented")
}
func (UnimplementedIngestionServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_IngestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).IngestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IngestionService/IngestReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).IngestReview(ctx, req.(*IngestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_IngestBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).IngestBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IngestionService/IngestBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).IngestBatch(ctx, req.(*IngestBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.IngestionService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestReview",
			Handler:    _IngestionService_IngestReview_Handler,
		},
		{
			MethodName: "IngestBatch",
			Handler:    _IngestionService_IngestBatch_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _IngestionService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*Payload, error)
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.UploadService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.UploadService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility
type UploadServiceServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*Payload, error)
	CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadServiceServer struct {
}

func (UnimplementedUploadServiceServer) UploadFile(context.Context, *UploadFileRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedUploadServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UploadService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UploadService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploadService_UploadFile_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _UploadService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}

// ProjectionDatastoreServiceClient is the client API for ProjectionDatastoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectionDatastoreServiceClient interface {
	UploadProjection(ctx context.Context, in *UploadProjectionRequest, opts ...grpc.CallOption) (*Payload, error)
	AppendProjection(ctx context.Context, in *AppendProjectionRequest, opts ...grpc.CallOption) (*Payload, error)
	DownloadProjection(ctx context.Context, in *DownloadProjectionRequest, opts ...grpc.CallOption) (*DownloadProjectionResponse, error)
	DownloadMovieIndices(ctx context.Context, in *DownloadMovieIndicesRequest, opts ...grpc.CallOption) (*DownloadMovieIndicesResponse, error)
	ShardCount(ctx context.Context, in *ShardCountRequest, opts ...grpc.CallOption) (*ShardCountResponse, error)
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error)
}

type projectionDatastoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectionDatastoreServiceClient(cc grpc.ClientConnInterface) ProjectionDatastoreServiceClient {
	return &projectionDatastoreServiceClient{cc}
}

func (c *projectionDatastoreServiceClient) UploadProjection(ctx context.Context, in *UploadProjectionRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/UploadProjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionDatastoreServiceClient) AppendProjection(ctx context.Context, in *AppendProjectionRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/AppendProjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionDatastoreServiceClient) DownloadProjection(ctx context.Context, in *DownloadProjectionRequest, opts ...grpc.CallOption) (*DownloadProjectionResponse, error) {
	out := new(DownloadProjectionResponse)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/DownloadProjection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionDatastoreServiceClient) DownloadMovieIndices(ctx context.Context, in *DownloadMovieIndicesRequest, opts ...grpc.CallOption) (*DownloadMovieIndicesResponse, error) {
	out := new(DownloadMovieIndicesResponse)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/DownloadMovieIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionDatastoreServiceClient) ShardCount(ctx context.Context, in *ShardCountRequest, opts ...grpc.CallOption) (*ShardCountResponse, error) {
	out := new(ShardCountResponse)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/ShardCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionDatastoreServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.ProjectionDatastoreService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectionDatastoreServiceServer is the server API for ProjectionDatastoreService service.
// All implementations must embed UnimplementedProjectionDatastoreServiceServer
// for forward compatibility
type ProjectionDatastoreServiceServer interface {
	UploadProjection(context.Context, *UploadProjectionRequest) (*Payload, error)
	AppendProjection(context.Context, *AppendProjectionRequest) (*Payload, error)
	DownloadProjection(context.Context, *DownloadProjectionRequest) (*DownloadProjectionResponse, error)
	DownloadMovieIndices(context.Context, *DownloadMovieIndicesRequest) (*DownloadMovieIndicesResponse, error)
	ShardCount(context.Context, *ShardCountRequest) (*ShardCountResponse, error)
	CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error)
	mustEmbedUnimplementedProjectionDatastoreServiceServer()
}

// UnimplementedProjectionDatastoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectionDatastoreServiceServer struct {
}

func (UnimplementedProjectionDatastoreServiceServer) UploadProjection(context.Context, *UploadProjectionRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProjection not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) AppendProjection(context.Context, *AppendProjectionRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendProjection not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) DownloadProjection(context.Context, *DownloadProjectionRequest) (*DownloadProjectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadProjection not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) DownloadMovieIndices(context.Context, *DownloadMovieIndicesRequest) (*DownloadMovieIndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMovieIndices not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) ShardCount(context.Context, *ShardCountRequest) (*ShardCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardCount not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedProjectionDatastoreServiceServer) mustEmbedUnimplementedProjectionDatastoreServiceServer() {
}

// UnsafeProjectionDatastoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectionDatastoreServiceServer will
// result in compilation errors.
type UnsafeProjectionDatastoreServiceServer interface {
	mustEmbedUnimplementedProjectionDatastoreServiceServer()
}

func RegisterProjectionDatastoreServiceServer(s grpc.ServiceRegistrar, srv ProjectionDatastoreServiceServer) {
	s.RegisterService(&ProjectionDatastoreService_ServiceDesc, srv)
}

func _ProjectionDatastoreService_UploadProjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).UploadProjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/UploadProjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).UploadProjection(ctx, req.(*UploadProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionDatastoreService_AppendProjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).AppendProjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/AppendProjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).AppendProjection(ctx, req.(*AppendProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionDatastoreService_DownloadProjection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadProjectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).DownloadProjection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/DownloadProjection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).DownloadProjection(ctx, req.(*DownloadProjectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionDatastoreService_DownloadMovieIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMovieIndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).DownloadMovieIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/DownloadMovieIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).DownloadMovieIndices(ctx, req.(*DownloadMovieIndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionDatastoreService_ShardCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).ShardCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/ShardCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).ShardCount(ctx, req.(*ShardCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionDatastoreService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionDatastoreServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjectionDatastoreService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionDatastoreServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectionDatastoreService_ServiceDesc is the grpc.ServiceDesc for ProjectionDatastoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectionDatastoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProjectionDatastoreService",
	HandlerType: (*ProjectionDatastoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadProjection",
			Handler:    _ProjectionDatastoreService_UploadProjection_Handler,
		},
		{
			MethodName: "AppendProjection",
			Handler:    _ProjectionDatastoreService_AppendProjection_Handler,
		},
		{
			MethodName: "DownloadProjection",
			Handler:    _ProjectionDatastoreService_DownloadProjection_Handler,
		},
		{
			MethodName: "DownloadMovieIndices",
			Handler:    _ProjectionDatastoreService_DownloadMovieIndices_Handler,
		},
		{
			MethodName: "ShardCount",
			Handler:    _ProjectionDatastoreService_ShardCount_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _ProjectionDatastoreService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_services.proto",
}
