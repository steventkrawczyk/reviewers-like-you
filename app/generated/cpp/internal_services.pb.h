// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_services.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_5fservices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internal_5fservices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "data_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internal_5fservices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_5fservices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_5fservices_2eproto;
namespace proto {
class AppendProjectionRequest;
struct AppendProjectionRequestDefaultTypeInternal;
extern AppendProjectionRequestDefaultTypeInternal _AppendProjectionRequest_default_instance_;
class CreateProjectionRequest;
struct CreateProjectionRequestDefaultTypeInternal;
extern CreateProjectionRequestDefaultTypeInternal _CreateProjectionRequest_default_instance_;
class DownloadMovieIndicesRequest;
struct DownloadMovieIndicesRequestDefaultTypeInternal;
extern DownloadMovieIndicesRequestDefaultTypeInternal _DownloadMovieIndicesRequest_default_instance_;
class DownloadMovieIndicesResponse;
struct DownloadMovieIndicesResponseDefaultTypeInternal;
extern DownloadMovieIndicesResponseDefaultTypeInternal _DownloadMovieIndicesResponse_default_instance_;
class DownloadProjectionRequest;
struct DownloadProjectionRequestDefaultTypeInternal;
extern DownloadProjectionRequestDefaultTypeInternal _DownloadProjectionRequest_default_instance_;
class DownloadProjectionResponse;
struct DownloadProjectionResponseDefaultTypeInternal;
extern DownloadProjectionResponseDefaultTypeInternal _DownloadProjectionResponse_default_instance_;
class IngestBatchRequest;
struct IngestBatchRequestDefaultTypeInternal;
extern IngestBatchRequestDefaultTypeInternal _IngestBatchRequest_default_instance_;
class IngestReviewRequest;
struct IngestReviewRequestDefaultTypeInternal;
extern IngestReviewRequestDefaultTypeInternal _IngestReviewRequest_default_instance_;
class ScrapeRequest;
struct ScrapeRequestDefaultTypeInternal;
extern ScrapeRequestDefaultTypeInternal _ScrapeRequest_default_instance_;
class UploadFileRequest;
struct UploadFileRequestDefaultTypeInternal;
extern UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
class UploadProjectionRequest;
struct UploadProjectionRequestDefaultTypeInternal;
extern UploadProjectionRequestDefaultTypeInternal _UploadProjectionRequest_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AppendProjectionRequest* Arena::CreateMaybeMessage<::proto::AppendProjectionRequest>(Arena*);
template<> ::proto::CreateProjectionRequest* Arena::CreateMaybeMessage<::proto::CreateProjectionRequest>(Arena*);
template<> ::proto::DownloadMovieIndicesRequest* Arena::CreateMaybeMessage<::proto::DownloadMovieIndicesRequest>(Arena*);
template<> ::proto::DownloadMovieIndicesResponse* Arena::CreateMaybeMessage<::proto::DownloadMovieIndicesResponse>(Arena*);
template<> ::proto::DownloadProjectionRequest* Arena::CreateMaybeMessage<::proto::DownloadProjectionRequest>(Arena*);
template<> ::proto::DownloadProjectionResponse* Arena::CreateMaybeMessage<::proto::DownloadProjectionResponse>(Arena*);
template<> ::proto::IngestBatchRequest* Arena::CreateMaybeMessage<::proto::IngestBatchRequest>(Arena*);
template<> ::proto::IngestReviewRequest* Arena::CreateMaybeMessage<::proto::IngestReviewRequest>(Arena*);
template<> ::proto::ScrapeRequest* Arena::CreateMaybeMessage<::proto::ScrapeRequest>(Arena*);
template<> ::proto::UploadFileRequest* Arena::CreateMaybeMessage<::proto::UploadFileRequest>(Arena*);
template<> ::proto::UploadProjectionRequest* Arena::CreateMaybeMessage<::proto::UploadProjectionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class UploadFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UploadFileRequest) */ {
 public:
  inline UploadFileRequest() : UploadFileRequest(nullptr) {}
  ~UploadFileRequest() override;
  explicit constexpr UploadFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadFileRequest(const UploadFileRequest& from);
  UploadFileRequest(UploadFileRequest&& from) noexcept
    : UploadFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileRequest& operator=(UploadFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadFileRequest*>(
               &_UploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadFileRequest& a, UploadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UploadFileRequest";
  }
  protected:
  explicit UploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:proto.UploadFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class IngestReviewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.IngestReviewRequest) */ {
 public:
  inline IngestReviewRequest() : IngestReviewRequest(nullptr) {}
  ~IngestReviewRequest() override;
  explicit constexpr IngestReviewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IngestReviewRequest(const IngestReviewRequest& from);
  IngestReviewRequest(IngestReviewRequest&& from) noexcept
    : IngestReviewRequest() {
    *this = ::std::move(from);
  }

  inline IngestReviewRequest& operator=(const IngestReviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IngestReviewRequest& operator=(IngestReviewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IngestReviewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IngestReviewRequest* internal_default_instance() {
    return reinterpret_cast<const IngestReviewRequest*>(
               &_IngestReviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IngestReviewRequest& a, IngestReviewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IngestReviewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IngestReviewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IngestReviewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IngestReviewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IngestReviewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IngestReviewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngestReviewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.IngestReviewRequest";
  }
  protected:
  explicit IngestReviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReviewFieldNumber = 1,
  };
  // optional .proto.Review review = 1;
  bool has_review() const;
  private:
  bool _internal_has_review() const;
  public:
  void clear_review();
  const ::proto::Review& review() const;
  PROTOBUF_NODISCARD ::proto::Review* release_review();
  ::proto::Review* mutable_review();
  void set_allocated_review(::proto::Review* review);
  private:
  const ::proto::Review& _internal_review() const;
  ::proto::Review* _internal_mutable_review();
  public:
  void unsafe_arena_set_allocated_review(
      ::proto::Review* review);
  ::proto::Review* unsafe_arena_release_review();

  // @@protoc_insertion_point(class_scope:proto.IngestReviewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Review* review_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class IngestBatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.IngestBatchRequest) */ {
 public:
  inline IngestBatchRequest() : IngestBatchRequest(nullptr) {}
  ~IngestBatchRequest() override;
  explicit constexpr IngestBatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IngestBatchRequest(const IngestBatchRequest& from);
  IngestBatchRequest(IngestBatchRequest&& from) noexcept
    : IngestBatchRequest() {
    *this = ::std::move(from);
  }

  inline IngestBatchRequest& operator=(const IngestBatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IngestBatchRequest& operator=(IngestBatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IngestBatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IngestBatchRequest* internal_default_instance() {
    return reinterpret_cast<const IngestBatchRequest*>(
               &_IngestBatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IngestBatchRequest& a, IngestBatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IngestBatchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IngestBatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IngestBatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IngestBatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IngestBatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IngestBatchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngestBatchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.IngestBatchRequest";
  }
  protected:
  explicit IngestBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // optional string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:proto.IngestBatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto.CreateProjectionRequest) */ {
 public:
  inline CreateProjectionRequest() : CreateProjectionRequest(nullptr) {}
  explicit constexpr CreateProjectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectionRequest(const CreateProjectionRequest& from);
  CreateProjectionRequest(CreateProjectionRequest&& from) noexcept
    : CreateProjectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectionRequest& operator=(const CreateProjectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectionRequest& operator=(CreateProjectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectionRequest*>(
               &_CreateProjectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateProjectionRequest& a, CreateProjectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProjectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProjectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateProjectionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateProjectionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateProjectionRequest";
  }
  protected:
  explicit CreateProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.CreateProjectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class UploadProjectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UploadProjectionRequest) */ {
 public:
  inline UploadProjectionRequest() : UploadProjectionRequest(nullptr) {}
  ~UploadProjectionRequest() override;
  explicit constexpr UploadProjectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadProjectionRequest(const UploadProjectionRequest& from);
  UploadProjectionRequest(UploadProjectionRequest&& from) noexcept
    : UploadProjectionRequest() {
    *this = ::std::move(from);
  }

  inline UploadProjectionRequest& operator=(const UploadProjectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadProjectionRequest& operator=(UploadProjectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadProjectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadProjectionRequest* internal_default_instance() {
    return reinterpret_cast<const UploadProjectionRequest*>(
               &_UploadProjectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UploadProjectionRequest& a, UploadProjectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadProjectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadProjectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadProjectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadProjectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadProjectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadProjectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadProjectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UploadProjectionRequest";
  }
  protected:
  explicit UploadProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFieldNumber = 1,
    kMovieIndicesFieldNumber = 2,
  };
  // optional .proto.Projection projection = 1;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::proto::Projection& projection() const;
  PROTOBUF_NODISCARD ::proto::Projection* release_projection();
  ::proto::Projection* mutable_projection();
  void set_allocated_projection(::proto::Projection* projection);
  private:
  const ::proto::Projection& _internal_projection() const;
  ::proto::Projection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::proto::Projection* projection);
  ::proto::Projection* unsafe_arena_release_projection();

  // optional .proto.MovieIndices movieIndices = 2;
  bool has_movieindices() const;
  private:
  bool _internal_has_movieindices() const;
  public:
  void clear_movieindices();
  const ::proto::MovieIndices& movieindices() const;
  PROTOBUF_NODISCARD ::proto::MovieIndices* release_movieindices();
  ::proto::MovieIndices* mutable_movieindices();
  void set_allocated_movieindices(::proto::MovieIndices* movieindices);
  private:
  const ::proto::MovieIndices& _internal_movieindices() const;
  ::proto::MovieIndices* _internal_mutable_movieindices();
  public:
  void unsafe_arena_set_allocated_movieindices(
      ::proto::MovieIndices* movieindices);
  ::proto::MovieIndices* unsafe_arena_release_movieindices();

  // @@protoc_insertion_point(class_scope:proto.UploadProjectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Projection* projection_;
  ::proto::MovieIndices* movieindices_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class AppendProjectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AppendProjectionRequest) */ {
 public:
  inline AppendProjectionRequest() : AppendProjectionRequest(nullptr) {}
  ~AppendProjectionRequest() override;
  explicit constexpr AppendProjectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendProjectionRequest(const AppendProjectionRequest& from);
  AppendProjectionRequest(AppendProjectionRequest&& from) noexcept
    : AppendProjectionRequest() {
    *this = ::std::move(from);
  }

  inline AppendProjectionRequest& operator=(const AppendProjectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendProjectionRequest& operator=(AppendProjectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendProjectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendProjectionRequest* internal_default_instance() {
    return reinterpret_cast<const AppendProjectionRequest*>(
               &_AppendProjectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppendProjectionRequest& a, AppendProjectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendProjectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendProjectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendProjectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendProjectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendProjectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppendProjectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendProjectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AppendProjectionRequest";
  }
  protected:
  explicit AppendProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFieldNumber = 1,
  };
  // optional .proto.Projection projection = 1;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::proto::Projection& projection() const;
  PROTOBUF_NODISCARD ::proto::Projection* release_projection();
  ::proto::Projection* mutable_projection();
  void set_allocated_projection(::proto::Projection* projection);
  private:
  const ::proto::Projection& _internal_projection() const;
  ::proto::Projection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::proto::Projection* projection);
  ::proto::Projection* unsafe_arena_release_projection();

  // @@protoc_insertion_point(class_scope:proto.AppendProjectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Projection* projection_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class DownloadProjectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DownloadProjectionRequest) */ {
 public:
  inline DownloadProjectionRequest() : DownloadProjectionRequest(nullptr) {}
  ~DownloadProjectionRequest() override;
  explicit constexpr DownloadProjectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadProjectionRequest(const DownloadProjectionRequest& from);
  DownloadProjectionRequest(DownloadProjectionRequest&& from) noexcept
    : DownloadProjectionRequest() {
    *this = ::std::move(from);
  }

  inline DownloadProjectionRequest& operator=(const DownloadProjectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadProjectionRequest& operator=(DownloadProjectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadProjectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadProjectionRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadProjectionRequest*>(
               &_DownloadProjectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DownloadProjectionRequest& a, DownloadProjectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadProjectionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadProjectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadProjectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadProjectionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadProjectionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadProjectionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadProjectionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DownloadProjectionRequest";
  }
  protected:
  explicit DownloadProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // optional int32 shardId = 1;
  bool has_shardid() const;
  private:
  bool _internal_has_shardid() const;
  public:
  void clear_shardid();
  int32_t shardid() const;
  void set_shardid(int32_t value);
  private:
  int32_t _internal_shardid() const;
  void _internal_set_shardid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DownloadProjectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t shardid_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class DownloadMovieIndicesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto.DownloadMovieIndicesRequest) */ {
 public:
  inline DownloadMovieIndicesRequest() : DownloadMovieIndicesRequest(nullptr) {}
  explicit constexpr DownloadMovieIndicesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMovieIndicesRequest(const DownloadMovieIndicesRequest& from);
  DownloadMovieIndicesRequest(DownloadMovieIndicesRequest&& from) noexcept
    : DownloadMovieIndicesRequest() {
    *this = ::std::move(from);
  }

  inline DownloadMovieIndicesRequest& operator=(const DownloadMovieIndicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMovieIndicesRequest& operator=(DownloadMovieIndicesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMovieIndicesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMovieIndicesRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadMovieIndicesRequest*>(
               &_DownloadMovieIndicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DownloadMovieIndicesRequest& a, DownloadMovieIndicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMovieIndicesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMovieIndicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadMovieIndicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadMovieIndicesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DownloadMovieIndicesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DownloadMovieIndicesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DownloadMovieIndicesRequest";
  }
  protected:
  explicit DownloadMovieIndicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.DownloadMovieIndicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class DownloadProjectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DownloadProjectionResponse) */ {
 public:
  inline DownloadProjectionResponse() : DownloadProjectionResponse(nullptr) {}
  ~DownloadProjectionResponse() override;
  explicit constexpr DownloadProjectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadProjectionResponse(const DownloadProjectionResponse& from);
  DownloadProjectionResponse(DownloadProjectionResponse&& from) noexcept
    : DownloadProjectionResponse() {
    *this = ::std::move(from);
  }

  inline DownloadProjectionResponse& operator=(const DownloadProjectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadProjectionResponse& operator=(DownloadProjectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadProjectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadProjectionResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadProjectionResponse*>(
               &_DownloadProjectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DownloadProjectionResponse& a, DownloadProjectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadProjectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadProjectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadProjectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadProjectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadProjectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadProjectionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadProjectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DownloadProjectionResponse";
  }
  protected:
  explicit DownloadProjectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionFieldNumber = 1,
  };
  // optional .proto.Projection projection = 1;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::proto::Projection& projection() const;
  PROTOBUF_NODISCARD ::proto::Projection* release_projection();
  ::proto::Projection* mutable_projection();
  void set_allocated_projection(::proto::Projection* projection);
  private:
  const ::proto::Projection& _internal_projection() const;
  ::proto::Projection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::proto::Projection* projection);
  ::proto::Projection* unsafe_arena_release_projection();

  // @@protoc_insertion_point(class_scope:proto.DownloadProjectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Projection* projection_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class DownloadMovieIndicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DownloadMovieIndicesResponse) */ {
 public:
  inline DownloadMovieIndicesResponse() : DownloadMovieIndicesResponse(nullptr) {}
  ~DownloadMovieIndicesResponse() override;
  explicit constexpr DownloadMovieIndicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownloadMovieIndicesResponse(const DownloadMovieIndicesResponse& from);
  DownloadMovieIndicesResponse(DownloadMovieIndicesResponse&& from) noexcept
    : DownloadMovieIndicesResponse() {
    *this = ::std::move(from);
  }

  inline DownloadMovieIndicesResponse& operator=(const DownloadMovieIndicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMovieIndicesResponse& operator=(DownloadMovieIndicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownloadMovieIndicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownloadMovieIndicesResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadMovieIndicesResponse*>(
               &_DownloadMovieIndicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DownloadMovieIndicesResponse& a, DownloadMovieIndicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMovieIndicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadMovieIndicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownloadMovieIndicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownloadMovieIndicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownloadMovieIndicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DownloadMovieIndicesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMovieIndicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DownloadMovieIndicesResponse";
  }
  protected:
  explicit DownloadMovieIndicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovieIndicesFieldNumber = 1,
  };
  // optional .proto.MovieIndices movieIndices = 1;
  bool has_movieindices() const;
  private:
  bool _internal_has_movieindices() const;
  public:
  void clear_movieindices();
  const ::proto::MovieIndices& movieindices() const;
  PROTOBUF_NODISCARD ::proto::MovieIndices* release_movieindices();
  ::proto::MovieIndices* mutable_movieindices();
  void set_allocated_movieindices(::proto::MovieIndices* movieindices);
  private:
  const ::proto::MovieIndices& _internal_movieindices() const;
  ::proto::MovieIndices* _internal_mutable_movieindices();
  public:
  void unsafe_arena_set_allocated_movieindices(
      ::proto::MovieIndices* movieindices);
  ::proto::MovieIndices* unsafe_arena_release_movieindices();

  // @@protoc_insertion_point(class_scope:proto.DownloadMovieIndicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::MovieIndices* movieindices_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// -------------------------------------------------------------------

class ScrapeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto.ScrapeRequest) */ {
 public:
  inline ScrapeRequest() : ScrapeRequest(nullptr) {}
  explicit constexpr ScrapeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScrapeRequest(const ScrapeRequest& from);
  ScrapeRequest(ScrapeRequest&& from) noexcept
    : ScrapeRequest() {
    *this = ::std::move(from);
  }

  inline ScrapeRequest& operator=(const ScrapeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScrapeRequest& operator=(ScrapeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScrapeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScrapeRequest* internal_default_instance() {
    return reinterpret_cast<const ScrapeRequest*>(
               &_ScrapeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScrapeRequest& a, ScrapeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScrapeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScrapeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScrapeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScrapeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ScrapeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ScrapeRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScrapeRequest";
  }
  protected:
  explicit ScrapeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.ScrapeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_internal_5fservices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadFileRequest

// optional string name = 1;
inline bool UploadFileRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UploadFileRequest::has_name() const {
  return _internal_has_name();
}
inline void UploadFileRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadFileRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.UploadFileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadFileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UploadFileRequest.name)
}
inline std::string* UploadFileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.UploadFileRequest.name)
  return _s;
}
inline const std::string& UploadFileRequest::_internal_name() const {
  return name_.Get();
}
inline void UploadFileRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadFileRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.UploadFileRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UploadFileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UploadFileRequest.name)
}

// optional bytes body = 2;
inline bool UploadFileRequest::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UploadFileRequest::has_body() const {
  return _internal_has_body();
}
inline void UploadFileRequest::clear_body() {
  body_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UploadFileRequest::body() const {
  // @@protoc_insertion_point(field_get:proto.UploadFileRequest.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadFileRequest::set_body(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UploadFileRequest.body)
}
inline std::string* UploadFileRequest::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:proto.UploadFileRequest.body)
  return _s;
}
inline const std::string& UploadFileRequest::_internal_body() const {
  return body_.Get();
}
inline void UploadFileRequest::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadFileRequest::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000002u;
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadFileRequest::release_body() {
  // @@protoc_insertion_point(field_release:proto.UploadFileRequest.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = body_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UploadFileRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UploadFileRequest.body)
}

// -------------------------------------------------------------------

// IngestReviewRequest

// optional .proto.Review review = 1;
inline bool IngestReviewRequest::_internal_has_review() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || review_ != nullptr);
  return value;
}
inline bool IngestReviewRequest::has_review() const {
  return _internal_has_review();
}
inline const ::proto::Review& IngestReviewRequest::_internal_review() const {
  const ::proto::Review* p = review_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Review&>(
      ::proto::_Review_default_instance_);
}
inline const ::proto::Review& IngestReviewRequest::review() const {
  // @@protoc_insertion_point(field_get:proto.IngestReviewRequest.review)
  return _internal_review();
}
inline void IngestReviewRequest::unsafe_arena_set_allocated_review(
    ::proto::Review* review) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(review_);
  }
  review_ = review;
  if (review) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.IngestReviewRequest.review)
}
inline ::proto::Review* IngestReviewRequest::release_review() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Review* temp = review_;
  review_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Review* IngestReviewRequest::unsafe_arena_release_review() {
  // @@protoc_insertion_point(field_release:proto.IngestReviewRequest.review)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Review* temp = review_;
  review_ = nullptr;
  return temp;
}
inline ::proto::Review* IngestReviewRequest::_internal_mutable_review() {
  _has_bits_[0] |= 0x00000001u;
  if (review_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Review>(GetArenaForAllocation());
    review_ = p;
  }
  return review_;
}
inline ::proto::Review* IngestReviewRequest::mutable_review() {
  ::proto::Review* _msg = _internal_mutable_review();
  // @@protoc_insertion_point(field_mutable:proto.IngestReviewRequest.review)
  return _msg;
}
inline void IngestReviewRequest::set_allocated_review(::proto::Review* review) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(review_);
  }
  if (review) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(review));
    if (message_arena != submessage_arena) {
      review = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, review, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  review_ = review;
  // @@protoc_insertion_point(field_set_allocated:proto.IngestReviewRequest.review)
}

// -------------------------------------------------------------------

// IngestBatchRequest

// optional string filename = 1;
inline bool IngestBatchRequest::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IngestBatchRequest::has_filename() const {
  return _internal_has_filename();
}
inline void IngestBatchRequest::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IngestBatchRequest::filename() const {
  // @@protoc_insertion_point(field_get:proto.IngestBatchRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IngestBatchRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.IngestBatchRequest.filename)
}
inline std::string* IngestBatchRequest::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:proto.IngestBatchRequest.filename)
  return _s;
}
inline const std::string& IngestBatchRequest::_internal_filename() const {
  return filename_.Get();
}
inline void IngestBatchRequest::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IngestBatchRequest::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IngestBatchRequest::release_filename() {
  // @@protoc_insertion_point(field_release:proto.IngestBatchRequest.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IngestBatchRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.IngestBatchRequest.filename)
}

// -------------------------------------------------------------------

// CreateProjectionRequest

// -------------------------------------------------------------------

// UploadProjectionRequest

// optional .proto.Projection projection = 1;
inline bool UploadProjectionRequest::_internal_has_projection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || projection_ != nullptr);
  return value;
}
inline bool UploadProjectionRequest::has_projection() const {
  return _internal_has_projection();
}
inline const ::proto::Projection& UploadProjectionRequest::_internal_projection() const {
  const ::proto::Projection* p = projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Projection&>(
      ::proto::_Projection_default_instance_);
}
inline const ::proto::Projection& UploadProjectionRequest::projection() const {
  // @@protoc_insertion_point(field_get:proto.UploadProjectionRequest.projection)
  return _internal_projection();
}
inline void UploadProjectionRequest::unsafe_arena_set_allocated_projection(
    ::proto::Projection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UploadProjectionRequest.projection)
}
inline ::proto::Projection* UploadProjectionRequest::release_projection() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Projection* UploadProjectionRequest::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:proto.UploadProjectionRequest.projection)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::proto::Projection* UploadProjectionRequest::_internal_mutable_projection() {
  _has_bits_[0] |= 0x00000001u;
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Projection>(GetArenaForAllocation());
    projection_ = p;
  }
  return projection_;
}
inline ::proto::Projection* UploadProjectionRequest::mutable_projection() {
  ::proto::Projection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:proto.UploadProjectionRequest.projection)
  return _msg;
}
inline void UploadProjectionRequest::set_allocated_projection(::proto::Projection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:proto.UploadProjectionRequest.projection)
}

// optional .proto.MovieIndices movieIndices = 2;
inline bool UploadProjectionRequest::_internal_has_movieindices() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || movieindices_ != nullptr);
  return value;
}
inline bool UploadProjectionRequest::has_movieindices() const {
  return _internal_has_movieindices();
}
inline const ::proto::MovieIndices& UploadProjectionRequest::_internal_movieindices() const {
  const ::proto::MovieIndices* p = movieindices_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MovieIndices&>(
      ::proto::_MovieIndices_default_instance_);
}
inline const ::proto::MovieIndices& UploadProjectionRequest::movieindices() const {
  // @@protoc_insertion_point(field_get:proto.UploadProjectionRequest.movieIndices)
  return _internal_movieindices();
}
inline void UploadProjectionRequest::unsafe_arena_set_allocated_movieindices(
    ::proto::MovieIndices* movieindices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices_);
  }
  movieindices_ = movieindices;
  if (movieindices) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UploadProjectionRequest.movieIndices)
}
inline ::proto::MovieIndices* UploadProjectionRequest::release_movieindices() {
  _has_bits_[0] &= ~0x00000002u;
  ::proto::MovieIndices* temp = movieindices_;
  movieindices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MovieIndices* UploadProjectionRequest::unsafe_arena_release_movieindices() {
  // @@protoc_insertion_point(field_release:proto.UploadProjectionRequest.movieIndices)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::MovieIndices* temp = movieindices_;
  movieindices_ = nullptr;
  return temp;
}
inline ::proto::MovieIndices* UploadProjectionRequest::_internal_mutable_movieindices() {
  _has_bits_[0] |= 0x00000002u;
  if (movieindices_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MovieIndices>(GetArenaForAllocation());
    movieindices_ = p;
  }
  return movieindices_;
}
inline ::proto::MovieIndices* UploadProjectionRequest::mutable_movieindices() {
  ::proto::MovieIndices* _msg = _internal_mutable_movieindices();
  // @@protoc_insertion_point(field_mutable:proto.UploadProjectionRequest.movieIndices)
  return _msg;
}
inline void UploadProjectionRequest::set_allocated_movieindices(::proto::MovieIndices* movieindices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices_);
  }
  if (movieindices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices));
    if (message_arena != submessage_arena) {
      movieindices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movieindices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  movieindices_ = movieindices;
  // @@protoc_insertion_point(field_set_allocated:proto.UploadProjectionRequest.movieIndices)
}

// -------------------------------------------------------------------

// AppendProjectionRequest

// optional .proto.Projection projection = 1;
inline bool AppendProjectionRequest::_internal_has_projection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || projection_ != nullptr);
  return value;
}
inline bool AppendProjectionRequest::has_projection() const {
  return _internal_has_projection();
}
inline const ::proto::Projection& AppendProjectionRequest::_internal_projection() const {
  const ::proto::Projection* p = projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Projection&>(
      ::proto::_Projection_default_instance_);
}
inline const ::proto::Projection& AppendProjectionRequest::projection() const {
  // @@protoc_insertion_point(field_get:proto.AppendProjectionRequest.projection)
  return _internal_projection();
}
inline void AppendProjectionRequest::unsafe_arena_set_allocated_projection(
    ::proto::Projection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AppendProjectionRequest.projection)
}
inline ::proto::Projection* AppendProjectionRequest::release_projection() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Projection* AppendProjectionRequest::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:proto.AppendProjectionRequest.projection)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::proto::Projection* AppendProjectionRequest::_internal_mutable_projection() {
  _has_bits_[0] |= 0x00000001u;
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Projection>(GetArenaForAllocation());
    projection_ = p;
  }
  return projection_;
}
inline ::proto::Projection* AppendProjectionRequest::mutable_projection() {
  ::proto::Projection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:proto.AppendProjectionRequest.projection)
  return _msg;
}
inline void AppendProjectionRequest::set_allocated_projection(::proto::Projection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:proto.AppendProjectionRequest.projection)
}

// -------------------------------------------------------------------

// DownloadProjectionRequest

// optional int32 shardId = 1;
inline bool DownloadProjectionRequest::_internal_has_shardid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DownloadProjectionRequest::has_shardid() const {
  return _internal_has_shardid();
}
inline void DownloadProjectionRequest::clear_shardid() {
  shardid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DownloadProjectionRequest::_internal_shardid() const {
  return shardid_;
}
inline int32_t DownloadProjectionRequest::shardid() const {
  // @@protoc_insertion_point(field_get:proto.DownloadProjectionRequest.shardId)
  return _internal_shardid();
}
inline void DownloadProjectionRequest::_internal_set_shardid(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  shardid_ = value;
}
inline void DownloadProjectionRequest::set_shardid(int32_t value) {
  _internal_set_shardid(value);
  // @@protoc_insertion_point(field_set:proto.DownloadProjectionRequest.shardId)
}

// -------------------------------------------------------------------

// DownloadMovieIndicesRequest

// -------------------------------------------------------------------

// DownloadProjectionResponse

// optional .proto.Projection projection = 1;
inline bool DownloadProjectionResponse::_internal_has_projection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || projection_ != nullptr);
  return value;
}
inline bool DownloadProjectionResponse::has_projection() const {
  return _internal_has_projection();
}
inline const ::proto::Projection& DownloadProjectionResponse::_internal_projection() const {
  const ::proto::Projection* p = projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Projection&>(
      ::proto::_Projection_default_instance_);
}
inline const ::proto::Projection& DownloadProjectionResponse::projection() const {
  // @@protoc_insertion_point(field_get:proto.DownloadProjectionResponse.projection)
  return _internal_projection();
}
inline void DownloadProjectionResponse::unsafe_arena_set_allocated_projection(
    ::proto::Projection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  projection_ = projection;
  if (projection) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DownloadProjectionResponse.projection)
}
inline ::proto::Projection* DownloadProjectionResponse::release_projection() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Projection* DownloadProjectionResponse::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:proto.DownloadProjectionResponse.projection)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Projection* temp = projection_;
  projection_ = nullptr;
  return temp;
}
inline ::proto::Projection* DownloadProjectionResponse::_internal_mutable_projection() {
  _has_bits_[0] |= 0x00000001u;
  if (projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Projection>(GetArenaForAllocation());
    projection_ = p;
  }
  return projection_;
}
inline ::proto::Projection* DownloadProjectionResponse::mutable_projection() {
  ::proto::Projection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:proto.DownloadProjectionResponse.projection)
  return _msg;
}
inline void DownloadProjectionResponse::set_allocated_projection(::proto::Projection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection_);
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projection));
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:proto.DownloadProjectionResponse.projection)
}

// -------------------------------------------------------------------

// DownloadMovieIndicesResponse

// optional .proto.MovieIndices movieIndices = 1;
inline bool DownloadMovieIndicesResponse::_internal_has_movieindices() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || movieindices_ != nullptr);
  return value;
}
inline bool DownloadMovieIndicesResponse::has_movieindices() const {
  return _internal_has_movieindices();
}
inline const ::proto::MovieIndices& DownloadMovieIndicesResponse::_internal_movieindices() const {
  const ::proto::MovieIndices* p = movieindices_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MovieIndices&>(
      ::proto::_MovieIndices_default_instance_);
}
inline const ::proto::MovieIndices& DownloadMovieIndicesResponse::movieindices() const {
  // @@protoc_insertion_point(field_get:proto.DownloadMovieIndicesResponse.movieIndices)
  return _internal_movieindices();
}
inline void DownloadMovieIndicesResponse::unsafe_arena_set_allocated_movieindices(
    ::proto::MovieIndices* movieindices) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices_);
  }
  movieindices_ = movieindices;
  if (movieindices) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DownloadMovieIndicesResponse.movieIndices)
}
inline ::proto::MovieIndices* DownloadMovieIndicesResponse::release_movieindices() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::MovieIndices* temp = movieindices_;
  movieindices_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MovieIndices* DownloadMovieIndicesResponse::unsafe_arena_release_movieindices() {
  // @@protoc_insertion_point(field_release:proto.DownloadMovieIndicesResponse.movieIndices)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::MovieIndices* temp = movieindices_;
  movieindices_ = nullptr;
  return temp;
}
inline ::proto::MovieIndices* DownloadMovieIndicesResponse::_internal_mutable_movieindices() {
  _has_bits_[0] |= 0x00000001u;
  if (movieindices_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MovieIndices>(GetArenaForAllocation());
    movieindices_ = p;
  }
  return movieindices_;
}
inline ::proto::MovieIndices* DownloadMovieIndicesResponse::mutable_movieindices() {
  ::proto::MovieIndices* _msg = _internal_mutable_movieindices();
  // @@protoc_insertion_point(field_mutable:proto.DownloadMovieIndicesResponse.movieIndices)
  return _msg;
}
inline void DownloadMovieIndicesResponse::set_allocated_movieindices(::proto::MovieIndices* movieindices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices_);
  }
  if (movieindices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movieindices));
    if (message_arena != submessage_arena) {
      movieindices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movieindices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  movieindices_ = movieindices;
  // @@protoc_insertion_point(field_set_allocated:proto.DownloadMovieIndicesResponse.movieIndices)
}

// -------------------------------------------------------------------

// ScrapeRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internal_5fservices_2eproto
