// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: backend_services.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimilarityEngineServiceClient is the client API for SimilarityEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimilarityEngineServiceClient interface {
	GetClosestNeighbor(ctx context.Context, in *GetClosestNeighborRequest, opts ...grpc.CallOption) (*GetClosestNeighborResponse, error)
	FindAverageVector(ctx context.Context, in *FindAverageVectorRequest, opts ...grpc.CallOption) (*FindAverageVectorResponse, error)
	CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error)
}

type similarityEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimilarityEngineServiceClient(cc grpc.ClientConnInterface) SimilarityEngineServiceClient {
	return &similarityEngineServiceClient{cc}
}

func (c *similarityEngineServiceClient) GetClosestNeighbor(ctx context.Context, in *GetClosestNeighborRequest, opts ...grpc.CallOption) (*GetClosestNeighborResponse, error) {
	out := new(GetClosestNeighborResponse)
	err := c.cc.Invoke(ctx, "/proto.SimilarityEngineService/GetClosestNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityEngineServiceClient) FindAverageVector(ctx context.Context, in *FindAverageVectorRequest, opts ...grpc.CallOption) (*FindAverageVectorResponse, error) {
	out := new(FindAverageVectorResponse)
	err := c.cc.Invoke(ctx, "/proto.SimilarityEngineService/FindAverageVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *similarityEngineServiceClient) CheckHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/proto.SimilarityEngineService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimilarityEngineServiceServer is the server API for SimilarityEngineService service.
// All implementations must embed UnimplementedSimilarityEngineServiceServer
// for forward compatibility
type SimilarityEngineServiceServer interface {
	GetClosestNeighbor(context.Context, *GetClosestNeighborRequest) (*GetClosestNeighborResponse, error)
	FindAverageVector(context.Context, *FindAverageVectorRequest) (*FindAverageVectorResponse, error)
	CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error)
	mustEmbedUnimplementedSimilarityEngineServiceServer()
}

// UnimplementedSimilarityEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimilarityEngineServiceServer struct {
}

func (UnimplementedSimilarityEngineServiceServer) GetClosestNeighbor(context.Context, *GetClosestNeighborRequest) (*GetClosestNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClosestNeighbor not implemented")
}
func (UnimplementedSimilarityEngineServiceServer) FindAverageVector(context.Context, *FindAverageVectorRequest) (*FindAverageVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAverageVector not implemented")
}
func (UnimplementedSimilarityEngineServiceServer) CheckHealth(context.Context, *HealthCheckRequest) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedSimilarityEngineServiceServer) mustEmbedUnimplementedSimilarityEngineServiceServer() {
}

// UnsafeSimilarityEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimilarityEngineServiceServer will
// result in compilation errors.
type UnsafeSimilarityEngineServiceServer interface {
	mustEmbedUnimplementedSimilarityEngineServiceServer()
}

func RegisterSimilarityEngineServiceServer(s grpc.ServiceRegistrar, srv SimilarityEngineServiceServer) {
	s.RegisterService(&SimilarityEngineService_ServiceDesc, srv)
}

func _SimilarityEngineService_GetClosestNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClosestNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityEngineServiceServer).GetClosestNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SimilarityEngineService/GetClosestNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityEngineServiceServer).GetClosestNeighbor(ctx, req.(*GetClosestNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityEngineService_FindAverageVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAverageVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityEngineServiceServer).FindAverageVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SimilarityEngineService/FindAverageVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityEngineServiceServer).FindAverageVector(ctx, req.(*FindAverageVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimilarityEngineService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimilarityEngineServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SimilarityEngineService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimilarityEngineServiceServer).CheckHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimilarityEngineService_ServiceDesc is the grpc.ServiceDesc for SimilarityEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimilarityEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SimilarityEngineService",
	HandlerType: (*SimilarityEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClosestNeighbor",
			Handler:    _SimilarityEngineService_GetClosestNeighbor_Handler,
		},
		{
			MethodName: "FindAverageVector",
			Handler:    _SimilarityEngineService_FindAverageVector_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _SimilarityEngineService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_services.proto",
}
