// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: backend_services.proto
#ifndef GRPC_backend_5fservices_2eproto__INCLUDED
#define GRPC_backend_5fservices_2eproto__INCLUDED

#include "backend_services.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {

class SimilarityEngineService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.SimilarityEngineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::proto::GetClosestNeighborResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>> AsyncGetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>>(AsyncGetClosestNeighborRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>> PrepareAsyncGetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>>(PrepareAsyncGetClosestNeighborRaw(context, request, cq));
    }
    virtual ::grpc::Status FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::proto::FindAverageVectorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>> AsyncFindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>>(AsyncFindAverageVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>> PrepareAsyncFindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>>(PrepareAsyncFindAverageVectorRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>* AsyncGetClosestNeighborRaw(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::GetClosestNeighborResponse>* PrepareAsyncGetClosestNeighborRaw(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>* AsyncFindAverageVectorRaw(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::FindAverageVectorResponse>* PrepareAsyncFindAverageVectorRaw(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::proto::GetClosestNeighborResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>> AsyncGetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>>(AsyncGetClosestNeighborRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>> PrepareAsyncGetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>>(PrepareAsyncGetClosestNeighborRaw(context, request, cq));
    }
    ::grpc::Status FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::proto::FindAverageVectorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>> AsyncFindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>>(AsyncFindAverageVectorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>> PrepareAsyncFindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>>(PrepareAsyncFindAverageVectorRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response, std::function<void(::grpc::Status)>) override;
      void GetClosestNeighbor(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response, std::function<void(::grpc::Status)>) override;
      void FindAverageVector(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>* AsyncGetClosestNeighborRaw(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::GetClosestNeighborResponse>* PrepareAsyncGetClosestNeighborRaw(::grpc::ClientContext* context, const ::proto::GetClosestNeighborRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>* AsyncFindAverageVectorRaw(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::FindAverageVectorResponse>* PrepareAsyncFindAverageVectorRaw(::grpc::ClientContext* context, const ::proto::FindAverageVectorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetClosestNeighbor_;
    const ::grpc::internal::RpcMethod rpcmethod_FindAverageVector_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHealth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response);
    virtual ::grpc::Status FindAverageVector(::grpc::ServerContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosestNeighbor(::grpc::ServerContext* context, ::proto::GetClosestNeighborRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::GetClosestNeighborResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAverageVector(::grpc::ServerContext* context, ::proto::FindAverageVectorRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::FindAverageVectorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::proto::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetClosestNeighbor<WithAsyncMethod_FindAverageVector<WithAsyncMethod_CheckHealth<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::GetClosestNeighborRequest, ::proto::GetClosestNeighborResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::GetClosestNeighborRequest* request, ::proto::GetClosestNeighborResponse* response) { return this->GetClosestNeighbor(context, request, response); }));}
    void SetMessageAllocatorFor_GetClosestNeighbor(
        ::grpc::MessageAllocator< ::proto::GetClosestNeighborRequest, ::proto::GetClosestNeighborResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::GetClosestNeighborRequest, ::proto::GetClosestNeighborResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClosestNeighbor(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::FindAverageVectorRequest, ::proto::FindAverageVectorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::FindAverageVectorRequest* request, ::proto::FindAverageVectorResponse* response) { return this->FindAverageVector(context, request, response); }));}
    void SetMessageAllocatorFor_FindAverageVector(
        ::grpc::MessageAllocator< ::proto::FindAverageVectorRequest, ::proto::FindAverageVectorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::FindAverageVectorRequest, ::proto::FindAverageVectorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAverageVector(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) { return this->CheckHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHealth(
        ::grpc::MessageAllocator< ::proto::HealthCheckRequest, ::proto::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetClosestNeighbor<WithCallbackMethod_FindAverageVector<WithCallbackMethod_CheckHealth<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClosestNeighbor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindAverageVector(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetClosestNeighbor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetClosestNeighbor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindAverageVector(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindAverageVector(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClosestNeighbor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetClosestNeighbor() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::GetClosestNeighborRequest, ::proto::GetClosestNeighborResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::GetClosestNeighborRequest, ::proto::GetClosestNeighborResponse>* streamer) {
                       return this->StreamedGetClosestNeighbor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetClosestNeighbor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClosestNeighbor(::grpc::ServerContext* /*context*/, const ::proto::GetClosestNeighborRequest* /*request*/, ::proto::GetClosestNeighborResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClosestNeighbor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::GetClosestNeighborRequest,::proto::GetClosestNeighborResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindAverageVector : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindAverageVector() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::FindAverageVectorRequest, ::proto::FindAverageVectorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::FindAverageVectorRequest, ::proto::FindAverageVectorResponse>* streamer) {
                       return this->StreamedFindAverageVector(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindAverageVector() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindAverageVector(::grpc::ServerContext* /*context*/, const ::proto::FindAverageVectorRequest* /*request*/, ::proto::FindAverageVectorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindAverageVector(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::FindAverageVectorRequest,::proto::FindAverageVectorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::HealthCheckRequest, ::proto::Payload>* streamer) {
                       return this->StreamedCheckHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::HealthCheckRequest,::proto::Payload>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetClosestNeighbor<WithStreamedUnaryMethod_FindAverageVector<WithStreamedUnaryMethod_CheckHealth<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetClosestNeighbor<WithStreamedUnaryMethod_FindAverageVector<WithStreamedUnaryMethod_CheckHealth<Service > > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_backend_5fservices_2eproto__INCLUDED
