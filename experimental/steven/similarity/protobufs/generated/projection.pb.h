// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_projection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_projection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_projection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_projection_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_projection_2eproto;
namespace reviewers {
class Projection;
struct ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class ProjectionEntry;
struct ProjectionEntryDefaultTypeInternal;
extern ProjectionEntryDefaultTypeInternal _ProjectionEntry_default_instance_;
}  // namespace reviewers
PROTOBUF_NAMESPACE_OPEN
template<> ::reviewers::Projection* Arena::CreateMaybeMessage<::reviewers::Projection>(Arena*);
template<> ::reviewers::ProjectionEntry* Arena::CreateMaybeMessage<::reviewers::ProjectionEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reviewers {

// ===================================================================

class Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reviewers.Projection) */ {
 public:
  inline Projection() : Projection(nullptr) {}
  ~Projection() override;
  explicit PROTOBUF_CONSTEXPR Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Projection(const Projection& from);
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projection& operator=(Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Projection& from) {
    Projection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reviewers.Projection";
  }
  protected:
  explicit Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .reviewers.ProjectionEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::reviewers::ProjectionEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reviewers::ProjectionEntry >*
      mutable_entries();
  private:
  const ::reviewers::ProjectionEntry& _internal_entries(int index) const;
  ::reviewers::ProjectionEntry* _internal_add_entries();
  public:
  const ::reviewers::ProjectionEntry& entries(int index) const;
  ::reviewers::ProjectionEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reviewers::ProjectionEntry >&
      entries() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:reviewers.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reviewers::ProjectionEntry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_projection_2eproto;
};
// -------------------------------------------------------------------

class ProjectionEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reviewers.ProjectionEntry) */ {
 public:
  inline ProjectionEntry() : ProjectionEntry(nullptr) {}
  ~ProjectionEntry() override;
  explicit PROTOBUF_CONSTEXPR ProjectionEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectionEntry(const ProjectionEntry& from);
  ProjectionEntry(ProjectionEntry&& from) noexcept
    : ProjectionEntry() {
    *this = ::std::move(from);
  }

  inline ProjectionEntry& operator=(const ProjectionEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionEntry& operator=(ProjectionEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectionEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectionEntry* internal_default_instance() {
    return reinterpret_cast<const ProjectionEntry*>(
               &_ProjectionEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProjectionEntry& a, ProjectionEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectionEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectionEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectionEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectionEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectionEntry& from) {
    ProjectionEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reviewers.ProjectionEntry";
  }
  protected:
  explicit ProjectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatingFieldNumber = 2,
    kAuthorFieldNumber = 1,
  };
  // repeated float rating = 2;
  int rating_size() const;
  private:
  int _internal_rating_size() const;
  public:
  void clear_rating();
  private:
  float _internal_rating(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rating() const;
  void _internal_add_rating(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rating();
  public:
  float rating(int index) const;
  void set_rating(int index, float value);
  void add_rating(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rating() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rating();

  // optional string author = 1;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // @@protoc_insertion_point(class_scope:reviewers.ProjectionEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rating_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_projection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Projection

// optional string version = 1;
inline bool Projection::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Projection::has_version() const {
  return _internal_has_version();
}
inline void Projection::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Projection::version() const {
  // @@protoc_insertion_point(field_get:reviewers.Projection.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Projection::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reviewers.Projection.version)
}
inline std::string* Projection::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:reviewers.Projection.version)
  return _s;
}
inline const std::string& Projection::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Projection::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Projection::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Projection::release_version() {
  // @@protoc_insertion_point(field_release:reviewers.Projection.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Projection::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reviewers.Projection.version)
}

// repeated .reviewers.ProjectionEntry entries = 2;
inline int Projection::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int Projection::entries_size() const {
  return _internal_entries_size();
}
inline void Projection::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::reviewers::ProjectionEntry* Projection::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:reviewers.Projection.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reviewers::ProjectionEntry >*
Projection::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:reviewers.Projection.entries)
  return &_impl_.entries_;
}
inline const ::reviewers::ProjectionEntry& Projection::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::reviewers::ProjectionEntry& Projection::entries(int index) const {
  // @@protoc_insertion_point(field_get:reviewers.Projection.entries)
  return _internal_entries(index);
}
inline ::reviewers::ProjectionEntry* Projection::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::reviewers::ProjectionEntry* Projection::add_entries() {
  ::reviewers::ProjectionEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:reviewers.Projection.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reviewers::ProjectionEntry >&
Projection::entries() const {
  // @@protoc_insertion_point(field_list:reviewers.Projection.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// ProjectionEntry

// optional string author = 1;
inline bool ProjectionEntry::_internal_has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectionEntry::has_author() const {
  return _internal_has_author();
}
inline void ProjectionEntry::clear_author() {
  _impl_.author_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjectionEntry::author() const {
  // @@protoc_insertion_point(field_get:reviewers.ProjectionEntry.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectionEntry::set_author(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reviewers.ProjectionEntry.author)
}
inline std::string* ProjectionEntry::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:reviewers.ProjectionEntry.author)
  return _s;
}
inline const std::string& ProjectionEntry::_internal_author() const {
  return _impl_.author_.Get();
}
inline void ProjectionEntry::_internal_set_author(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectionEntry::_internal_mutable_author() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectionEntry::release_author() {
  // @@protoc_insertion_point(field_release:reviewers.ProjectionEntry.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.author_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.author_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProjectionEntry::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reviewers.ProjectionEntry.author)
}

// repeated float rating = 2;
inline int ProjectionEntry::_internal_rating_size() const {
  return _impl_.rating_.size();
}
inline int ProjectionEntry::rating_size() const {
  return _internal_rating_size();
}
inline void ProjectionEntry::clear_rating() {
  _impl_.rating_.Clear();
}
inline float ProjectionEntry::_internal_rating(int index) const {
  return _impl_.rating_.Get(index);
}
inline float ProjectionEntry::rating(int index) const {
  // @@protoc_insertion_point(field_get:reviewers.ProjectionEntry.rating)
  return _internal_rating(index);
}
inline void ProjectionEntry::set_rating(int index, float value) {
  _impl_.rating_.Set(index, value);
  // @@protoc_insertion_point(field_set:reviewers.ProjectionEntry.rating)
}
inline void ProjectionEntry::_internal_add_rating(float value) {
  _impl_.rating_.Add(value);
}
inline void ProjectionEntry::add_rating(float value) {
  _internal_add_rating(value);
  // @@protoc_insertion_point(field_add:reviewers.ProjectionEntry.rating)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ProjectionEntry::_internal_rating() const {
  return _impl_.rating_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ProjectionEntry::rating() const {
  // @@protoc_insertion_point(field_list:reviewers.ProjectionEntry.rating)
  return _internal_rating();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ProjectionEntry::_internal_mutable_rating() {
  return &_impl_.rating_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ProjectionEntry::mutable_rating() {
  // @@protoc_insertion_point(field_mutable_list:reviewers.ProjectionEntry.rating)
  return _internal_mutable_rating();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reviewers

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_projection_2eproto
