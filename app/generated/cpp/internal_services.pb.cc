// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal_services.proto

#include "internal_services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr UploadFileRequest::UploadFileRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UploadFileRequestDefaultTypeInternal {
  constexpr UploadFileRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadFileRequestDefaultTypeInternal() {}
  union {
    UploadFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
constexpr IngestReviewRequest::IngestReviewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : review_(nullptr){}
struct IngestReviewRequestDefaultTypeInternal {
  constexpr IngestReviewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IngestReviewRequestDefaultTypeInternal() {}
  union {
    IngestReviewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IngestReviewRequestDefaultTypeInternal _IngestReviewRequest_default_instance_;
constexpr IngestBatchRequest::IngestBatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IngestBatchRequestDefaultTypeInternal {
  constexpr IngestBatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IngestBatchRequestDefaultTypeInternal() {}
  union {
    IngestBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IngestBatchRequestDefaultTypeInternal _IngestBatchRequest_default_instance_;
constexpr CreateProjectionRequest::CreateProjectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateProjectionRequestDefaultTypeInternal {
  constexpr CreateProjectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectionRequestDefaultTypeInternal() {}
  union {
    CreateProjectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectionRequestDefaultTypeInternal _CreateProjectionRequest_default_instance_;
constexpr UploadProjectionRequest::UploadProjectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projection_(nullptr)
  , movieindices_(nullptr){}
struct UploadProjectionRequestDefaultTypeInternal {
  constexpr UploadProjectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UploadProjectionRequestDefaultTypeInternal() {}
  union {
    UploadProjectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UploadProjectionRequestDefaultTypeInternal _UploadProjectionRequest_default_instance_;
constexpr AppendProjectionRequest::AppendProjectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projection_(nullptr){}
struct AppendProjectionRequestDefaultTypeInternal {
  constexpr AppendProjectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendProjectionRequestDefaultTypeInternal() {}
  union {
    AppendProjectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendProjectionRequestDefaultTypeInternal _AppendProjectionRequest_default_instance_;
constexpr DownloadProjectionRequest::DownloadProjectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shardid_(0){}
struct DownloadProjectionRequestDefaultTypeInternal {
  constexpr DownloadProjectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadProjectionRequestDefaultTypeInternal() {}
  union {
    DownloadProjectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadProjectionRequestDefaultTypeInternal _DownloadProjectionRequest_default_instance_;
constexpr DownloadMovieIndicesRequest::DownloadMovieIndicesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DownloadMovieIndicesRequestDefaultTypeInternal {
  constexpr DownloadMovieIndicesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadMovieIndicesRequestDefaultTypeInternal() {}
  union {
    DownloadMovieIndicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadMovieIndicesRequestDefaultTypeInternal _DownloadMovieIndicesRequest_default_instance_;
constexpr DownloadProjectionResponse::DownloadProjectionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : projection_(nullptr){}
struct DownloadProjectionResponseDefaultTypeInternal {
  constexpr DownloadProjectionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadProjectionResponseDefaultTypeInternal() {}
  union {
    DownloadProjectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadProjectionResponseDefaultTypeInternal _DownloadProjectionResponse_default_instance_;
constexpr DownloadMovieIndicesResponse::DownloadMovieIndicesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movieindices_(nullptr){}
struct DownloadMovieIndicesResponseDefaultTypeInternal {
  constexpr DownloadMovieIndicesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DownloadMovieIndicesResponseDefaultTypeInternal() {}
  union {
    DownloadMovieIndicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DownloadMovieIndicesResponseDefaultTypeInternal _DownloadMovieIndicesResponse_default_instance_;
constexpr ScrapeRequest::ScrapeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ScrapeRequestDefaultTypeInternal {
  constexpr ScrapeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScrapeRequestDefaultTypeInternal() {}
  union {
    ScrapeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScrapeRequestDefaultTypeInternal _ScrapeRequest_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_internal_5fservices_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_internal_5fservices_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_internal_5fservices_2eproto = nullptr;

const uint32_t TableStruct_internal_5fservices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::UploadFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::UploadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UploadFileRequest, name_),
  PROTOBUF_FIELD_OFFSET(::proto::UploadFileRequest, body_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::IngestReviewRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::IngestReviewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::IngestReviewRequest, review_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::IngestBatchRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::IngestBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::IngestBatchRequest, filename_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CreateProjectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UploadProjectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::UploadProjectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::UploadProjectionRequest, projection_),
  PROTOBUF_FIELD_OFFSET(::proto::UploadProjectionRequest, movieindices_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::AppendProjectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AppendProjectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::AppendProjectionRequest, projection_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionRequest, shardid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::DownloadMovieIndicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DownloadProjectionResponse, projection_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::DownloadMovieIndicesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DownloadMovieIndicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::DownloadMovieIndicesResponse, movieindices_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ScrapeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::proto::UploadFileRequest)},
  { 10, 17, -1, sizeof(::proto::IngestReviewRequest)},
  { 18, 25, -1, sizeof(::proto::IngestBatchRequest)},
  { 26, -1, -1, sizeof(::proto::CreateProjectionRequest)},
  { 32, 40, -1, sizeof(::proto::UploadProjectionRequest)},
  { 42, 49, -1, sizeof(::proto::AppendProjectionRequest)},
  { 50, 57, -1, sizeof(::proto::DownloadProjectionRequest)},
  { 58, -1, -1, sizeof(::proto::DownloadMovieIndicesRequest)},
  { 64, 71, -1, sizeof(::proto::DownloadProjectionResponse)},
  { 72, 79, -1, sizeof(::proto::DownloadMovieIndicesResponse)},
  { 80, -1, -1, sizeof(::proto::ScrapeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_UploadFileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_IngestReviewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_IngestBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CreateProjectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_UploadProjectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AppendProjectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_DownloadProjectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_DownloadMovieIndicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_DownloadProjectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_DownloadMovieIndicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ScrapeRequest_default_instance_),
};

const char descriptor_table_protodef_internal_5fservices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027internal_services.proto\022\005proto\032\014common"
  ".proto\032\020data_model.proto\"K\n\021UploadFileRe"
  "quest\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\021\n\004body\030\002 \001(\014H\001"
  "\210\001\001B\007\n\005_nameB\007\n\005_body\"D\n\023IngestReviewReq"
  "uest\022\"\n\006review\030\001 \001(\0132\r.proto.ReviewH\000\210\001\001"
  "B\t\n\007_review\"8\n\022IngestBatchRequest\022\025\n\010fil"
  "ename\030\001 \001(\tH\000\210\001\001B\013\n\t_filename\"\031\n\027CreateP"
  "rojectionRequest\"\225\001\n\027UploadProjectionReq"
  "uest\022*\n\nprojection\030\001 \001(\0132\021.proto.Project"
  "ionH\000\210\001\001\022.\n\014movieIndices\030\002 \001(\0132\023.proto.M"
  "ovieIndicesH\001\210\001\001B\r\n\013_projectionB\017\n\r_movi"
  "eIndices\"T\n\027AppendProjectionRequest\022*\n\np"
  "rojection\030\001 \001(\0132\021.proto.ProjectionH\000\210\001\001B"
  "\r\n\013_projection\"=\n\031DownloadProjectionRequ"
  "est\022\024\n\007shardId\030\001 \001(\005H\000\210\001\001B\n\n\010_shardId\"\035\n"
  "\033DownloadMovieIndicesRequest\"W\n\032Download"
  "ProjectionResponse\022*\n\nprojection\030\001 \001(\0132\021"
  ".proto.ProjectionH\000\210\001\001B\r\n\013_projection\"_\n"
  "\034DownloadMovieIndicesResponse\022.\n\014movieIn"
  "dices\030\001 \001(\0132\023.proto.MovieIndicesH\000\210\001\001B\017\n"
  "\r_movieIndices\"\017\n\rScrapeRequest2\227\001\n\027Proj"
  "ectionEngineService\022B\n\020CreateProjection\022"
  "\036.proto.CreateProjectionRequest\032\016.proto."
  "Payload\0228\n\013CheckHealth\022\031.proto.HealthChe"
  "ckRequest\032\016.proto.Payload2\232\003\n\032Projection"
  "DatastoreService\022B\n\020UploadProjection\022\036.p"
  "roto.UploadProjectionRequest\032\016.proto.Pay"
  "load\022B\n\020AppendProjection\022\036.proto.AppendP"
  "rojectionRequest\032\016.proto.Payload\022Y\n\022Down"
  "loadProjection\022 .proto.DownloadProjectio"
  "nRequest\032!.proto.DownloadProjectionRespo"
  "nse\022_\n\024DownloadMovieIndices\022\".proto.Down"
  "loadMovieIndicesRequest\032#.proto.Download"
  "MovieIndicesResponse\0228\n\013CheckHealth\022\031.pr"
  "oto.HealthCheckRequest\032\016.proto.Payload2s"
  "\n\007Scraper\022.\n\006Scrape\022\024.proto.ScrapeReques"
  "t\032\016.proto.Payload\0228\n\013CheckHealth\022\031.proto"
  ".HealthCheckRequest\032\016.proto.PayloadB\030Z\026a"
  "pp/generated/go/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_internal_5fservices_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_data_5fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_internal_5fservices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internal_5fservices_2eproto = {
  false, false, 1549, descriptor_table_protodef_internal_5fservices_2eproto, "internal_services.proto", 
  &descriptor_table_internal_5fservices_2eproto_once, descriptor_table_internal_5fservices_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_internal_5fservices_2eproto::offsets,
  file_level_metadata_internal_5fservices_2eproto, file_level_enum_descriptors_internal_5fservices_2eproto, file_level_service_descriptors_internal_5fservices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_internal_5fservices_2eproto_getter() {
  return &descriptor_table_internal_5fservices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_internal_5fservices_2eproto(&descriptor_table_internal_5fservices_2eproto);
namespace proto {

// ===================================================================

class UploadFileRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadFileRequest>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UploadFileRequest::UploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.UploadFileRequest)
}
UploadFileRequest::UploadFileRequest(const UploadFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.UploadFileRequest)
}

inline void UploadFileRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadFileRequest::~UploadFileRequest() {
  // @@protoc_insertion_point(destructor:proto.UploadFileRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UploadFileRequest::ArenaDtor(void* object) {
  UploadFileRequest* _this = reinterpret_cast< UploadFileRequest* >(object);
  (void)_this;
}
void UploadFileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UploadFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadFileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.UploadFileRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UploadFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.UploadFileRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes body = 2;
  if (_internal_has_body()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UploadFileRequest)
  return target;
}

size_t UploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UploadFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes body = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadFileRequest::GetClassData() const { return &_class_data_; }

void UploadFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UploadFileRequest *>(to)->MergeFrom(
      static_cast<const UploadFileRequest &>(from));
}


void UploadFileRequest::MergeFrom(const UploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UploadFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_body(from._internal_body());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadFileRequest::CopyFrom(const UploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequest::IsInitialized() const {
  return true;
}

void UploadFileRequest::InternalSwap(UploadFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[0]);
}

// ===================================================================

class IngestReviewRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IngestReviewRequest>()._has_bits_);
  static const ::proto::Review& review(const IngestReviewRequest* msg);
  static void set_has_review(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Review&
IngestReviewRequest::_Internal::review(const IngestReviewRequest* msg) {
  return *msg->review_;
}
void IngestReviewRequest::clear_review() {
  if (review_ != nullptr) review_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IngestReviewRequest::IngestReviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.IngestReviewRequest)
}
IngestReviewRequest::IngestReviewRequest(const IngestReviewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_review()) {
    review_ = new ::proto::Review(*from.review_);
  } else {
    review_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.IngestReviewRequest)
}

inline void IngestReviewRequest::SharedCtor() {
review_ = nullptr;
}

IngestReviewRequest::~IngestReviewRequest() {
  // @@protoc_insertion_point(destructor:proto.IngestReviewRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IngestReviewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete review_;
}

void IngestReviewRequest::ArenaDtor(void* object) {
  IngestReviewRequest* _this = reinterpret_cast< IngestReviewRequest* >(object);
  (void)_this;
}
void IngestReviewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IngestReviewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IngestReviewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IngestReviewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(review_ != nullptr);
    review_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestReviewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Review review = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_review(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestReviewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.IngestReviewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Review review = 1;
  if (_internal_has_review()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::review(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IngestReviewRequest)
  return target;
}

size_t IngestReviewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IngestReviewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Review review = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *review_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestReviewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IngestReviewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestReviewRequest::GetClassData() const { return &_class_data_; }

void IngestReviewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IngestReviewRequest *>(to)->MergeFrom(
      static_cast<const IngestReviewRequest &>(from));
}


void IngestReviewRequest::MergeFrom(const IngestReviewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IngestReviewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_review()) {
    _internal_mutable_review()->::proto::Review::MergeFrom(from._internal_review());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestReviewRequest::CopyFrom(const IngestReviewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IngestReviewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestReviewRequest::IsInitialized() const {
  return true;
}

void IngestReviewRequest::InternalSwap(IngestReviewRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(review_, other->review_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestReviewRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[1]);
}

// ===================================================================

class IngestBatchRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IngestBatchRequest>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IngestBatchRequest::IngestBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.IngestBatchRequest)
}
IngestBatchRequest::IngestBatchRequest(const IngestBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.IngestBatchRequest)
}

inline void IngestBatchRequest::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IngestBatchRequest::~IngestBatchRequest() {
  // @@protoc_insertion_point(destructor:proto.IngestBatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IngestBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IngestBatchRequest::ArenaDtor(void* object) {
  IngestBatchRequest* _this = reinterpret_cast< IngestBatchRequest* >(object);
  (void)_this;
}
void IngestBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IngestBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IngestBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IngestBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IngestBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.IngestBatchRequest.filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IngestBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.IngestBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string filename = 1;
  if (_internal_has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.IngestBatchRequest.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IngestBatchRequest)
  return target;
}

size_t IngestBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IngestBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string filename = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IngestBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IngestBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IngestBatchRequest::GetClassData() const { return &_class_data_; }

void IngestBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IngestBatchRequest *>(to)->MergeFrom(
      static_cast<const IngestBatchRequest &>(from));
}


void IngestBatchRequest::MergeFrom(const IngestBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IngestBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filename()) {
    _internal_set_filename(from._internal_filename());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IngestBatchRequest::CopyFrom(const IngestBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IngestBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestBatchRequest::IsInitialized() const {
  return true;
}

void IngestBatchRequest::InternalSwap(IngestBatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IngestBatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[2]);
}

// ===================================================================

class CreateProjectionRequest::_Internal {
 public:
};

CreateProjectionRequest::CreateProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.CreateProjectionRequest)
}
CreateProjectionRequest::CreateProjectionRequest(const CreateProjectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CreateProjectionRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectionRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[3]);
}

// ===================================================================

class UploadProjectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadProjectionRequest>()._has_bits_);
  static const ::proto::Projection& projection(const UploadProjectionRequest* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::proto::MovieIndices& movieindices(const UploadProjectionRequest* msg);
  static void set_has_movieindices(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::proto::Projection&
UploadProjectionRequest::_Internal::projection(const UploadProjectionRequest* msg) {
  return *msg->projection_;
}
const ::proto::MovieIndices&
UploadProjectionRequest::_Internal::movieindices(const UploadProjectionRequest* msg) {
  return *msg->movieindices_;
}
void UploadProjectionRequest::clear_projection() {
  if (projection_ != nullptr) projection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UploadProjectionRequest::clear_movieindices() {
  if (movieindices_ != nullptr) movieindices_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UploadProjectionRequest::UploadProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.UploadProjectionRequest)
}
UploadProjectionRequest::UploadProjectionRequest(const UploadProjectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projection()) {
    projection_ = new ::proto::Projection(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  if (from._internal_has_movieindices()) {
    movieindices_ = new ::proto::MovieIndices(*from.movieindices_);
  } else {
    movieindices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.UploadProjectionRequest)
}

inline void UploadProjectionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&projection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movieindices_) -
    reinterpret_cast<char*>(&projection_)) + sizeof(movieindices_));
}

UploadProjectionRequest::~UploadProjectionRequest() {
  // @@protoc_insertion_point(destructor:proto.UploadProjectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UploadProjectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete projection_;
  if (this != internal_default_instance()) delete movieindices_;
}

void UploadProjectionRequest::ArenaDtor(void* object) {
  UploadProjectionRequest* _this = reinterpret_cast< UploadProjectionRequest* >(object);
  (void)_this;
}
void UploadProjectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadProjectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadProjectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UploadProjectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(projection_ != nullptr);
      projection_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(movieindices_ != nullptr);
      movieindices_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadProjectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Projection projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.MovieIndices movieIndices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movieindices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadProjectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UploadProjectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Projection projection = 1;
  if (_internal_has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projection(this), target, stream);
  }

  // optional .proto.MovieIndices movieIndices = 2;
  if (_internal_has_movieindices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movieindices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UploadProjectionRequest)
  return target;
}

size_t UploadProjectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UploadProjectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.Projection projection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *projection_);
    }

    // optional .proto.MovieIndices movieIndices = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movieindices_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadProjectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadProjectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadProjectionRequest::GetClassData() const { return &_class_data_; }

void UploadProjectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UploadProjectionRequest *>(to)->MergeFrom(
      static_cast<const UploadProjectionRequest &>(from));
}


void UploadProjectionRequest::MergeFrom(const UploadProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UploadProjectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_projection()->::proto::Projection::MergeFrom(from._internal_projection());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_movieindices()->::proto::MovieIndices::MergeFrom(from._internal_movieindices());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadProjectionRequest::CopyFrom(const UploadProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UploadProjectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadProjectionRequest::IsInitialized() const {
  return true;
}

void UploadProjectionRequest::InternalSwap(UploadProjectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadProjectionRequest, movieindices_)
      + sizeof(UploadProjectionRequest::movieindices_)
      - PROTOBUF_FIELD_OFFSET(UploadProjectionRequest, projection_)>(
          reinterpret_cast<char*>(&projection_),
          reinterpret_cast<char*>(&other->projection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadProjectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[4]);
}

// ===================================================================

class AppendProjectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendProjectionRequest>()._has_bits_);
  static const ::proto::Projection& projection(const AppendProjectionRequest* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Projection&
AppendProjectionRequest::_Internal::projection(const AppendProjectionRequest* msg) {
  return *msg->projection_;
}
void AppendProjectionRequest::clear_projection() {
  if (projection_ != nullptr) projection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AppendProjectionRequest::AppendProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.AppendProjectionRequest)
}
AppendProjectionRequest::AppendProjectionRequest(const AppendProjectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projection()) {
    projection_ = new ::proto::Projection(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.AppendProjectionRequest)
}

inline void AppendProjectionRequest::SharedCtor() {
projection_ = nullptr;
}

AppendProjectionRequest::~AppendProjectionRequest() {
  // @@protoc_insertion_point(destructor:proto.AppendProjectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendProjectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete projection_;
}

void AppendProjectionRequest::ArenaDtor(void* object) {
  AppendProjectionRequest* _this = reinterpret_cast< AppendProjectionRequest* >(object);
  (void)_this;
}
void AppendProjectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendProjectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendProjectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AppendProjectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(projection_ != nullptr);
    projection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendProjectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Projection projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendProjectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AppendProjectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Projection projection = 1;
  if (_internal_has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AppendProjectionRequest)
  return target;
}

size_t AppendProjectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AppendProjectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Projection projection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendProjectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendProjectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendProjectionRequest::GetClassData() const { return &_class_data_; }

void AppendProjectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendProjectionRequest *>(to)->MergeFrom(
      static_cast<const AppendProjectionRequest &>(from));
}


void AppendProjectionRequest::MergeFrom(const AppendProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AppendProjectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projection()) {
    _internal_mutable_projection()->::proto::Projection::MergeFrom(from._internal_projection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendProjectionRequest::CopyFrom(const AppendProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AppendProjectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendProjectionRequest::IsInitialized() const {
  return true;
}

void AppendProjectionRequest::InternalSwap(AppendProjectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(projection_, other->projection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendProjectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[5]);
}

// ===================================================================

class DownloadProjectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadProjectionRequest>()._has_bits_);
  static void set_has_shardid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DownloadProjectionRequest::DownloadProjectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.DownloadProjectionRequest)
}
DownloadProjectionRequest::DownloadProjectionRequest(const DownloadProjectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shardid_ = from.shardid_;
  // @@protoc_insertion_point(copy_constructor:proto.DownloadProjectionRequest)
}

inline void DownloadProjectionRequest::SharedCtor() {
shardid_ = 0;
}

DownloadProjectionRequest::~DownloadProjectionRequest() {
  // @@protoc_insertion_point(destructor:proto.DownloadProjectionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadProjectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DownloadProjectionRequest::ArenaDtor(void* object) {
  DownloadProjectionRequest* _this = reinterpret_cast< DownloadProjectionRequest* >(object);
  (void)_this;
}
void DownloadProjectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadProjectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadProjectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DownloadProjectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shardid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadProjectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 shardId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shardid(&has_bits);
          shardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadProjectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DownloadProjectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 shardId = 1;
  if (_internal_has_shardid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shardid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DownloadProjectionRequest)
  return target;
}

size_t DownloadProjectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DownloadProjectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 shardId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_shardid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadProjectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadProjectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadProjectionRequest::GetClassData() const { return &_class_data_; }

void DownloadProjectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DownloadProjectionRequest *>(to)->MergeFrom(
      static_cast<const DownloadProjectionRequest &>(from));
}


void DownloadProjectionRequest::MergeFrom(const DownloadProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DownloadProjectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shardid()) {
    _internal_set_shardid(from._internal_shardid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadProjectionRequest::CopyFrom(const DownloadProjectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DownloadProjectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadProjectionRequest::IsInitialized() const {
  return true;
}

void DownloadProjectionRequest::InternalSwap(DownloadProjectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shardid_, other->shardid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadProjectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[6]);
}

// ===================================================================

class DownloadMovieIndicesRequest::_Internal {
 public:
};

DownloadMovieIndicesRequest::DownloadMovieIndicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.DownloadMovieIndicesRequest)
}
DownloadMovieIndicesRequest::DownloadMovieIndicesRequest(const DownloadMovieIndicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DownloadMovieIndicesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadMovieIndicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadMovieIndicesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DownloadMovieIndicesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[7]);
}

// ===================================================================

class DownloadProjectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadProjectionResponse>()._has_bits_);
  static const ::proto::Projection& projection(const DownloadProjectionResponse* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::Projection&
DownloadProjectionResponse::_Internal::projection(const DownloadProjectionResponse* msg) {
  return *msg->projection_;
}
void DownloadProjectionResponse::clear_projection() {
  if (projection_ != nullptr) projection_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DownloadProjectionResponse::DownloadProjectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.DownloadProjectionResponse)
}
DownloadProjectionResponse::DownloadProjectionResponse(const DownloadProjectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projection()) {
    projection_ = new ::proto::Projection(*from.projection_);
  } else {
    projection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.DownloadProjectionResponse)
}

inline void DownloadProjectionResponse::SharedCtor() {
projection_ = nullptr;
}

DownloadProjectionResponse::~DownloadProjectionResponse() {
  // @@protoc_insertion_point(destructor:proto.DownloadProjectionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadProjectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete projection_;
}

void DownloadProjectionResponse::ArenaDtor(void* object) {
  DownloadProjectionResponse* _this = reinterpret_cast< DownloadProjectionResponse* >(object);
  (void)_this;
}
void DownloadProjectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadProjectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadProjectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DownloadProjectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(projection_ != nullptr);
    projection_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadProjectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.Projection projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadProjectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DownloadProjectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.Projection projection = 1;
  if (_internal_has_projection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projection(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DownloadProjectionResponse)
  return target;
}

size_t DownloadProjectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DownloadProjectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.Projection projection = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadProjectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadProjectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadProjectionResponse::GetClassData() const { return &_class_data_; }

void DownloadProjectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DownloadProjectionResponse *>(to)->MergeFrom(
      static_cast<const DownloadProjectionResponse &>(from));
}


void DownloadProjectionResponse::MergeFrom(const DownloadProjectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DownloadProjectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projection()) {
    _internal_mutable_projection()->::proto::Projection::MergeFrom(from._internal_projection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadProjectionResponse::CopyFrom(const DownloadProjectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DownloadProjectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadProjectionResponse::IsInitialized() const {
  return true;
}

void DownloadProjectionResponse::InternalSwap(DownloadProjectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(projection_, other->projection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadProjectionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[8]);
}

// ===================================================================

class DownloadMovieIndicesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadMovieIndicesResponse>()._has_bits_);
  static const ::proto::MovieIndices& movieindices(const DownloadMovieIndicesResponse* msg);
  static void set_has_movieindices(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::MovieIndices&
DownloadMovieIndicesResponse::_Internal::movieindices(const DownloadMovieIndicesResponse* msg) {
  return *msg->movieindices_;
}
void DownloadMovieIndicesResponse::clear_movieindices() {
  if (movieindices_ != nullptr) movieindices_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DownloadMovieIndicesResponse::DownloadMovieIndicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.DownloadMovieIndicesResponse)
}
DownloadMovieIndicesResponse::DownloadMovieIndicesResponse(const DownloadMovieIndicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movieindices()) {
    movieindices_ = new ::proto::MovieIndices(*from.movieindices_);
  } else {
    movieindices_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.DownloadMovieIndicesResponse)
}

inline void DownloadMovieIndicesResponse::SharedCtor() {
movieindices_ = nullptr;
}

DownloadMovieIndicesResponse::~DownloadMovieIndicesResponse() {
  // @@protoc_insertion_point(destructor:proto.DownloadMovieIndicesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DownloadMovieIndicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete movieindices_;
}

void DownloadMovieIndicesResponse::ArenaDtor(void* object) {
  DownloadMovieIndicesResponse* _this = reinterpret_cast< DownloadMovieIndicesResponse* >(object);
  (void)_this;
}
void DownloadMovieIndicesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadMovieIndicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DownloadMovieIndicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DownloadMovieIndicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(movieindices_ != nullptr);
    movieindices_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadMovieIndicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.MovieIndices movieIndices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movieindices(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownloadMovieIndicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DownloadMovieIndicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .proto.MovieIndices movieIndices = 1;
  if (_internal_has_movieindices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::movieindices(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DownloadMovieIndicesResponse)
  return target;
}

size_t DownloadMovieIndicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DownloadMovieIndicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.MovieIndices movieIndices = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movieindices_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownloadMovieIndicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DownloadMovieIndicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownloadMovieIndicesResponse::GetClassData() const { return &_class_data_; }

void DownloadMovieIndicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DownloadMovieIndicesResponse *>(to)->MergeFrom(
      static_cast<const DownloadMovieIndicesResponse &>(from));
}


void DownloadMovieIndicesResponse::MergeFrom(const DownloadMovieIndicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DownloadMovieIndicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_movieindices()) {
    _internal_mutable_movieindices()->::proto::MovieIndices::MergeFrom(from._internal_movieindices());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownloadMovieIndicesResponse::CopyFrom(const DownloadMovieIndicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DownloadMovieIndicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadMovieIndicesResponse::IsInitialized() const {
  return true;
}

void DownloadMovieIndicesResponse::InternalSwap(DownloadMovieIndicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(movieindices_, other->movieindices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadMovieIndicesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[9]);
}

// ===================================================================

class ScrapeRequest::_Internal {
 public:
};

ScrapeRequest::ScrapeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.ScrapeRequest)
}
ScrapeRequest::ScrapeRequest(const ScrapeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ScrapeRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScrapeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScrapeRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ScrapeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_internal_5fservices_2eproto_getter, &descriptor_table_internal_5fservices_2eproto_once,
      file_level_metadata_internal_5fservices_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::UploadFileRequest* Arena::CreateMaybeMessage< ::proto::UploadFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::UploadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::IngestReviewRequest* Arena::CreateMaybeMessage< ::proto::IngestReviewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::IngestReviewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::IngestBatchRequest* Arena::CreateMaybeMessage< ::proto::IngestBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::IngestBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CreateProjectionRequest* Arena::CreateMaybeMessage< ::proto::CreateProjectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CreateProjectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::UploadProjectionRequest* Arena::CreateMaybeMessage< ::proto::UploadProjectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::UploadProjectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AppendProjectionRequest* Arena::CreateMaybeMessage< ::proto::AppendProjectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AppendProjectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DownloadProjectionRequest* Arena::CreateMaybeMessage< ::proto::DownloadProjectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DownloadProjectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DownloadMovieIndicesRequest* Arena::CreateMaybeMessage< ::proto::DownloadMovieIndicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DownloadMovieIndicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DownloadProjectionResponse* Arena::CreateMaybeMessage< ::proto::DownloadProjectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DownloadProjectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DownloadMovieIndicesResponse* Arena::CreateMaybeMessage< ::proto::DownloadMovieIndicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DownloadMovieIndicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ScrapeRequest* Arena::CreateMaybeMessage< ::proto::ScrapeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScrapeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
