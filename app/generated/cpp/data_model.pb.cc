// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_model.proto

#include "data_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr Review::Review(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , movie_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rating_(0){}
struct ReviewDefaultTypeInternal {
  constexpr ReviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReviewDefaultTypeInternal() {}
  union {
    Review _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReviewDefaultTypeInternal _Review_default_instance_;
constexpr ReviewList::ReviewList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : review_(){}
struct ReviewListDefaultTypeInternal {
  constexpr ReviewListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReviewListDefaultTypeInternal() {}
  union {
    ReviewList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReviewListDefaultTypeInternal _ReviewList_default_instance_;
constexpr MovieIndices::MovieIndices(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MovieIndicesDefaultTypeInternal {
  constexpr MovieIndicesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieIndicesDefaultTypeInternal() {}
  union {
    MovieIndices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieIndicesDefaultTypeInternal _MovieIndices_default_instance_;
constexpr MovieIndicesEntry::MovieIndicesEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : movie_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct MovieIndicesEntryDefaultTypeInternal {
  constexpr MovieIndicesEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovieIndicesEntryDefaultTypeInternal() {}
  union {
    MovieIndicesEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovieIndicesEntryDefaultTypeInternal _MovieIndicesEntry_default_instance_;
constexpr Projection::Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectionDefaultTypeInternal {
  constexpr ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectionDefaultTypeInternal() {}
  union {
    Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectionDefaultTypeInternal _Projection_default_instance_;
constexpr ProjectionEntry::ProjectionEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rating_()
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ProjectionEntryDefaultTypeInternal {
  constexpr ProjectionEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectionEntryDefaultTypeInternal() {}
  union {
    ProjectionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectionEntryDefaultTypeInternal _ProjectionEntry_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_5fmodel_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_5fmodel_2eproto = nullptr;

const uint32_t TableStruct_data_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::Review, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Review, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Review, version_),
  PROTOBUF_FIELD_OFFSET(::proto::Review, author_),
  PROTOBUF_FIELD_OFFSET(::proto::Review, movie_),
  PROTOBUF_FIELD_OFFSET(::proto::Review, rating_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ReviewList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ReviewList, review_),
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndices, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndices, version_),
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndices, entry_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndicesEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndicesEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndicesEntry, movie_),
  PROTOBUF_FIELD_OFFSET(::proto::MovieIndicesEntry, index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::Projection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Projection, version_),
  PROTOBUF_FIELD_OFFSET(::proto::Projection, entry_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::ProjectionEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::ProjectionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ProjectionEntry, author_),
  PROTOBUF_FIELD_OFFSET(::proto::ProjectionEntry, rating_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::proto::Review)},
  { 14, -1, -1, sizeof(::proto::ReviewList)},
  { 21, 29, -1, sizeof(::proto::MovieIndices)},
  { 31, 39, -1, sizeof(::proto::MovieIndicesEntry)},
  { 41, 49, -1, sizeof(::proto::Projection)},
  { 51, 59, -1, sizeof(::proto::ProjectionEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Review_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ReviewList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MovieIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_MovieIndicesEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ProjectionEntry_default_instance_),
};

const char descriptor_table_protodef_data_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020data_model.proto\022\005proto\"\210\001\n\006Review\022\024\n\007"
  "version\030\001 \001(\tH\000\210\001\001\022\023\n\006author\030\002 \001(\tH\001\210\001\001\022"
  "\022\n\005movie\030\003 \001(\tH\002\210\001\001\022\023\n\006rating\030\004 \001(\002H\003\210\001\001"
  "B\n\n\010_versionB\t\n\007_authorB\010\n\006_movieB\t\n\007_ra"
  "ting\"+\n\nReviewList\022\035\n\006review\030\001 \003(\0132\r.pro"
  "to.Review\"Y\n\014MovieIndices\022\024\n\007version\030\001 \001"
  "(\tH\000\210\001\001\022\'\n\005entry\030\002 \003(\0132\030.proto.MovieIndi"
  "cesEntryB\n\n\010_version\"O\n\021MovieIndicesEntr"
  "y\022\022\n\005movie\030\001 \001(\tH\000\210\001\001\022\022\n\005index\030\002 \001(\005H\001\210\001"
  "\001B\010\n\006_movieB\010\n\006_index\"U\n\nProjection\022\024\n\007v"
  "ersion\030\001 \001(\tH\000\210\001\001\022%\n\005entry\030\002 \003(\0132\026.proto"
  ".ProjectionEntryB\n\n\010_version\"A\n\017Projecti"
  "onEntry\022\023\n\006author\030\001 \001(\tH\000\210\001\001\022\016\n\006rating\030\002"
  " \003(\002B\t\n\007_authorB\030Z\026app/generated/go/prot"
  "ob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fmodel_2eproto = {
  false, false, 569, descriptor_table_protodef_data_5fmodel_2eproto, "data_model.proto", 
  &descriptor_table_data_5fmodel_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_data_5fmodel_2eproto::offsets,
  file_level_metadata_data_5fmodel_2eproto, file_level_enum_descriptors_data_5fmodel_2eproto, file_level_service_descriptors_data_5fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_data_5fmodel_2eproto_getter() {
  return &descriptor_table_data_5fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_data_5fmodel_2eproto(&descriptor_table_data_5fmodel_2eproto);
namespace proto {

// ===================================================================

class Review::_Internal {
 public:
  using HasBits = decltype(std::declval<Review>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_movie(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Review::Review(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Review)
}
Review::Review(const Review& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArenaForAllocation());
  }
  movie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie()) {
    movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie(), 
      GetArenaForAllocation());
  }
  rating_ = from.rating_;
  // @@protoc_insertion_point(copy_constructor:proto.Review)
}

inline void Review::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
movie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rating_ = 0;
}

Review::~Review() {
  // @@protoc_insertion_point(destructor:proto.Review)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Review::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Review::ArenaDtor(void* object) {
  Review* _this = reinterpret_cast< Review* >(object);
  (void)_this;
}
void Review::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Review::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Review::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Review)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      author_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      movie_.ClearNonDefaultToEmpty();
    }
  }
  rating_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Review::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Review.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string author = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Review.author"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string movie = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_movie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Review.movie"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rating = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rating(&has_bits);
          rating_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Review::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Review)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string version = 1;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Review.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional string author = 2;
  if (_internal_has_author()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Review.author");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_author(), target);
  }

  // optional string movie = 3;
  if (_internal_has_movie()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_movie().data(), static_cast<int>(this->_internal_movie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Review.movie");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_movie(), target);
  }

  // optional float rating = 4;
  if (_internal_has_rating()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rating(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Review)
  return target;
}

size_t Review::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Review)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional string author = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author());
    }

    // optional string movie = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie());
    }

    // optional float rating = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Review::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Review::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Review::GetClassData() const { return &_class_data_; }

void Review::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Review *>(to)->MergeFrom(
      static_cast<const Review &>(from));
}


void Review::MergeFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Review)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_author(from._internal_author());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_movie(from._internal_movie());
    }
    if (cached_has_bits & 0x00000008u) {
      rating_ = from.rating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Review::CopyFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Review::IsInitialized() const {
  return true;
}

void Review::InternalSwap(Review* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_, lhs_arena,
      &other->movie_, rhs_arena
  );
  swap(rating_, other->rating_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Review::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[0]);
}

// ===================================================================

class ReviewList::_Internal {
 public:
};

ReviewList::ReviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  review_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.ReviewList)
}
ReviewList::ReviewList(const ReviewList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      review_(from.review_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ReviewList)
}

inline void ReviewList::SharedCtor() {
}

ReviewList::~ReviewList() {
  // @@protoc_insertion_point(destructor:proto.ReviewList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReviewList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReviewList::ArenaDtor(void* object) {
  ReviewList* _this = reinterpret_cast< ReviewList* >(object);
  (void)_this;
}
void ReviewList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReviewList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReviewList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ReviewList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  review_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReviewList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Review review = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_review(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReviewList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReviewList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Review review = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_review_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_review(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReviewList)
  return target;
}

size_t ReviewList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ReviewList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Review review = 1;
  total_size += 1UL * this->_internal_review_size();
  for (const auto& msg : this->review_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReviewList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReviewList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReviewList::GetClassData() const { return &_class_data_; }

void ReviewList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReviewList *>(to)->MergeFrom(
      static_cast<const ReviewList &>(from));
}


void ReviewList::MergeFrom(const ReviewList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ReviewList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  review_.MergeFrom(from.review_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReviewList::CopyFrom(const ReviewList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ReviewList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReviewList::IsInitialized() const {
  return true;
}

void ReviewList::InternalSwap(ReviewList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  review_.InternalSwap(&other->review_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReviewList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[1]);
}

// ===================================================================

class MovieIndices::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieIndices>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MovieIndices::MovieIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.MovieIndices)
}
MovieIndices::MovieIndices(const MovieIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.MovieIndices)
}

inline void MovieIndices::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MovieIndices::~MovieIndices() {
  // @@protoc_insertion_point(destructor:proto.MovieIndices)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovieIndices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MovieIndices::ArenaDtor(void* object) {
  MovieIndices* _this = reinterpret_cast< MovieIndices* >(object);
  (void)_this;
}
void MovieIndices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MovieIndices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MovieIndices.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.MovieIndicesEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieIndices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MovieIndices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string version = 1;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MovieIndices.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .proto.MovieIndicesEntry entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MovieIndices)
  return target;
}

size_t MovieIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MovieIndices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.MovieIndicesEntry entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieIndices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovieIndices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieIndices::GetClassData() const { return &_class_data_; }

void MovieIndices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovieIndices *>(to)->MergeFrom(
      static_cast<const MovieIndices &>(from));
}


void MovieIndices::MergeFrom(const MovieIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MovieIndices)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieIndices::CopyFrom(const MovieIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MovieIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieIndices::IsInitialized() const {
  return true;
}

void MovieIndices::InternalSwap(MovieIndices* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_.InternalSwap(&other->entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieIndices::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[2]);
}

// ===================================================================

class MovieIndicesEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MovieIndicesEntry>()._has_bits_);
  static void set_has_movie(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MovieIndicesEntry::MovieIndicesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.MovieIndicesEntry)
}
MovieIndicesEntry::MovieIndicesEntry(const MovieIndicesEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  movie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_movie()) {
    movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_movie(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:proto.MovieIndicesEntry)
}

inline void MovieIndicesEntry::SharedCtor() {
movie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = 0;
}

MovieIndicesEntry::~MovieIndicesEntry() {
  // @@protoc_insertion_point(destructor:proto.MovieIndicesEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MovieIndicesEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  movie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MovieIndicesEntry::ArenaDtor(void* object) {
  MovieIndicesEntry* _this = reinterpret_cast< MovieIndicesEntry* >(object);
  (void)_this;
}
void MovieIndicesEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieIndicesEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovieIndicesEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MovieIndicesEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    movie_.ClearNonDefaultToEmpty();
  }
  index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieIndicesEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string movie = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_movie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.MovieIndicesEntry.movie"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovieIndicesEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MovieIndicesEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string movie = 1;
  if (_internal_has_movie()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_movie().data(), static_cast<int>(this->_internal_movie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MovieIndicesEntry.movie");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_movie(), target);
  }

  // optional int32 index = 2;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MovieIndicesEntry)
  return target;
}

size_t MovieIndicesEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MovieIndicesEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string movie = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_movie());
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovieIndicesEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MovieIndicesEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovieIndicesEntry::GetClassData() const { return &_class_data_; }

void MovieIndicesEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MovieIndicesEntry *>(to)->MergeFrom(
      static_cast<const MovieIndicesEntry &>(from));
}


void MovieIndicesEntry::MergeFrom(const MovieIndicesEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MovieIndicesEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_movie(from._internal_movie());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovieIndicesEntry::CopyFrom(const MovieIndicesEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MovieIndicesEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieIndicesEntry::IsInitialized() const {
  return true;
}

void MovieIndicesEntry::InternalSwap(MovieIndicesEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &movie_, lhs_arena,
      &other->movie_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieIndicesEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[3]);
}

// ===================================================================

class Projection::_Internal {
 public:
  using HasBits = decltype(std::declval<Projection>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Projection::Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Projection)
}
Projection::Projection(const Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.Projection)
}

inline void Projection::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:proto.Projection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Projection::ArenaDtor(void* object) {
  Projection* _this = reinterpret_cast< Projection* >(object);
  (void)_this;
}
void Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Projection.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ProjectionEntry entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string version = 1;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Projection.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .proto.ProjectionEntry entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ProjectionEntry entry = 2;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Projection::GetClassData() const { return &_class_data_; }

void Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Projection *>(to)->MergeFrom(
      static_cast<const Projection &>(from));
}


void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::InternalSwap(Projection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_.InternalSwap(&other->entry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Projection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[4]);
}

// ===================================================================

class ProjectionEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectionEntry>()._has_bits_);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProjectionEntry::ProjectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rating_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.ProjectionEntry)
}
ProjectionEntry::ProjectionEntry(const ProjectionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rating_(from.rating_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.ProjectionEntry)
}

inline void ProjectionEntry::SharedCtor() {
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProjectionEntry::~ProjectionEntry() {
  // @@protoc_insertion_point(destructor:proto.ProjectionEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectionEntry::ArenaDtor(void* object) {
  ProjectionEntry* _this = reinterpret_cast< ProjectionEntry* >(object);
  (void)_this;
}
void ProjectionEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectionEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ProjectionEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rating_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    author_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectionEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.ProjectionEntry.author"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float rating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rating(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_rating(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectionEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ProjectionEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string author = 1;
  if (_internal_has_author()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.ProjectionEntry.author");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author(), target);
  }

  // repeated float rating = 2;
  if (this->_internal_rating_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rating(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ProjectionEntry)
  return target;
}

size_t ProjectionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ProjectionEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rating = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rating_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional string author = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectionEntry::GetClassData() const { return &_class_data_; }

void ProjectionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProjectionEntry *>(to)->MergeFrom(
      static_cast<const ProjectionEntry &>(from));
}


void ProjectionEntry::MergeFrom(const ProjectionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ProjectionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rating_.MergeFrom(from.rating_);
  if (from._internal_has_author()) {
    _internal_set_author(from._internal_author());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectionEntry::CopyFrom(const ProjectionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ProjectionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionEntry::IsInitialized() const {
  return true;
}

void ProjectionEntry::InternalSwap(ProjectionEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rating_.InternalSwap(&other->rating_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &author_, lhs_arena,
      &other->author_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectionEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_5fmodel_2eproto_getter, &descriptor_table_data_5fmodel_2eproto_once,
      file_level_metadata_data_5fmodel_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Review* Arena::CreateMaybeMessage< ::proto::Review >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Review >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ReviewList* Arena::CreateMaybeMessage< ::proto::ReviewList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ReviewList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MovieIndices* Arena::CreateMaybeMessage< ::proto::MovieIndices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MovieIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MovieIndicesEntry* Arena::CreateMaybeMessage< ::proto::MovieIndicesEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MovieIndicesEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Projection* Arena::CreateMaybeMessage< ::proto::Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ProjectionEntry* Arena::CreateMaybeMessage< ::proto::ProjectionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ProjectionEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
