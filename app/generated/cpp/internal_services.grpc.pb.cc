// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internal_services.proto

#include "internal_services.pb.h"
#include "internal_services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* ProjectionEngineService_method_names[] = {
  "/proto.ProjectionEngineService/CreateProjection",
  "/proto.ProjectionEngineService/CheckHealth",
};

std::unique_ptr< ProjectionEngineService::Stub> ProjectionEngineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectionEngineService::Stub> stub(new ProjectionEngineService::Stub(channel, options));
  return stub;
}

ProjectionEngineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProjection_(ProjectionEngineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(ProjectionEngineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectionEngineService::Stub::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProjection_, context, request, response);
}

void ProjectionEngineService::Stub::async::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProjection_, context, request, response, std::move(f));
}

void ProjectionEngineService::Stub::async::CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::PrepareAsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::CreateProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::AsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionEngineService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void ProjectionEngineService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void ProjectionEngineService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionEngineService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectionEngineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionEngineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionEngineService::Service, ::proto::CreateProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::CreateProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->CreateProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionEngineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionEngineService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionEngineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

ProjectionEngineService::Service::~Service() {
}

::grpc::Status ProjectionEngineService::Service::CreateProjection(::grpc::ServerContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionEngineService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ProjectionDatastoreService_method_names[] = {
  "/proto.ProjectionDatastoreService/UploadProjection",
  "/proto.ProjectionDatastoreService/AppendProjection",
  "/proto.ProjectionDatastoreService/DownloadProjection",
  "/proto.ProjectionDatastoreService/DownloadMovieIndices",
  "/proto.ProjectionDatastoreService/CheckHealth",
};

std::unique_ptr< ProjectionDatastoreService::Stub> ProjectionDatastoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectionDatastoreService::Stub> stub(new ProjectionDatastoreService::Stub(channel, options));
  return stub;
}

ProjectionDatastoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadProjection_(ProjectionDatastoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendProjection_(ProjectionDatastoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadProjection_(ProjectionDatastoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadMovieIndices_(ProjectionDatastoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(ProjectionDatastoreService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectionDatastoreService::Stub::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncUploadProjectionRaw(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::UploadProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncUploadProjectionRaw(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncAppendProjectionRaw(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::AppendProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncAppendProjectionRaw(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::proto::DownloadProjectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadProjectionResponse>* ProjectionDatastoreService::Stub::PrepareAsyncDownloadProjectionRaw(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DownloadProjectionResponse, ::proto::DownloadProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadProjectionResponse>* ProjectionDatastoreService::Stub::AsyncDownloadProjectionRaw(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::proto::DownloadMovieIndicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadMovieIndices_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMovieIndices_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMovieIndices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadMovieIndicesResponse>* ProjectionDatastoreService::Stub::PrepareAsyncDownloadMovieIndicesRaw(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DownloadMovieIndicesResponse, ::proto::DownloadMovieIndicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadMovieIndices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadMovieIndicesResponse>* ProjectionDatastoreService::Stub::AsyncDownloadMovieIndicesRaw(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadMovieIndicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectionDatastoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UploadProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->UploadProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::AppendProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->AppendProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DownloadProjectionRequest* req,
             ::proto::DownloadProjectionResponse* resp) {
               return service->DownloadProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DownloadMovieIndicesRequest* req,
             ::proto::DownloadMovieIndicesResponse* resp) {
               return service->DownloadMovieIndices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

ProjectionDatastoreService::Service::~Service() {
}

::grpc::Status ProjectionDatastoreService::Service::UploadProjection(::grpc::ServerContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::AppendProjection(::grpc::ServerContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::DownloadProjection(::grpc::ServerContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::DownloadMovieIndices(::grpc::ServerContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Scraper_method_names[] = {
  "/proto.Scraper/Scrape",
  "/proto.Scraper/CheckHealth",
};

std::unique_ptr< Scraper::Stub> Scraper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scraper::Stub> stub(new Scraper::Stub(channel, options));
  return stub;
}

Scraper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Scrape_(Scraper_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(Scraper_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Scraper::Stub::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Scrape_, context, request, response);
}

void Scraper::Stub::async::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scrape_, context, request, response, std::move(f));
}

void Scraper::Stub::async::Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Scrape_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::PrepareAsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::ScrapeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Scrape_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::AsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScrapeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Scraper::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void Scraper::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void Scraper::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* Scraper::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

Scraper::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scraper_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scraper::Service, ::proto::ScrapeRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scraper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::ScrapeRequest* req,
             ::proto::Payload* resp) {
               return service->Scrape(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scraper_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scraper::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Scraper::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

Scraper::Service::~Service() {
}

::grpc::Status Scraper::Service::Scrape(::grpc::ServerContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scraper::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

