// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `data_model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Review)
pub struct Review {
    // message fields
    // @@protoc_insertion_point(field:proto.Review.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.Review.author)
    pub author: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.Review.movie)
    pub movie: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.Review.rating)
    pub rating: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Review.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Review {
    fn default() -> &'a Review {
        <Review as ::protobuf::Message>::default_instance()
    }
}

impl Review {
    pub fn new() -> Review {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Review| { &m.version },
            |m: &mut Review| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "author",
            |m: &Review| { &m.author },
            |m: &mut Review| { &mut m.author },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie",
            |m: &Review| { &m.movie },
            |m: &mut Review| { &mut m.movie },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rating",
            |m: &Review| { &m.rating },
            |m: &mut Review| { &mut m.rating },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Review>(
            "Review",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Review {
    const NAME: &'static str = "Review";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.author = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.movie = ::std::option::Option::Some(is.read_string()?);
                },
                37 => {
                    self.rating = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.author.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.movie.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.rating {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.author.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.movie.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.rating {
            os.write_float(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Review {
        Review::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.author = ::std::option::Option::None;
        self.movie = ::std::option::Option::None;
        self.rating = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Review {
        static instance: Review = Review {
            version: ::std::option::Option::None,
            author: ::std::option::Option::None,
            movie: ::std::option::Option::None,
            rating: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Review {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Review").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Review {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Review {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ReviewList)
pub struct ReviewList {
    // message fields
    // @@protoc_insertion_point(field:proto.ReviewList.review)
    pub review: ::std::vec::Vec<Review>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ReviewList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReviewList {
    fn default() -> &'a ReviewList {
        <ReviewList as ::protobuf::Message>::default_instance()
    }
}

impl ReviewList {
    pub fn new() -> ReviewList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "review",
            |m: &ReviewList| { &m.review },
            |m: &mut ReviewList| { &mut m.review },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReviewList>(
            "ReviewList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReviewList {
    const NAME: &'static str = "ReviewList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.review.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.review {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.review {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReviewList {
        ReviewList::new()
    }

    fn clear(&mut self) {
        self.review.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReviewList {
        static instance: ReviewList = ReviewList {
            review: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReviewList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReviewList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReviewList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReviewList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.MovieIndices)
pub struct MovieIndices {
    // message fields
    // @@protoc_insertion_point(field:proto.MovieIndices.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.MovieIndices.entry)
    pub entry: ::std::vec::Vec<MovieIndicesEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.MovieIndices.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MovieIndices {
    fn default() -> &'a MovieIndices {
        <MovieIndices as ::protobuf::Message>::default_instance()
    }
}

impl MovieIndices {
    pub fn new() -> MovieIndices {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &MovieIndices| { &m.version },
            |m: &mut MovieIndices| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entry",
            |m: &MovieIndices| { &m.entry },
            |m: &mut MovieIndices| { &mut m.entry },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MovieIndices>(
            "MovieIndices",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MovieIndices {
    const NAME: &'static str = "MovieIndices";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.entry.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.entry {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MovieIndices {
        MovieIndices::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.entry.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MovieIndices {
        static instance: MovieIndices = MovieIndices {
            version: ::std::option::Option::None,
            entry: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MovieIndices {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MovieIndices").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MovieIndices {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovieIndices {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.MovieIndicesEntry)
pub struct MovieIndicesEntry {
    // message fields
    // @@protoc_insertion_point(field:proto.MovieIndicesEntry.movie)
    pub movie: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.MovieIndicesEntry.index)
    pub index: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.MovieIndicesEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MovieIndicesEntry {
    fn default() -> &'a MovieIndicesEntry {
        <MovieIndicesEntry as ::protobuf::Message>::default_instance()
    }
}

impl MovieIndicesEntry {
    pub fn new() -> MovieIndicesEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movie",
            |m: &MovieIndicesEntry| { &m.movie },
            |m: &mut MovieIndicesEntry| { &mut m.movie },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "index",
            |m: &MovieIndicesEntry| { &m.index },
            |m: &mut MovieIndicesEntry| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MovieIndicesEntry>(
            "MovieIndicesEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MovieIndicesEntry {
    const NAME: &'static str = "MovieIndicesEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.movie = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.index = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.movie.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.movie.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.index {
            os.write_int32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MovieIndicesEntry {
        MovieIndicesEntry::new()
    }

    fn clear(&mut self) {
        self.movie = ::std::option::Option::None;
        self.index = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MovieIndicesEntry {
        static instance: MovieIndicesEntry = MovieIndicesEntry {
            movie: ::std::option::Option::None,
            index: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MovieIndicesEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MovieIndicesEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MovieIndicesEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovieIndicesEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Projection)
pub struct Projection {
    // message fields
    // @@protoc_insertion_point(field:proto.Projection.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.Projection.entry)
    pub entry: ::std::vec::Vec<ProjectionEntry>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Projection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Projection {
    fn default() -> &'a Projection {
        <Projection as ::protobuf::Message>::default_instance()
    }
}

impl Projection {
    pub fn new() -> Projection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Projection| { &m.version },
            |m: &mut Projection| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entry",
            |m: &Projection| { &m.entry },
            |m: &mut Projection| { &mut m.entry },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Projection>(
            "Projection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Projection {
    const NAME: &'static str = "Projection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.entry.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.entry {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Projection {
        Projection::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.entry.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Projection {
        static instance: Projection = Projection {
            version: ::std::option::Option::None,
            entry: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Projection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Projection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Projection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Projection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ProjectionEntry)
pub struct ProjectionEntry {
    // message fields
    // @@protoc_insertion_point(field:proto.ProjectionEntry.author)
    pub author: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.ProjectionEntry.rating)
    pub rating: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ProjectionEntry.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProjectionEntry {
    fn default() -> &'a ProjectionEntry {
        <ProjectionEntry as ::protobuf::Message>::default_instance()
    }
}

impl ProjectionEntry {
    pub fn new() -> ProjectionEntry {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "author",
            |m: &ProjectionEntry| { &m.author },
            |m: &mut ProjectionEntry| { &mut m.author },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rating",
            |m: &ProjectionEntry| { &m.rating },
            |m: &mut ProjectionEntry| { &mut m.rating },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProjectionEntry>(
            "ProjectionEntry",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProjectionEntry {
    const NAME: &'static str = "ProjectionEntry";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.author = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    is.read_repeated_packed_float_into(&mut self.rating)?;
                },
                21 => {
                    self.rating.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.author.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += 5 * self.rating.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.author.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.rating {
            os.write_float(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProjectionEntry {
        ProjectionEntry::new()
    }

    fn clear(&mut self) {
        self.author = ::std::option::Option::None;
        self.rating.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProjectionEntry {
        static instance: ProjectionEntry = ProjectionEntry {
            author: ::std::option::Option::None,
            rating: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProjectionEntry {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProjectionEntry").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProjectionEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProjectionEntry {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10data_model.proto\x12\x05proto\"\xa8\x01\n\x06Review\x12\x1d\n\x07v\
    ersion\x18\x01\x20\x01(\tH\0R\x07version\x88\x01\x01\x12\x1b\n\x06author\
    \x18\x02\x20\x01(\tH\x01R\x06author\x88\x01\x01\x12\x19\n\x05movie\x18\
    \x03\x20\x01(\tH\x02R\x05movie\x88\x01\x01\x12\x1b\n\x06rating\x18\x04\
    \x20\x01(\x02H\x03R\x06rating\x88\x01\x01B\n\n\x08_versionB\t\n\x07_auth\
    orB\x08\n\x06_movieB\t\n\x07_rating\"3\n\nReviewList\x12%\n\x06review\
    \x18\x01\x20\x03(\x0b2\r.proto.ReviewR\x06review\"i\n\x0cMovieIndices\
    \x12\x1d\n\x07version\x18\x01\x20\x01(\tH\0R\x07version\x88\x01\x01\x12.\
    \n\x05entry\x18\x02\x20\x03(\x0b2\x18.proto.MovieIndicesEntryR\x05entryB\
    \n\n\x08_version\"]\n\x11MovieIndicesEntry\x12\x19\n\x05movie\x18\x01\
    \x20\x01(\tH\0R\x05movie\x88\x01\x01\x12\x19\n\x05index\x18\x02\x20\x01(\
    \x05H\x01R\x05index\x88\x01\x01B\x08\n\x06_movieB\x08\n\x06_index\"e\n\n\
    Projection\x12\x1d\n\x07version\x18\x01\x20\x01(\tH\0R\x07version\x88\
    \x01\x01\x12,\n\x05entry\x18\x02\x20\x03(\x0b2\x16.proto.ProjectionEntry\
    R\x05entryB\n\n\x08_version\"Q\n\x0fProjectionEntry\x12\x1b\n\x06author\
    \x18\x01\x20\x01(\tH\0R\x06author\x88\x01\x01\x12\x16\n\x06rating\x18\
    \x02\x20\x03(\x02R\x06ratingB\t\n\x07_authorB\x18Z\x16app/generated/go/p\
    rotoJ\xc2\x08\n\x06\x12\x04\0\0#\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\0\x0e\n\x08\n\x01\x08\x12\x03\x04\0-\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0-\n\n\n\x02\x04\0\x12\x04\x06\0\x0b\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x06\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\
    \x02\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x07\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x07\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\
    \x12\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x1c\x1d\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x08\x02\x1d\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x08\
    \x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x08\x0b\x11\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x08\x12\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x08\x1b\x1c\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x02\x1c\n\x0c\n\x05\x04\
    \0\x02\x02\x04\x12\x03\t\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x12\x17\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03\t\x1a\x1b\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\x02\
    \x1c\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03\n\x0b\x10\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\n\x11\
    \x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\n\x1a\x1b\n\n\n\x02\x04\x01\
    \x12\x04\r\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x12\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x0e\x02\x1d\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x0e\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0e\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0e\x12\x18\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0e\x1b\x1c\n\n\n\x02\x04\x02\x12\x04\x11\0\x14\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03\x11\x08\x14\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x02\
    \x1e\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x12\x02\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x12\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\
    \x12\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x12\x1c\x1d\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x13\x02'\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03\x13\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x13\x0b\x1c\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x13\x1d\"\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x13%&\n\n\n\x02\x04\x03\x12\x04\x16\0\x19\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x16\x08\x19\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x17\x02\
    \x1c\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x17\
    \x12\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x17\x1a\x1b\n\x0b\n\x04\
    \x04\x03\x02\x01\x12\x03\x18\x02\x1b\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\
    \x03\x18\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x18\x0b\x10\n\x0c\
    \n\x05\x04\x03\x02\x01\x01\x12\x03\x18\x11\x16\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\x18\x19\x1a\n\n\n\x02\x04\x04\x12\x04\x1b\0\x1e\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03\x1b\x08\x12\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \x1c\x02\x1e\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x03\x1c\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03\x1c\x12\x19\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1c\x1c\x1d\n\x0b\
    \n\x04\x04\x04\x02\x01\x12\x03\x1d\x02%\n\x0c\n\x05\x04\x04\x02\x01\x04\
    \x12\x03\x1d\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03\x1d\x0b\x1a\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1d\x1b\x20\n\x0c\n\x05\x04\x04\
    \x02\x01\x03\x12\x03\x1d#$\n\n\n\x02\x04\x05\x12\x04\x20\0#\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03\x20\x08\x17\n\x0b\n\x04\x04\x05\x02\0\x12\x03!\
    \x02\x1d\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03!\x02\n\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03!\x0b\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03!\
    \x12\x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03!\x1b\x1c\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03\"\x02\x1c\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03\"\
    \x02\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\"\x0b\x10\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03\"\x11\x17\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03\"\x1a\x1bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Review::generated_message_descriptor_data());
            messages.push(ReviewList::generated_message_descriptor_data());
            messages.push(MovieIndices::generated_message_descriptor_data());
            messages.push(MovieIndicesEntry::generated_message_descriptor_data());
            messages.push(Projection::generated_message_descriptor_data());
            messages.push(ProjectionEntry::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
