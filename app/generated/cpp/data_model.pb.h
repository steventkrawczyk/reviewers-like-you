// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fmodel_2eproto;
namespace proto {
class MovieIndices;
struct MovieIndicesDefaultTypeInternal;
extern MovieIndicesDefaultTypeInternal _MovieIndices_default_instance_;
class MovieIndicesEntry;
struct MovieIndicesEntryDefaultTypeInternal;
extern MovieIndicesEntryDefaultTypeInternal _MovieIndicesEntry_default_instance_;
class Projection;
struct ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
class ProjectionEntry;
struct ProjectionEntryDefaultTypeInternal;
extern ProjectionEntryDefaultTypeInternal _ProjectionEntry_default_instance_;
class Review;
struct ReviewDefaultTypeInternal;
extern ReviewDefaultTypeInternal _Review_default_instance_;
class ReviewList;
struct ReviewListDefaultTypeInternal;
extern ReviewListDefaultTypeInternal _ReviewList_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::MovieIndices* Arena::CreateMaybeMessage<::proto::MovieIndices>(Arena*);
template<> ::proto::MovieIndicesEntry* Arena::CreateMaybeMessage<::proto::MovieIndicesEntry>(Arena*);
template<> ::proto::Projection* Arena::CreateMaybeMessage<::proto::Projection>(Arena*);
template<> ::proto::ProjectionEntry* Arena::CreateMaybeMessage<::proto::ProjectionEntry>(Arena*);
template<> ::proto::Review* Arena::CreateMaybeMessage<::proto::Review>(Arena*);
template<> ::proto::ReviewList* Arena::CreateMaybeMessage<::proto::ReviewList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Review final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Review) */ {
 public:
  inline Review() : Review(nullptr) {}
  ~Review() override;
  explicit constexpr Review(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Review(const Review& from);
  Review(Review&& from) noexcept
    : Review() {
    *this = ::std::move(from);
  }

  inline Review& operator=(const Review& from) {
    CopyFrom(from);
    return *this;
  }
  inline Review& operator=(Review&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Review& default_instance() {
    return *internal_default_instance();
  }
  static inline const Review* internal_default_instance() {
    return reinterpret_cast<const Review*>(
               &_Review_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Review& a, Review& b) {
    a.Swap(&b);
  }
  inline void Swap(Review* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Review* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Review* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Review>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Review& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Review& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Review* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Review";
  }
  protected:
  explicit Review(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAuthorFieldNumber = 2,
    kMovieFieldNumber = 3,
    kRatingFieldNumber = 4,
  };
  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string author = 2;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // optional string movie = 3;
  bool has_movie() const;
  private:
  bool _internal_has_movie() const;
  public:
  void clear_movie();
  const std::string& movie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie();
  PROTOBUF_NODISCARD std::string* release_movie();
  void set_allocated_movie(std::string* movie);
  private:
  const std::string& _internal_movie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie(const std::string& value);
  std::string* _internal_mutable_movie();
  public:

  // optional float rating = 4;
  bool has_rating() const;
  private:
  bool _internal_has_rating() const;
  public:
  void clear_rating();
  float rating() const;
  void set_rating(float value);
  private:
  float _internal_rating() const;
  void _internal_set_rating(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Review)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_;
  float rating_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ReviewList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ReviewList) */ {
 public:
  inline ReviewList() : ReviewList(nullptr) {}
  ~ReviewList() override;
  explicit constexpr ReviewList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReviewList(const ReviewList& from);
  ReviewList(ReviewList&& from) noexcept
    : ReviewList() {
    *this = ::std::move(from);
  }

  inline ReviewList& operator=(const ReviewList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReviewList& operator=(ReviewList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReviewList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReviewList* internal_default_instance() {
    return reinterpret_cast<const ReviewList*>(
               &_ReviewList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReviewList& a, ReviewList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReviewList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReviewList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReviewList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReviewList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReviewList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReviewList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReviewList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ReviewList";
  }
  protected:
  explicit ReviewList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReviewFieldNumber = 1,
  };
  // repeated .proto.Review review = 1;
  int review_size() const;
  private:
  int _internal_review_size() const;
  public:
  void clear_review();
  ::proto::Review* mutable_review(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Review >*
      mutable_review();
  private:
  const ::proto::Review& _internal_review(int index) const;
  ::proto::Review* _internal_add_review();
  public:
  const ::proto::Review& review(int index) const;
  ::proto::Review* add_review();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Review >&
      review() const;

  // @@protoc_insertion_point(class_scope:proto.ReviewList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Review > review_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MovieIndices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MovieIndices) */ {
 public:
  inline MovieIndices() : MovieIndices(nullptr) {}
  ~MovieIndices() override;
  explicit constexpr MovieIndices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieIndices(const MovieIndices& from);
  MovieIndices(MovieIndices&& from) noexcept
    : MovieIndices() {
    *this = ::std::move(from);
  }

  inline MovieIndices& operator=(const MovieIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieIndices& operator=(MovieIndices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieIndices& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieIndices* internal_default_instance() {
    return reinterpret_cast<const MovieIndices*>(
               &_MovieIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MovieIndices& a, MovieIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieIndices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieIndices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovieIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovieIndices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieIndices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MovieIndices& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieIndices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MovieIndices";
  }
  protected:
  explicit MovieIndices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .proto.MovieIndicesEntry entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::proto::MovieIndicesEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MovieIndicesEntry >*
      mutable_entry();
  private:
  const ::proto::MovieIndicesEntry& _internal_entry(int index) const;
  ::proto::MovieIndicesEntry* _internal_add_entry();
  public:
  const ::proto::MovieIndicesEntry& entry(int index) const;
  ::proto::MovieIndicesEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MovieIndicesEntry >&
      entry() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:proto.MovieIndices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MovieIndicesEntry > entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MovieIndicesEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MovieIndicesEntry) */ {
 public:
  inline MovieIndicesEntry() : MovieIndicesEntry(nullptr) {}
  ~MovieIndicesEntry() override;
  explicit constexpr MovieIndicesEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovieIndicesEntry(const MovieIndicesEntry& from);
  MovieIndicesEntry(MovieIndicesEntry&& from) noexcept
    : MovieIndicesEntry() {
    *this = ::std::move(from);
  }

  inline MovieIndicesEntry& operator=(const MovieIndicesEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieIndicesEntry& operator=(MovieIndicesEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovieIndicesEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovieIndicesEntry* internal_default_instance() {
    return reinterpret_cast<const MovieIndicesEntry*>(
               &_MovieIndicesEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MovieIndicesEntry& a, MovieIndicesEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieIndicesEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieIndicesEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovieIndicesEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovieIndicesEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovieIndicesEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MovieIndicesEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieIndicesEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MovieIndicesEntry";
  }
  protected:
  explicit MovieIndicesEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovieFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // optional string movie = 1;
  bool has_movie() const;
  private:
  bool _internal_has_movie() const;
  public:
  void clear_movie();
  const std::string& movie() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_movie(ArgT0&& arg0, ArgT... args);
  std::string* mutable_movie();
  PROTOBUF_NODISCARD std::string* release_movie();
  void set_allocated_movie(std::string* movie);
  private:
  const std::string& _internal_movie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_movie(const std::string& value);
  std::string* _internal_mutable_movie();
  public:

  // optional int32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.MovieIndicesEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movie_;
  int32_t index_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Projection) */ {
 public:
  inline Projection() : Projection(nullptr) {}
  ~Projection() override;
  explicit constexpr Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Projection(const Projection& from);
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projection& operator=(Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Projection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Projection";
  }
  protected:
  explicit Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .proto.ProjectionEntry entry = 2;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::proto::ProjectionEntry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectionEntry >*
      mutable_entry();
  private:
  const ::proto::ProjectionEntry& _internal_entry(int index) const;
  ::proto::ProjectionEntry* _internal_add_entry();
  public:
  const ::proto::ProjectionEntry& entry(int index) const;
  ::proto::ProjectionEntry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectionEntry >&
      entry() const;

  // optional string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:proto.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectionEntry > entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ProjectionEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ProjectionEntry) */ {
 public:
  inline ProjectionEntry() : ProjectionEntry(nullptr) {}
  ~ProjectionEntry() override;
  explicit constexpr ProjectionEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectionEntry(const ProjectionEntry& from);
  ProjectionEntry(ProjectionEntry&& from) noexcept
    : ProjectionEntry() {
    *this = ::std::move(from);
  }

  inline ProjectionEntry& operator=(const ProjectionEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectionEntry& operator=(ProjectionEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectionEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectionEntry* internal_default_instance() {
    return reinterpret_cast<const ProjectionEntry*>(
               &_ProjectionEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProjectionEntry& a, ProjectionEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectionEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectionEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectionEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectionEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectionEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProjectionEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectionEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ProjectionEntry";
  }
  protected:
  explicit ProjectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatingFieldNumber = 2,
    kAuthorFieldNumber = 1,
  };
  // repeated float rating = 2;
  int rating_size() const;
  private:
  int _internal_rating_size() const;
  public:
  void clear_rating();
  private:
  float _internal_rating(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rating() const;
  void _internal_add_rating(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rating();
  public:
  float rating(int index) const;
  void set_rating(int index, float value);
  void add_rating(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rating() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rating();

  // optional string author = 1;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // @@protoc_insertion_point(class_scope:proto.ProjectionEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rating_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  friend struct ::TableStruct_data_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Review

// optional string version = 1;
inline bool Review::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Review::has_version() const {
  return _internal_has_version();
}
inline void Review::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Review::version() const {
  // @@protoc_insertion_point(field_get:proto.Review.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Review::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Review.version)
}
inline std::string* Review::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:proto.Review.version)
  return _s;
}
inline const std::string& Review::_internal_version() const {
  return version_.Get();
}
inline void Review::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Review::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Review::release_version() {
  // @@protoc_insertion_point(field_release:proto.Review.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Review::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Review.version)
}

// optional string author = 2;
inline bool Review::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Review::has_author() const {
  return _internal_has_author();
}
inline void Review::clear_author() {
  author_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Review::author() const {
  // @@protoc_insertion_point(field_get:proto.Review.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Review::set_author(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Review.author)
}
inline std::string* Review::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.Review.author)
  return _s;
}
inline const std::string& Review::_internal_author() const {
  return author_.Get();
}
inline void Review::_internal_set_author(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Review::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000002u;
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Review::release_author() {
  // @@protoc_insertion_point(field_release:proto.Review.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = author_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Review::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Review.author)
}

// optional string movie = 3;
inline bool Review::_internal_has_movie() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Review::has_movie() const {
  return _internal_has_movie();
}
inline void Review::clear_movie() {
  movie_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Review::movie() const {
  // @@protoc_insertion_point(field_get:proto.Review.movie)
  return _internal_movie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Review::set_movie(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Review.movie)
}
inline std::string* Review::mutable_movie() {
  std::string* _s = _internal_mutable_movie();
  // @@protoc_insertion_point(field_mutable:proto.Review.movie)
  return _s;
}
inline const std::string& Review::_internal_movie() const {
  return movie_.Get();
}
inline void Review::_internal_set_movie(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Review::_internal_mutable_movie() {
  _has_bits_[0] |= 0x00000004u;
  return movie_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Review::release_movie() {
  // @@protoc_insertion_point(field_release:proto.Review.movie)
  if (!_internal_has_movie()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = movie_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Review::set_allocated_movie(std::string* movie) {
  if (movie != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  movie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Review.movie)
}

// optional float rating = 4;
inline bool Review::_internal_has_rating() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Review::has_rating() const {
  return _internal_has_rating();
}
inline void Review::clear_rating() {
  rating_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Review::_internal_rating() const {
  return rating_;
}
inline float Review::rating() const {
  // @@protoc_insertion_point(field_get:proto.Review.rating)
  return _internal_rating();
}
inline void Review::_internal_set_rating(float value) {
  _has_bits_[0] |= 0x00000008u;
  rating_ = value;
}
inline void Review::set_rating(float value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:proto.Review.rating)
}

// -------------------------------------------------------------------

// ReviewList

// repeated .proto.Review review = 1;
inline int ReviewList::_internal_review_size() const {
  return review_.size();
}
inline int ReviewList::review_size() const {
  return _internal_review_size();
}
inline void ReviewList::clear_review() {
  review_.Clear();
}
inline ::proto::Review* ReviewList::mutable_review(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ReviewList.review)
  return review_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Review >*
ReviewList::mutable_review() {
  // @@protoc_insertion_point(field_mutable_list:proto.ReviewList.review)
  return &review_;
}
inline const ::proto::Review& ReviewList::_internal_review(int index) const {
  return review_.Get(index);
}
inline const ::proto::Review& ReviewList::review(int index) const {
  // @@protoc_insertion_point(field_get:proto.ReviewList.review)
  return _internal_review(index);
}
inline ::proto::Review* ReviewList::_internal_add_review() {
  return review_.Add();
}
inline ::proto::Review* ReviewList::add_review() {
  ::proto::Review* _add = _internal_add_review();
  // @@protoc_insertion_point(field_add:proto.ReviewList.review)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Review >&
ReviewList::review() const {
  // @@protoc_insertion_point(field_list:proto.ReviewList.review)
  return review_;
}

// -------------------------------------------------------------------

// MovieIndices

// optional string version = 1;
inline bool MovieIndices::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MovieIndices::has_version() const {
  return _internal_has_version();
}
inline void MovieIndices::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MovieIndices::version() const {
  // @@protoc_insertion_point(field_get:proto.MovieIndices.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MovieIndices::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MovieIndices.version)
}
inline std::string* MovieIndices::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:proto.MovieIndices.version)
  return _s;
}
inline const std::string& MovieIndices::_internal_version() const {
  return version_.Get();
}
inline void MovieIndices::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MovieIndices::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MovieIndices::release_version() {
  // @@protoc_insertion_point(field_release:proto.MovieIndices.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MovieIndices::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MovieIndices.version)
}

// repeated .proto.MovieIndicesEntry entry = 2;
inline int MovieIndices::_internal_entry_size() const {
  return entry_.size();
}
inline int MovieIndices::entry_size() const {
  return _internal_entry_size();
}
inline void MovieIndices::clear_entry() {
  entry_.Clear();
}
inline ::proto::MovieIndicesEntry* MovieIndices::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:proto.MovieIndices.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MovieIndicesEntry >*
MovieIndices::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:proto.MovieIndices.entry)
  return &entry_;
}
inline const ::proto::MovieIndicesEntry& MovieIndices::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::proto::MovieIndicesEntry& MovieIndices::entry(int index) const {
  // @@protoc_insertion_point(field_get:proto.MovieIndices.entry)
  return _internal_entry(index);
}
inline ::proto::MovieIndicesEntry* MovieIndices::_internal_add_entry() {
  return entry_.Add();
}
inline ::proto::MovieIndicesEntry* MovieIndices::add_entry() {
  ::proto::MovieIndicesEntry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:proto.MovieIndices.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::MovieIndicesEntry >&
MovieIndices::entry() const {
  // @@protoc_insertion_point(field_list:proto.MovieIndices.entry)
  return entry_;
}

// -------------------------------------------------------------------

// MovieIndicesEntry

// optional string movie = 1;
inline bool MovieIndicesEntry::_internal_has_movie() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MovieIndicesEntry::has_movie() const {
  return _internal_has_movie();
}
inline void MovieIndicesEntry::clear_movie() {
  movie_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MovieIndicesEntry::movie() const {
  // @@protoc_insertion_point(field_get:proto.MovieIndicesEntry.movie)
  return _internal_movie();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MovieIndicesEntry::set_movie(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MovieIndicesEntry.movie)
}
inline std::string* MovieIndicesEntry::mutable_movie() {
  std::string* _s = _internal_mutable_movie();
  // @@protoc_insertion_point(field_mutable:proto.MovieIndicesEntry.movie)
  return _s;
}
inline const std::string& MovieIndicesEntry::_internal_movie() const {
  return movie_.Get();
}
inline void MovieIndicesEntry::_internal_set_movie(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  movie_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MovieIndicesEntry::_internal_mutable_movie() {
  _has_bits_[0] |= 0x00000001u;
  return movie_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MovieIndicesEntry::release_movie() {
  // @@protoc_insertion_point(field_release:proto.MovieIndicesEntry.movie)
  if (!_internal_has_movie()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = movie_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MovieIndicesEntry::set_allocated_movie(std::string* movie) {
  if (movie != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  movie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movie,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (movie_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    movie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MovieIndicesEntry.movie)
}

// optional int32 index = 2;
inline bool MovieIndicesEntry::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MovieIndicesEntry::has_index() const {
  return _internal_has_index();
}
inline void MovieIndicesEntry::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t MovieIndicesEntry::_internal_index() const {
  return index_;
}
inline int32_t MovieIndicesEntry::index() const {
  // @@protoc_insertion_point(field_get:proto.MovieIndicesEntry.index)
  return _internal_index();
}
inline void MovieIndicesEntry::_internal_set_index(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void MovieIndicesEntry::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:proto.MovieIndicesEntry.index)
}

// -------------------------------------------------------------------

// Projection

// optional string version = 1;
inline bool Projection::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Projection::has_version() const {
  return _internal_has_version();
}
inline void Projection::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Projection::version() const {
  // @@protoc_insertion_point(field_get:proto.Projection.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Projection::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Projection.version)
}
inline std::string* Projection::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:proto.Projection.version)
  return _s;
}
inline const std::string& Projection::_internal_version() const {
  return version_.Get();
}
inline void Projection::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Projection::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Projection::release_version() {
  // @@protoc_insertion_point(field_release:proto.Projection.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Projection::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Projection.version)
}

// repeated .proto.ProjectionEntry entry = 2;
inline int Projection::_internal_entry_size() const {
  return entry_.size();
}
inline int Projection::entry_size() const {
  return _internal_entry_size();
}
inline void Projection::clear_entry() {
  entry_.Clear();
}
inline ::proto::ProjectionEntry* Projection::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Projection.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectionEntry >*
Projection::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:proto.Projection.entry)
  return &entry_;
}
inline const ::proto::ProjectionEntry& Projection::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::proto::ProjectionEntry& Projection::entry(int index) const {
  // @@protoc_insertion_point(field_get:proto.Projection.entry)
  return _internal_entry(index);
}
inline ::proto::ProjectionEntry* Projection::_internal_add_entry() {
  return entry_.Add();
}
inline ::proto::ProjectionEntry* Projection::add_entry() {
  ::proto::ProjectionEntry* _add = _internal_add_entry();
  // @@protoc_insertion_point(field_add:proto.Projection.entry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectionEntry >&
Projection::entry() const {
  // @@protoc_insertion_point(field_list:proto.Projection.entry)
  return entry_;
}

// -------------------------------------------------------------------

// ProjectionEntry

// optional string author = 1;
inline bool ProjectionEntry::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProjectionEntry::has_author() const {
  return _internal_has_author();
}
inline void ProjectionEntry::clear_author() {
  author_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProjectionEntry::author() const {
  // @@protoc_insertion_point(field_get:proto.ProjectionEntry.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectionEntry::set_author(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectionEntry.author)
}
inline std::string* ProjectionEntry::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.ProjectionEntry.author)
  return _s;
}
inline const std::string& ProjectionEntry::_internal_author() const {
  return author_.Get();
}
inline void ProjectionEntry::_internal_set_author(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectionEntry::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000001u;
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectionEntry::release_author() {
  // @@protoc_insertion_point(field_release:proto.ProjectionEntry.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = author_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ProjectionEntry::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectionEntry.author)
}

// repeated float rating = 2;
inline int ProjectionEntry::_internal_rating_size() const {
  return rating_.size();
}
inline int ProjectionEntry::rating_size() const {
  return _internal_rating_size();
}
inline void ProjectionEntry::clear_rating() {
  rating_.Clear();
}
inline float ProjectionEntry::_internal_rating(int index) const {
  return rating_.Get(index);
}
inline float ProjectionEntry::rating(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProjectionEntry.rating)
  return _internal_rating(index);
}
inline void ProjectionEntry::set_rating(int index, float value) {
  rating_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ProjectionEntry.rating)
}
inline void ProjectionEntry::_internal_add_rating(float value) {
  rating_.Add(value);
}
inline void ProjectionEntry::add_rating(float value) {
  _internal_add_rating(value);
  // @@protoc_insertion_point(field_add:proto.ProjectionEntry.rating)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ProjectionEntry::_internal_rating() const {
  return rating_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ProjectionEntry::rating() const {
  // @@protoc_insertion_point(field_list:proto.ProjectionEntry.rating)
  return _internal_rating();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ProjectionEntry::_internal_mutable_rating() {
  return &rating_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ProjectionEntry::mutable_rating() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProjectionEntry.rating)
  return _internal_mutable_rating();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fmodel_2eproto
