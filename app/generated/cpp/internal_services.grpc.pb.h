// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internal_services.proto
#ifndef GRPC_internal_5fservices_2eproto__INCLUDED
#define GRPC_internal_5fservices_2eproto__INCLUDED

#include "internal_services.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {

class ProjectionEngineService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.ProjectionEngineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::proto::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> AsyncCreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(AsyncCreateProjectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> PrepareAsyncCreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(PrepareAsyncCreateProjectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* AsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* PrepareAsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::proto::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> AsyncCreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(AsyncCreateProjectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> PrepareAsyncCreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(PrepareAsyncCreateProjectionRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) override;
      void CreateProjection(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* AsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* PrepareAsyncCreateProjectionRaw(::grpc::ClientContext* context, const ::proto::CreateProjectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProjection_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHealth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateProjection(::grpc::ServerContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProjection() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProjection(::grpc::ServerContext* context, ::proto::CreateProjectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::proto::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProjection<WithAsyncMethod_CheckHealth<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProjection() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::CreateProjectionRequest, ::proto::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::CreateProjectionRequest* request, ::proto::Payload* response) { return this->CreateProjection(context, request, response); }));}
    void SetMessageAllocatorFor_CreateProjection(
        ::grpc::MessageAllocator< ::proto::CreateProjectionRequest, ::proto::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::CreateProjectionRequest, ::proto::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProjection(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) { return this->CheckHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHealth(
        ::grpc::MessageAllocator< ::proto::HealthCheckRequest, ::proto::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateProjection<WithCallbackMethod_CheckHealth<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProjection() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProjection() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProjection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProjection() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateProjection(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProjection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProjection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProjection() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::CreateProjectionRequest, ::proto::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::CreateProjectionRequest, ::proto::Payload>* streamer) {
                       return this->StreamedCreateProjection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateProjection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProjection(::grpc::ServerContext* /*context*/, const ::proto::CreateProjectionRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProjection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::CreateProjectionRequest,::proto::Payload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::HealthCheckRequest, ::proto::Payload>* streamer) {
                       return this->StreamedCheckHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::HealthCheckRequest,::proto::Payload>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProjection<WithStreamedUnaryMethod_CheckHealth<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProjection<WithStreamedUnaryMethod_CheckHealth<Service > > StreamedService;
};

class Scraper final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.Scraper";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::proto::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> AsyncScrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(AsyncScrapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> PrepareAsyncScrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(PrepareAsyncScrapeRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* AsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* PrepareAsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::proto::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> AsyncScrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(AsyncScrapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> PrepareAsyncScrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(PrepareAsyncScrapeRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> AsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(AsyncCheckHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>> PrepareAsyncCheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Payload>>(PrepareAsyncCheckHealthRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) override;
      void Scrape(::grpc::ClientContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)>) override;
      void CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* AsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* PrepareAsyncScrapeRaw(::grpc::ClientContext* context, const ::proto::ScrapeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Payload>* PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Scrape_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckHealth_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Scrape(::grpc::ServerContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Scrape() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScrape(::grpc::ServerContext* context, ::proto::ScrapeRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::proto::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::Payload>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Scrape<WithAsyncMethod_CheckHealth<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Scrape() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::ScrapeRequest, ::proto::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::ScrapeRequest* request, ::proto::Payload* response) { return this->Scrape(context, request, response); }));}
    void SetMessageAllocatorFor_Scrape(
        ::grpc::MessageAllocator< ::proto::ScrapeRequest, ::proto::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::ScrapeRequest, ::proto::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Scrape(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) { return this->CheckHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckHealth(
        ::grpc::MessageAllocator< ::proto::HealthCheckRequest, ::proto::Payload>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::HealthCheckRequest, ::proto::Payload>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Scrape<WithCallbackMethod_CheckHealth<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Scrape() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Scrape() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScrape(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Scrape() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Scrape(context, request, response); }));
    }
    ~WithRawCallbackMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Scrape(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckHealth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Scrape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Scrape() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::ScrapeRequest, ::proto::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::ScrapeRequest, ::proto::Payload>* streamer) {
                       return this->StreamedScrape(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Scrape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Scrape(::grpc::ServerContext* /*context*/, const ::proto::ScrapeRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScrape(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::ScrapeRequest,::proto::Payload>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::HealthCheckRequest, ::proto::Payload>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::HealthCheckRequest, ::proto::Payload>* streamer) {
                       return this->StreamedCheckHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* /*context*/, const ::proto::HealthCheckRequest* /*request*/, ::proto::Payload* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::HealthCheckRequest,::proto::Payload>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Scrape<WithStreamedUnaryMethod_CheckHealth<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Scrape<WithStreamedUnaryMethod_CheckHealth<Service > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_internal_5fservices_2eproto__INCLUDED
