// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_services.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fservices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fservices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fservices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fservices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fservices_2eproto;
namespace proto {
class FindAverageVectorRequest;
struct FindAverageVectorRequestDefaultTypeInternal;
extern FindAverageVectorRequestDefaultTypeInternal _FindAverageVectorRequest_default_instance_;
class FindAverageVectorResponse;
struct FindAverageVectorResponseDefaultTypeInternal;
extern FindAverageVectorResponseDefaultTypeInternal _FindAverageVectorResponse_default_instance_;
class GetClosestNeighborRequest;
struct GetClosestNeighborRequestDefaultTypeInternal;
extern GetClosestNeighborRequestDefaultTypeInternal _GetClosestNeighborRequest_default_instance_;
class GetClosestNeighborResponse;
struct GetClosestNeighborResponseDefaultTypeInternal;
extern GetClosestNeighborResponseDefaultTypeInternal _GetClosestNeighborResponse_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::FindAverageVectorRequest* Arena::CreateMaybeMessage<::proto::FindAverageVectorRequest>(Arena*);
template<> ::proto::FindAverageVectorResponse* Arena::CreateMaybeMessage<::proto::FindAverageVectorResponse>(Arena*);
template<> ::proto::GetClosestNeighborRequest* Arena::CreateMaybeMessage<::proto::GetClosestNeighborRequest>(Arena*);
template<> ::proto::GetClosestNeighborResponse* Arena::CreateMaybeMessage<::proto::GetClosestNeighborResponse>(Arena*);
template<> ::proto::Vector* Arena::CreateMaybeMessage<::proto::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit constexpr Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated float entry = 1;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  private:
  float _internal_entry(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_entry() const;
  void _internal_add_entry(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_entry();
  public:
  float entry(int index) const;
  void set_entry(int index, float value);
  void add_entry(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      entry() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_entry();

  // @@protoc_insertion_point(class_scope:proto.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fservices_2eproto;
};
// -------------------------------------------------------------------

class GetClosestNeighborRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetClosestNeighborRequest) */ {
 public:
  inline GetClosestNeighborRequest() : GetClosestNeighborRequest(nullptr) {}
  ~GetClosestNeighborRequest() override;
  explicit constexpr GetClosestNeighborRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClosestNeighborRequest(const GetClosestNeighborRequest& from);
  GetClosestNeighborRequest(GetClosestNeighborRequest&& from) noexcept
    : GetClosestNeighborRequest() {
    *this = ::std::move(from);
  }

  inline GetClosestNeighborRequest& operator=(const GetClosestNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClosestNeighborRequest& operator=(GetClosestNeighborRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClosestNeighborRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClosestNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const GetClosestNeighborRequest*>(
               &_GetClosestNeighborRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetClosestNeighborRequest& a, GetClosestNeighborRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClosestNeighborRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClosestNeighborRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClosestNeighborRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClosestNeighborRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClosestNeighborRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClosestNeighborRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClosestNeighborRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetClosestNeighborRequest";
  }
  protected:
  explicit GetClosestNeighborRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // optional .proto.Vector vector = 1;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::proto::Vector& vector() const;
  PROTOBUF_NODISCARD ::proto::Vector* release_vector();
  ::proto::Vector* mutable_vector();
  void set_allocated_vector(::proto::Vector* vector);
  private:
  const ::proto::Vector& _internal_vector() const;
  ::proto::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::proto::Vector* vector);
  ::proto::Vector* unsafe_arena_release_vector();

  // @@protoc_insertion_point(class_scope:proto.GetClosestNeighborRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Vector* vector_;
  friend struct ::TableStruct_backend_5fservices_2eproto;
};
// -------------------------------------------------------------------

class GetClosestNeighborResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetClosestNeighborResponse) */ {
 public:
  inline GetClosestNeighborResponse() : GetClosestNeighborResponse(nullptr) {}
  ~GetClosestNeighborResponse() override;
  explicit constexpr GetClosestNeighborResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClosestNeighborResponse(const GetClosestNeighborResponse& from);
  GetClosestNeighborResponse(GetClosestNeighborResponse&& from) noexcept
    : GetClosestNeighborResponse() {
    *this = ::std::move(from);
  }

  inline GetClosestNeighborResponse& operator=(const GetClosestNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClosestNeighborResponse& operator=(GetClosestNeighborResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClosestNeighborResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClosestNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const GetClosestNeighborResponse*>(
               &_GetClosestNeighborResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetClosestNeighborResponse& a, GetClosestNeighborResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClosestNeighborResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClosestNeighborResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClosestNeighborResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClosestNeighborResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClosestNeighborResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClosestNeighborResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClosestNeighborResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetClosestNeighborResponse";
  }
  protected:
  explicit GetClosestNeighborResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 1,
  };
  // optional string author = 1;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // @@protoc_insertion_point(class_scope:proto.GetClosestNeighborResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  friend struct ::TableStruct_backend_5fservices_2eproto;
};
// -------------------------------------------------------------------

class FindAverageVectorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:proto.FindAverageVectorRequest) */ {
 public:
  inline FindAverageVectorRequest() : FindAverageVectorRequest(nullptr) {}
  explicit constexpr FindAverageVectorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindAverageVectorRequest(const FindAverageVectorRequest& from);
  FindAverageVectorRequest(FindAverageVectorRequest&& from) noexcept
    : FindAverageVectorRequest() {
    *this = ::std::move(from);
  }

  inline FindAverageVectorRequest& operator=(const FindAverageVectorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindAverageVectorRequest& operator=(FindAverageVectorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindAverageVectorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindAverageVectorRequest* internal_default_instance() {
    return reinterpret_cast<const FindAverageVectorRequest*>(
               &_FindAverageVectorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindAverageVectorRequest& a, FindAverageVectorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindAverageVectorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindAverageVectorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindAverageVectorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindAverageVectorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FindAverageVectorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FindAverageVectorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FindAverageVectorRequest";
  }
  protected:
  explicit FindAverageVectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.FindAverageVectorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fservices_2eproto;
};
// -------------------------------------------------------------------

class FindAverageVectorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FindAverageVectorResponse) */ {
 public:
  inline FindAverageVectorResponse() : FindAverageVectorResponse(nullptr) {}
  ~FindAverageVectorResponse() override;
  explicit constexpr FindAverageVectorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindAverageVectorResponse(const FindAverageVectorResponse& from);
  FindAverageVectorResponse(FindAverageVectorResponse&& from) noexcept
    : FindAverageVectorResponse() {
    *this = ::std::move(from);
  }

  inline FindAverageVectorResponse& operator=(const FindAverageVectorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindAverageVectorResponse& operator=(FindAverageVectorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindAverageVectorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindAverageVectorResponse* internal_default_instance() {
    return reinterpret_cast<const FindAverageVectorResponse*>(
               &_FindAverageVectorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindAverageVectorResponse& a, FindAverageVectorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindAverageVectorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindAverageVectorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindAverageVectorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindAverageVectorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindAverageVectorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FindAverageVectorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindAverageVectorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FindAverageVectorResponse";
  }
  protected:
  explicit FindAverageVectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
  };
  // optional .proto.Vector vector = 1;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::proto::Vector& vector() const;
  PROTOBUF_NODISCARD ::proto::Vector* release_vector();
  ::proto::Vector* mutable_vector();
  void set_allocated_vector(::proto::Vector* vector);
  private:
  const ::proto::Vector& _internal_vector() const;
  ::proto::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::proto::Vector* vector);
  ::proto::Vector* unsafe_arena_release_vector();

  // @@protoc_insertion_point(class_scope:proto.FindAverageVectorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::Vector* vector_;
  friend struct ::TableStruct_backend_5fservices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// repeated float entry = 1;
inline int Vector::_internal_entry_size() const {
  return entry_.size();
}
inline int Vector::entry_size() const {
  return _internal_entry_size();
}
inline void Vector::clear_entry() {
  entry_.Clear();
}
inline float Vector::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline float Vector::entry(int index) const {
  // @@protoc_insertion_point(field_get:proto.Vector.entry)
  return _internal_entry(index);
}
inline void Vector::set_entry(int index, float value) {
  entry_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.Vector.entry)
}
inline void Vector::_internal_add_entry(float value) {
  entry_.Add(value);
}
inline void Vector::add_entry(float value) {
  _internal_add_entry(value);
  // @@protoc_insertion_point(field_add:proto.Vector.entry)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::_internal_entry() const {
  return entry_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector::entry() const {
  // @@protoc_insertion_point(field_list:proto.Vector.entry)
  return _internal_entry();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::_internal_mutable_entry() {
  return &entry_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:proto.Vector.entry)
  return _internal_mutable_entry();
}

// -------------------------------------------------------------------

// GetClosestNeighborRequest

// optional .proto.Vector vector = 1;
inline bool GetClosestNeighborRequest::_internal_has_vector() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vector_ != nullptr);
  return value;
}
inline bool GetClosestNeighborRequest::has_vector() const {
  return _internal_has_vector();
}
inline void GetClosestNeighborRequest::clear_vector() {
  if (vector_ != nullptr) vector_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::Vector& GetClosestNeighborRequest::_internal_vector() const {
  const ::proto::Vector* p = vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector&>(
      ::proto::_Vector_default_instance_);
}
inline const ::proto::Vector& GetClosestNeighborRequest::vector() const {
  // @@protoc_insertion_point(field_get:proto.GetClosestNeighborRequest.vector)
  return _internal_vector();
}
inline void GetClosestNeighborRequest::unsafe_arena_set_allocated_vector(
    ::proto::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_);
  }
  vector_ = vector;
  if (vector) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetClosestNeighborRequest.vector)
}
inline ::proto::Vector* GetClosestNeighborRequest::release_vector() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Vector* temp = vector_;
  vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector* GetClosestNeighborRequest::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:proto.GetClosestNeighborRequest.vector)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Vector* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::proto::Vector* GetClosestNeighborRequest::_internal_mutable_vector() {
  _has_bits_[0] |= 0x00000001u;
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector>(GetArenaForAllocation());
    vector_ = p;
  }
  return vector_;
}
inline ::proto::Vector* GetClosestNeighborRequest::mutable_vector() {
  ::proto::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:proto.GetClosestNeighborRequest.vector)
  return _msg;
}
inline void GetClosestNeighborRequest::set_allocated_vector(::proto::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Vector>::GetOwningArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:proto.GetClosestNeighborRequest.vector)
}

// -------------------------------------------------------------------

// GetClosestNeighborResponse

// optional string author = 1;
inline bool GetClosestNeighborResponse::_internal_has_author() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetClosestNeighborResponse::has_author() const {
  return _internal_has_author();
}
inline void GetClosestNeighborResponse::clear_author() {
  author_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetClosestNeighborResponse::author() const {
  // @@protoc_insertion_point(field_get:proto.GetClosestNeighborResponse.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClosestNeighborResponse::set_author(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetClosestNeighborResponse.author)
}
inline std::string* GetClosestNeighborResponse::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:proto.GetClosestNeighborResponse.author)
  return _s;
}
inline const std::string& GetClosestNeighborResponse::_internal_author() const {
  return author_.Get();
}
inline void GetClosestNeighborResponse::_internal_set_author(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetClosestNeighborResponse::_internal_mutable_author() {
  _has_bits_[0] |= 0x00000001u;
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetClosestNeighborResponse::release_author() {
  // @@protoc_insertion_point(field_release:proto.GetClosestNeighborResponse.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = author_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetClosestNeighborResponse::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetClosestNeighborResponse.author)
}

// -------------------------------------------------------------------

// FindAverageVectorRequest

// -------------------------------------------------------------------

// FindAverageVectorResponse

// optional .proto.Vector vector = 1;
inline bool FindAverageVectorResponse::_internal_has_vector() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vector_ != nullptr);
  return value;
}
inline bool FindAverageVectorResponse::has_vector() const {
  return _internal_has_vector();
}
inline void FindAverageVectorResponse::clear_vector() {
  if (vector_ != nullptr) vector_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::Vector& FindAverageVectorResponse::_internal_vector() const {
  const ::proto::Vector* p = vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Vector&>(
      ::proto::_Vector_default_instance_);
}
inline const ::proto::Vector& FindAverageVectorResponse::vector() const {
  // @@protoc_insertion_point(field_get:proto.FindAverageVectorResponse.vector)
  return _internal_vector();
}
inline void FindAverageVectorResponse::unsafe_arena_set_allocated_vector(
    ::proto::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector_);
  }
  vector_ = vector;
  if (vector) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.FindAverageVectorResponse.vector)
}
inline ::proto::Vector* FindAverageVectorResponse::release_vector() {
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Vector* temp = vector_;
  vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Vector* FindAverageVectorResponse::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:proto.FindAverageVectorResponse.vector)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::Vector* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::proto::Vector* FindAverageVectorResponse::_internal_mutable_vector() {
  _has_bits_[0] |= 0x00000001u;
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Vector>(GetArenaForAllocation());
    vector_ = p;
  }
  return vector_;
}
inline ::proto::Vector* FindAverageVectorResponse::mutable_vector() {
  ::proto::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:proto.FindAverageVectorResponse.vector)
  return _msg;
}
inline void FindAverageVectorResponse::set_allocated_vector(::proto::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Vector>::GetOwningArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:proto.FindAverageVectorResponse.vector)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fservices_2eproto
