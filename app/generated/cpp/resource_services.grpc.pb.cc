// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: resource_services.proto

#include "resource_services.pb.h"
#include "resource_services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* MainDatastoreService_method_names[] = {
  "/proto.MainDatastoreService/UploadReview",
  "/proto.MainDatastoreService/BatchUploadReview",
  "/proto.MainDatastoreService/GetReviewsByAuthor",
  "/proto.MainDatastoreService/GetAuthors",
};

std::unique_ptr< MainDatastoreService::Stub> MainDatastoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MainDatastoreService::Stub> stub(new MainDatastoreService::Stub(channel, options));
  return stub;
}

MainDatastoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadReview_(MainDatastoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchUploadReview_(MainDatastoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReviewsByAuthor_(MainDatastoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAuthors_(MainDatastoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MainDatastoreService::Stub::UploadReview(::grpc::ClientContext* context, const ::proto::UploadReviewRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadReview_, context, request, response);
}

void MainDatastoreService::Stub::async::UploadReview(::grpc::ClientContext* context, const ::proto::UploadReviewRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadReview_, context, request, response, std::move(f));
}

void MainDatastoreService::Stub::async::UploadReview(::grpc::ClientContext* context, const ::proto::UploadReviewRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadReview_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* MainDatastoreService::Stub::PrepareAsyncUploadReviewRaw(::grpc::ClientContext* context, const ::proto::UploadReviewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::UploadReviewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadReview_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* MainDatastoreService::Stub::AsyncUploadReviewRaw(::grpc::ClientContext* context, const ::proto::UploadReviewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadReviewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainDatastoreService::Stub::BatchUploadReview(::grpc::ClientContext* context, const ::proto::BatchUploadReviewRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::BatchUploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchUploadReview_, context, request, response);
}

void MainDatastoreService::Stub::async::BatchUploadReview(::grpc::ClientContext* context, const ::proto::BatchUploadReviewRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::BatchUploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchUploadReview_, context, request, response, std::move(f));
}

void MainDatastoreService::Stub::async::BatchUploadReview(::grpc::ClientContext* context, const ::proto::BatchUploadReviewRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchUploadReview_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* MainDatastoreService::Stub::PrepareAsyncBatchUploadReviewRaw(::grpc::ClientContext* context, const ::proto::BatchUploadReviewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::BatchUploadReviewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchUploadReview_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* MainDatastoreService::Stub::AsyncBatchUploadReviewRaw(::grpc::ClientContext* context, const ::proto::BatchUploadReviewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchUploadReviewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainDatastoreService::Stub::GetReviewsByAuthor(::grpc::ClientContext* context, const ::proto::GetReviewsByAuthorRequest& request, ::proto::GetReviewsByAuthorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetReviewsByAuthorRequest, ::proto::GetReviewsByAuthorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReviewsByAuthor_, context, request, response);
}

void MainDatastoreService::Stub::async::GetReviewsByAuthor(::grpc::ClientContext* context, const ::proto::GetReviewsByAuthorRequest* request, ::proto::GetReviewsByAuthorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetReviewsByAuthorRequest, ::proto::GetReviewsByAuthorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReviewsByAuthor_, context, request, response, std::move(f));
}

void MainDatastoreService::Stub::async::GetReviewsByAuthor(::grpc::ClientContext* context, const ::proto::GetReviewsByAuthorRequest* request, ::proto::GetReviewsByAuthorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReviewsByAuthor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetReviewsByAuthorResponse>* MainDatastoreService::Stub::PrepareAsyncGetReviewsByAuthorRaw(::grpc::ClientContext* context, const ::proto::GetReviewsByAuthorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetReviewsByAuthorResponse, ::proto::GetReviewsByAuthorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReviewsByAuthor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetReviewsByAuthorResponse>* MainDatastoreService::Stub::AsyncGetReviewsByAuthorRaw(::grpc::ClientContext* context, const ::proto::GetReviewsByAuthorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReviewsByAuthorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MainDatastoreService::Stub::GetAuthors(::grpc::ClientContext* context, const ::proto::GetAuthorsRequest& request, ::proto::GetAuthorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::GetAuthorsRequest, ::proto::GetAuthorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAuthors_, context, request, response);
}

void MainDatastoreService::Stub::async::GetAuthors(::grpc::ClientContext* context, const ::proto::GetAuthorsRequest* request, ::proto::GetAuthorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::GetAuthorsRequest, ::proto::GetAuthorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthors_, context, request, response, std::move(f));
}

void MainDatastoreService::Stub::async::GetAuthors(::grpc::ClientContext* context, const ::proto::GetAuthorsRequest* request, ::proto::GetAuthorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAuthorsResponse>* MainDatastoreService::Stub::PrepareAsyncGetAuthorsRaw(::grpc::ClientContext* context, const ::proto::GetAuthorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::GetAuthorsResponse, ::proto::GetAuthorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAuthors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::GetAuthorsResponse>* MainDatastoreService::Stub::AsyncGetAuthorsRaw(::grpc::ClientContext* context, const ::proto::GetAuthorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAuthorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

MainDatastoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainDatastoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainDatastoreService::Service, ::proto::UploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UploadReviewRequest* req,
             ::proto::Payload* resp) {
               return service->UploadReview(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainDatastoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainDatastoreService::Service, ::proto::BatchUploadReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::BatchUploadReviewRequest* req,
             ::proto::Payload* resp) {
               return service->BatchUploadReview(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainDatastoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainDatastoreService::Service, ::proto::GetReviewsByAuthorRequest, ::proto::GetReviewsByAuthorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetReviewsByAuthorRequest* req,
             ::proto::GetReviewsByAuthorResponse* resp) {
               return service->GetReviewsByAuthor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MainDatastoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MainDatastoreService::Service, ::proto::GetAuthorsRequest, ::proto::GetAuthorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MainDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::GetAuthorsRequest* req,
             ::proto::GetAuthorsResponse* resp) {
               return service->GetAuthors(ctx, req, resp);
             }, this)));
}

MainDatastoreService::Service::~Service() {
}

::grpc::Status MainDatastoreService::Service::UploadReview(::grpc::ServerContext* context, const ::proto::UploadReviewRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainDatastoreService::Service::BatchUploadReview(::grpc::ServerContext* context, const ::proto::BatchUploadReviewRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainDatastoreService::Service::GetReviewsByAuthor(::grpc::ServerContext* context, const ::proto::GetReviewsByAuthorRequest* request, ::proto::GetReviewsByAuthorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MainDatastoreService::Service::GetAuthors(::grpc::ServerContext* context, const ::proto::GetAuthorsRequest* request, ::proto::GetAuthorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* FilestoreService_method_names[] = {
  "/proto.FilestoreService/UploadObject",
  "/proto.FilestoreService/DownloadObject",
};

std::unique_ptr< FilestoreService::Stub> FilestoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FilestoreService::Stub> stub(new FilestoreService::Stub(channel, options));
  return stub;
}

FilestoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadObject_(FilestoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadObject_(FilestoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FilestoreService::Stub::UploadObject(::grpc::ClientContext* context, const ::proto::UploadObjectRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UploadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadObject_, context, request, response);
}

void FilestoreService::Stub::async::UploadObject(::grpc::ClientContext* context, const ::proto::UploadObjectRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UploadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadObject_, context, request, response, std::move(f));
}

void FilestoreService::Stub::async::UploadObject(::grpc::ClientContext* context, const ::proto::UploadObjectRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* FilestoreService::Stub::PrepareAsyncUploadObjectRaw(::grpc::ClientContext* context, const ::proto::UploadObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::UploadObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* FilestoreService::Stub::AsyncUploadObjectRaw(::grpc::ClientContext* context, const ::proto::UploadObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FilestoreService::Stub::DownloadObject(::grpc::ClientContext* context, const ::proto::DownloadObjectRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DownloadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadObject_, context, request, response);
}

void FilestoreService::Stub::async::DownloadObject(::grpc::ClientContext* context, const ::proto::DownloadObjectRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DownloadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadObject_, context, request, response, std::move(f));
}

void FilestoreService::Stub::async::DownloadObject(::grpc::ClientContext* context, const ::proto::DownloadObjectRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* FilestoreService::Stub::PrepareAsyncDownloadObjectRaw(::grpc::ClientContext* context, const ::proto::DownloadObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::DownloadObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* FilestoreService::Stub::AsyncDownloadObjectRaw(::grpc::ClientContext* context, const ::proto::DownloadObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

FilestoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FilestoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FilestoreService::Service, ::proto::UploadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FilestoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UploadObjectRequest* req,
             ::proto::Payload* resp) {
               return service->UploadObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FilestoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FilestoreService::Service, ::proto::DownloadObjectRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FilestoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DownloadObjectRequest* req,
             ::proto::Payload* resp) {
               return service->DownloadObject(ctx, req, resp);
             }, this)));
}

FilestoreService::Service::~Service() {
}

::grpc::Status FilestoreService::Service::UploadObject(::grpc::ServerContext* context, const ::proto::UploadObjectRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FilestoreService::Service::DownloadObject(::grpc::ServerContext* context, const ::proto::DownloadObjectRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DatastoreAdminService_method_names[] = {
  "/proto.DatastoreAdminService/ManageResource",
  "/proto.DatastoreAdminService/CheckHealth",
};

std::unique_ptr< DatastoreAdminService::Stub> DatastoreAdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatastoreAdminService::Stub> stub(new DatastoreAdminService::Stub(channel, options));
  return stub;
}

DatastoreAdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ManageResource_(DatastoreAdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(DatastoreAdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatastoreAdminService::Stub::ManageResource(::grpc::ClientContext* context, const ::proto::ManageResourceRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::ManageResourceRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ManageResource_, context, request, response);
}

void DatastoreAdminService::Stub::async::ManageResource(::grpc::ClientContext* context, const ::proto::ManageResourceRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::ManageResourceRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageResource_, context, request, response, std::move(f));
}

void DatastoreAdminService::Stub::async::ManageResource(::grpc::ClientContext* context, const ::proto::ManageResourceRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageResource_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* DatastoreAdminService::Stub::PrepareAsyncManageResourceRaw(::grpc::ClientContext* context, const ::proto::ManageResourceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::ManageResourceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ManageResource_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* DatastoreAdminService::Stub::AsyncManageResourceRaw(::grpc::ClientContext* context, const ::proto::ManageResourceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncManageResourceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatastoreAdminService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void DatastoreAdminService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void DatastoreAdminService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* DatastoreAdminService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* DatastoreAdminService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatastoreAdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatastoreAdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatastoreAdminService::Service, ::proto::ManageResourceRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatastoreAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::ManageResourceRequest* req,
             ::proto::Payload* resp) {
               return service->ManageResource(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatastoreAdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatastoreAdminService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatastoreAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

DatastoreAdminService::Service::~Service() {
}

::grpc::Status DatastoreAdminService::Service::ManageResource(::grpc::ServerContext* context, const ::proto::ManageResourceRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatastoreAdminService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* IngestionService_method_names[] = {
  "/proto.IngestionService/IngestReview",
  "/proto.IngestionService/IngestBatch",
  "/proto.IngestionService/CheckHealth",
};

std::unique_ptr< IngestionService::Stub> IngestionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IngestionService::Stub> stub(new IngestionService::Stub(channel, options));
  return stub;
}

IngestionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IngestReview_(IngestionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IngestBatch_(IngestionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(IngestionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IngestionService::Stub::IngestReview(::grpc::ClientContext* context, const ::proto::IngestReviewRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::IngestReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IngestReview_, context, request, response);
}

void IngestionService::Stub::async::IngestReview(::grpc::ClientContext* context, const ::proto::IngestReviewRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::IngestReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IngestReview_, context, request, response, std::move(f));
}

void IngestionService::Stub::async::IngestReview(::grpc::ClientContext* context, const ::proto::IngestReviewRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IngestReview_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::PrepareAsyncIngestReviewRaw(::grpc::ClientContext* context, const ::proto::IngestReviewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::IngestReviewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IngestReview_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::AsyncIngestReviewRaw(::grpc::ClientContext* context, const ::proto::IngestReviewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIngestReviewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IngestionService::Stub::IngestBatch(::grpc::ClientContext* context, const ::proto::IngestBatchRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::IngestBatchRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IngestBatch_, context, request, response);
}

void IngestionService::Stub::async::IngestBatch(::grpc::ClientContext* context, const ::proto::IngestBatchRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::IngestBatchRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IngestBatch_, context, request, response, std::move(f));
}

void IngestionService::Stub::async::IngestBatch(::grpc::ClientContext* context, const ::proto::IngestBatchRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IngestBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::PrepareAsyncIngestBatchRaw(::grpc::ClientContext* context, const ::proto::IngestBatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::IngestBatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IngestBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::AsyncIngestBatchRaw(::grpc::ClientContext* context, const ::proto::IngestBatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIngestBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status IngestionService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void IngestionService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void IngestionService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* IngestionService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

IngestionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IngestionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IngestionService::Service, ::proto::IngestReviewRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IngestionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::IngestReviewRequest* req,
             ::proto::Payload* resp) {
               return service->IngestReview(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IngestionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IngestionService::Service, ::proto::IngestBatchRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IngestionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::IngestBatchRequest* req,
             ::proto::Payload* resp) {
               return service->IngestBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IngestionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IngestionService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](IngestionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

IngestionService::Service::~Service() {
}

::grpc::Status IngestionService::Service::IngestReview(::grpc::ServerContext* context, const ::proto::IngestReviewRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IngestionService::Service::IngestBatch(::grpc::ServerContext* context, const ::proto::IngestBatchRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IngestionService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UploadService_method_names[] = {
  "/proto.UploadService/UploadFile",
  "/proto.UploadService/CheckHealth",
};

std::unique_ptr< UploadService::Stub> UploadService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UploadService::Stub> stub(new UploadService::Stub(channel, options));
  return stub;
}

UploadService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadFile_(UploadService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(UploadService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UploadService::Stub::UploadFile(::grpc::ClientContext* context, const ::proto::UploadFileRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UploadFileRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadFile_, context, request, response);
}

void UploadService::Stub::async::UploadFile(::grpc::ClientContext* context, const ::proto::UploadFileRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UploadFileRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, std::move(f));
}

void UploadService::Stub::async::UploadFile(::grpc::ClientContext* context, const ::proto::UploadFileRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* UploadService::Stub::PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::proto::UploadFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::UploadFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* UploadService::Stub::AsyncUploadFileRaw(::grpc::ClientContext* context, const ::proto::UploadFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UploadService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void UploadService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void UploadService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* UploadService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* UploadService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

UploadService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UploadService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UploadService::Service, ::proto::UploadFileRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UploadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UploadFileRequest* req,
             ::proto::Payload* resp) {
               return service->UploadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UploadService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UploadService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UploadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

UploadService::Service::~Service() {
}

::grpc::Status UploadService::Service::UploadFile(::grpc::ServerContext* context, const ::proto::UploadFileRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UploadService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ProjectionDatastoreService_method_names[] = {
  "/proto.ProjectionDatastoreService/UploadProjection",
  "/proto.ProjectionDatastoreService/AppendProjection",
  "/proto.ProjectionDatastoreService/DownloadProjection",
  "/proto.ProjectionDatastoreService/DownloadMovieIndices",
  "/proto.ProjectionDatastoreService/CheckHealth",
};

std::unique_ptr< ProjectionDatastoreService::Stub> ProjectionDatastoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProjectionDatastoreService::Stub> stub(new ProjectionDatastoreService::Stub(channel, options));
  return stub;
}

ProjectionDatastoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadProjection_(ProjectionDatastoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AppendProjection_(ProjectionDatastoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadProjection_(ProjectionDatastoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadMovieIndices_(ProjectionDatastoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckHealth_(ProjectionDatastoreService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProjectionDatastoreService::Stub::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::UploadProjection(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncUploadProjectionRaw(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::UploadProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncUploadProjectionRaw(::grpc::ClientContext* context, const ::proto::UploadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::AppendProjection(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncAppendProjectionRaw(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::AppendProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncAppendProjectionRaw(::grpc::ClientContext* context, const ::proto::AppendProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::proto::DownloadProjectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadProjection_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadProjection_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::DownloadProjection(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadProjection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadProjectionResponse>* ProjectionDatastoreService::Stub::PrepareAsyncDownloadProjectionRaw(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DownloadProjectionResponse, ::proto::DownloadProjectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadProjection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadProjectionResponse>* ProjectionDatastoreService::Stub::AsyncDownloadProjectionRaw(::grpc::ClientContext* context, const ::proto::DownloadProjectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadProjectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::proto::DownloadMovieIndicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadMovieIndices_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMovieIndices_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::DownloadMovieIndices(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadMovieIndices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadMovieIndicesResponse>* ProjectionDatastoreService::Stub::PrepareAsyncDownloadMovieIndicesRaw(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::DownloadMovieIndicesResponse, ::proto::DownloadMovieIndicesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadMovieIndices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::DownloadMovieIndicesResponse>* ProjectionDatastoreService::Stub::AsyncDownloadMovieIndicesRaw(::grpc::ClientContext* context, const ::proto::DownloadMovieIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadMovieIndicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProjectionDatastoreService::Stub::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::proto::Payload* response) {
  return ::grpc::internal::BlockingUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckHealth_, context, request, response);
}

void ProjectionDatastoreService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, std::move(f));
}

void ProjectionDatastoreService::Stub::async::CheckHealth(::grpc::ClientContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::PrepareAsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::proto::Payload, ::proto::HealthCheckRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckHealth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::proto::Payload>* ProjectionDatastoreService::Stub::AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::proto::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckHealthRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProjectionDatastoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::UploadProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::UploadProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->UploadProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::AppendProjectionRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::AppendProjectionRequest* req,
             ::proto::Payload* resp) {
               return service->AppendProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::DownloadProjectionRequest, ::proto::DownloadProjectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DownloadProjectionRequest* req,
             ::proto::DownloadProjectionResponse* resp) {
               return service->DownloadProjection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::DownloadMovieIndicesRequest, ::proto::DownloadMovieIndicesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::DownloadMovieIndicesRequest* req,
             ::proto::DownloadMovieIndicesResponse* resp) {
               return service->DownloadMovieIndices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProjectionDatastoreService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProjectionDatastoreService::Service, ::proto::HealthCheckRequest, ::proto::Payload, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProjectionDatastoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::proto::HealthCheckRequest* req,
             ::proto::Payload* resp) {
               return service->CheckHealth(ctx, req, resp);
             }, this)));
}

ProjectionDatastoreService::Service::~Service() {
}

::grpc::Status ProjectionDatastoreService::Service::UploadProjection(::grpc::ServerContext* context, const ::proto::UploadProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::AppendProjection(::grpc::ServerContext* context, const ::proto::AppendProjectionRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::DownloadProjection(::grpc::ServerContext* context, const ::proto::DownloadProjectionRequest* request, ::proto::DownloadProjectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::DownloadMovieIndices(::grpc::ServerContext* context, const ::proto::DownloadMovieIndicesRequest* request, ::proto::DownloadMovieIndicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProjectionDatastoreService::Service::CheckHealth(::grpc::ServerContext* context, const ::proto::HealthCheckRequest* request, ::proto::Payload* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

